#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã
"""

import requests
import json
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://localhost:8001"
LOGIN_URL = f"{BASE_URL}/auth/login"
APPOINTMENTS_URL = f"{BASE_URL}/appointments/"
PATIENTS_URL = f"{BASE_URL}/patients/"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
LOGIN_DATA = {
    "username": "+77771234567",
    "password": "1234"
}

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
SERVICES = [
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
    "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", 
    "–ü–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤",
    "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞",
    "–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è",
    "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è",
    "–õ–µ—á–µ–Ω–∏–µ –¥–µ—Å–µ–Ω",
    "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤"
]

# –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
DOCTORS = [
    {"id": 1, "name": "–î–æ–∫—Ç–æ—Ä –ê–π–¥–∞—Ä"},
    {"id": 2, "name": "–î–æ–∫—Ç–æ—Ä –ê—Å–µ–ª—å"},
    {"id": 3, "name": "–î–æ–∫—Ç–æ—Ä –î–∞–Ω–∏—è—Ä"}
]

def login():
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    try:
        response = requests.post(LOGIN_URL, data=LOGIN_DATA)
        if response.status_code == 200:
            data = response.json()
            return data['access_token']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def get_patients(token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.get(PATIENTS_URL, headers=headers)
        if response.status_code == 200:
            data = response.json()
            return data.get('patients', [])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        return []

def create_appointment(token, appointment_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.post(APPOINTMENTS_URL, json=appointment_data, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {response.status_code}")
            if response.status_code == 422:
                print(f"üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return None

def main():
    print("üöÄ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã...")
    
    # –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
    token = login()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        return
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    patients = get_patients(token)
    if not patients:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(patients)}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–¥ –Ω–∞ 2024)
    appointments_created = 0
    today = datetime.now().replace(year=2024, hour=9, minute=0, second=0, microsecond=0)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
    for day_offset in range(7):
        appointment_date = today + timedelta(days=day_offset)
        
        # –°–æ–∑–¥–∞–µ–º 2-3 –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        for i in range(random.randint(2, 3)):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            patient = random.choice(patients)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞—á–∞
            doctor = random.choice(DOCTORS)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —É—Å–ª—É–≥—É
            service = random.choice(SERVICES)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è (9:00 - 17:00)
            appointment_time = appointment_date.replace(
                hour=random.randint(9, 17),
                minute=random.choice([0, 30])
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointment_data = {
                "patient_id": patient['id'],
                "doctor_id": doctor['id'],
                "appointment_datetime": appointment_time.isoformat(),
                "service_type": service,
                "notes": f"–ó–∞–ø–∏—Å—å –Ω–∞ {appointment_time.strftime('%d.%m.%Y')}",
                "status": "scheduled",
                "registrar_id": 1
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            appointment = create_appointment(token, appointment_data)
            if appointment:
                appointments_created += 1
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å: {patient['full_name']} - {service} - {appointment_time.strftime('%d.%m.%Y %H:%M')}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {appointment_time.strftime('%d.%m.%Y %H:%M')}")
    
    print(f"üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {appointments_created}")
    print(f"üìä –í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(patients)}")
    print(f"üìÖ –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥: {today.strftime('%d.%m.%Y')} - {(today + timedelta(days=6)).strftime('%d.%m.%Y')}")

if __name__ == "__main__":
    main()
