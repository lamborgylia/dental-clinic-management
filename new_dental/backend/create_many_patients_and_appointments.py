#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å–µ–π
"""

import requests
import json
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://localhost:8001"
LOGIN_URL = f"{BASE_URL}/auth/login"
APPOINTMENTS_URL = f"{BASE_URL}/appointments/"
PATIENTS_URL = f"{BASE_URL}/patients/"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
LOGIN_DATA = {
    "username": "+77771234567",
    "password": "1234"
}

# –°–ø–∏—Å–æ–∫ –∫–∞–∑–∞—Ö—Å–∫–∏—Ö –∏–º–µ–Ω –∏ —Ñ–∞–º–∏–ª–∏–π
FIRST_NAMES = [
    "–ê–π–¥–∞—Ä", "–ê—Å–µ–ª—å", "–î–∞–Ω–∏—è—Ä", "–ñ–∞–Ω–∞—Ä", "–ï—Ä–ª–∞–Ω", "–ê–π–≥—É–ª—å", "–ú–∞—Ä–∞—Ç", "–ê–ª–º–∞", "–°–µ—Ä–∏–∫", "–ì—É–ª—å–Ω–∞—Ä–∞",
    "–ù—É—Ä–ª–∞–Ω", "–ê–π–∂–∞–Ω", "–ï—Ä–∂–∞–Ω", "–ê–ª—Ç—ã–Ω–∞–π", "–î–∞—É—Ä–µ–Ω", "–ñ–∞–Ω–∞—Ä–≥—É–ª—å", "–ê—Å—ã–ª–±–µ–∫", "–ê–π–Ω—É—Ä", "–ë–µ–∫–∂–∞–Ω", "–ì—É–ª—å–º–∏—Ä–∞",
    "–ï—Ä–±–æ–ª–∞—Ç", "–ñ–∞–Ω–∞—Ç", "–ö–∞–º–∏–ª–∞", "–õ—è–∑–∑–∞—Ç", "–ú–µ–π—Ä–∞–º", "–ù—É—Ä–∂–∞–Ω", "–û—Ä—ã–Ω–±–∞–π", "–ü–µ—Ä–∏–∑–∞—Ç", "–†–∞—É—à–∞–Ω", "–°–∞–ª—Ç–∞–Ω–∞—Ç",
    "–¢–∞–ª–≥–∞—Ç", "–£–ª–∂–∞–Ω", "–§–∞—Ä–∏–¥–∞", "–•–∞–¥–∏—à–∞", "–®–æ–ª–ø–∞–Ω", "–≠–ª—å–º–∏—Ä–∞", "–Æ–ª–∏—è", "–Ø—Å–º–∏–Ω", "–ê–π–±–µ–∫", "–ë–∞–∫—ã—Ç",
    "–î–∞–Ω–∏—è—Ä", "–ï—Ä–º–µ–∫", "–ñ–∞–Ω–∞—Ä", "–ö–∞–π—Ä–∞—Ç", "–õ–µ–π–ª–∞", "–ú–∞—Ä–∞—Ç", "–ù—É—Ä—Å—É–ª—É", "–û–ª–∂–∞—Å", "–ü–µ—Ä–∏–∑–∞—Ç", "–†–∞—É—à–∞–Ω"
]

LAST_NAMES = [
    "–ù—É—Ä–ª–∞–Ω–æ–≤", "–ö–∞—Å—ã–º–æ–≤–∞", "–ê—Ö–º–µ—Ç–æ–≤", "–ë–µ–∫—Ç–∞—Å–æ–≤–∞", "–°–∞–¥—ã–∫–æ–≤", "–¢–æ–ª–µ—É–æ–≤–∞", "–ö–µ–Ω–∂–µ–±–∞–µ–≤", "–ù—É—Ä–ø–µ–∏—Å–æ–≤–∞",
    "–ñ—É–º–∞–±–µ–∫–æ–≤", "–ê–±–¥—É–ª–ª–∞–µ–≤–∞", "–ë–µ–∫–∂–∞–Ω–æ–≤", "–ö–∞—Å—ã–º–æ–≤–∞", "–¢–æ–ª–µ—É–æ–≤", "–ù—É—Ä–ª–∞–Ω–æ–≤–∞", "–ê—Ö–º–µ—Ç–æ–≤", "–ë–µ–∫—Ç–∞—Å–æ–≤–∞",
    "–°–∞–¥—ã–∫–æ–≤", "–¢–æ–ª–µ—É–æ–≤–∞", "–ö–µ–Ω–∂–µ–±–∞–µ–≤", "–ù—É—Ä–ø–µ–∏—Å–æ–≤–∞", "–ñ—É–º–∞–±–µ–∫–æ–≤", "–ê–±–¥—É–ª–ª–∞–µ–≤–∞", "–ë–µ–∫–∂–∞–Ω–æ–≤", "–ö–∞—Å—ã–º–æ–≤–∞",
    "–¢–æ–ª–µ—É–æ–≤", "–ù—É—Ä–ª–∞–Ω–æ–≤–∞", "–ê—Ö–º–µ—Ç–æ–≤", "–ë–µ–∫—Ç–∞—Å–æ–≤–∞", "–°–∞–¥—ã–∫–æ–≤", "–¢–æ–ª–µ—É–æ–≤–∞", "–ö–µ–Ω–∂–µ–±–∞–µ–≤", "–ù—É—Ä–ø–µ–∏—Å–æ–≤–∞",
    "–ñ—É–º–∞–±–µ–∫–æ–≤", "–ê–±–¥—É–ª–ª–∞–µ–≤–∞", "–ë–µ–∫–∂–∞–Ω–æ–≤", "–ö–∞—Å—ã–º–æ–≤–∞", "–¢–æ–ª–µ—É–æ–≤", "–ù—É—Ä–ª–∞–Ω–æ–≤–∞", "–ê—Ö–º–µ—Ç–æ–≤", "–ë–µ–∫—Ç–∞—Å–æ–≤–∞",
    "–°–∞–¥—ã–∫–æ–≤", "–¢–æ–ª–µ—É–æ–≤–∞", "–ö–µ–Ω–∂–µ–±–∞–µ–≤", "–ù—É—Ä–ø–µ–∏—Å–æ–≤–∞", "–ñ—É–º–∞–±–µ–∫–æ–≤", "–ê–±–¥—É–ª–ª–∞–µ–≤–∞", "–ë–µ–∫–∂–∞–Ω–æ–≤", "–ö–∞—Å—ã–º–æ–≤–∞"
]

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
SERVICES = [
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", "–ü–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞",
    "–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è", "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è", "–õ–µ—á–µ–Ω–∏–µ –¥–µ—Å–µ–Ω", "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤",
    "–õ–µ—á–µ–Ω–∏–µ –ø—É–ª—å–ø–∏—Ç–∞", "–ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è", "–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
    "–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "–≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—è", "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
]

# –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
DOCTORS = [
    {"id": 1, "name": "–î–æ–∫—Ç–æ—Ä –ê–π–¥–∞—Ä"},
    {"id": 2, "name": "–î–æ–∫—Ç–æ—Ä –ê—Å–µ–ª—å"},
    {"id": 3, "name": "–î–æ–∫—Ç–æ—Ä –î–∞–Ω–∏—è—Ä"}
]

def login():
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    try:
        response = requests.post(LOGIN_URL, data=LOGIN_DATA)
        if response.status_code == 200:
            data = response.json()
            return data['access_token']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def create_patient(token, patient_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.post(PATIENTS_URL, json=patient_data, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_data['full_name']}: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
        return None

def create_appointment(token, appointment_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.post(APPOINTMENTS_URL, json=appointment_data, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        return None

def generate_phone():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return f"+7777{random.randint(1000000, 9999999)}"

def generate_iin():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò–ù"""
    return f"{random.randint(100000000000, 999999999999)}"

def generate_birth_date():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    start_date = datetime(1950, 1, 1)
    end_date = datetime(2010, 12, 31)
    time_between = end_date - start_date
    days_between = time_between.days
    random_days = random.randint(0, days_between)
    birth_date = start_date + timedelta(days=random_days)
    return birth_date.strftime('%Y-%m-%d')

def main():
    print("üöÄ –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å–µ–π...")
    
    # –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
    token = login()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        return
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    # –°–æ–∑–¥–∞–µ–º 50 –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    patients = []
    for i in range(50):
        first_name = random.choice(FIRST_NAMES)
        last_name = random.choice(LAST_NAMES)
        full_name = f"{last_name} {first_name} {last_name}–æ–≤–∏—á" if i % 2 == 0 else f"{last_name}–∞ {first_name} {last_name}–æ–≤–Ω–∞"
        
        patient_data = {
            "full_name": full_name,
            "phone": generate_phone(),
            "iin": generate_iin(),
            "birth_date": generate_birth_date(),
            "allergies": random.choice(["–ù–µ—Ç", "–ü–µ–Ω–∏—Ü–∏–ª–ª–∏–Ω", "–õ–∞—Ç–µ–∫—Å", "–ú–µ—Ç–∞–ª–ª—ã", "–ê–Ω–µ—Å—Ç–µ—Ç–∏–∫–∏"]) if random.random() < 0.3 else "",
            "chronic_diseases": random.choice(["–ù–µ—Ç", "–î–∏–∞–±–µ—Ç", "–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è", "–ê—Å—Ç–º–∞", "–°–µ—Ä–¥–µ—á–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è"]) if random.random() < 0.2 else "",
            "contraindications": random.choice(["–ù–µ—Ç", "–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", "–ö–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–¥—å—é", "–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–∫–æ–∞–≥—É–ª—è–Ω—Ç–æ–≤"]) if random.random() < 0.1 else "",
            "special_notes": random.choice(["–ù–µ—Ç", "–ë–æ—è–∑–Ω—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞", "–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "VIP –∫–ª–∏–µ–Ω—Ç"]) if random.random() < 0.15 else ""
        }
        
        patient = create_patient(token, patient_data)
        if patient:
            patients.append(patient)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç {i+1}/50: {full_name}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ {i+1}/50: {full_name}")
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(patients)}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π
    appointments_created = 0
    today = datetime.now().replace(year=2024, hour=9, minute=0, second=0, microsecond=0)
    
    for day_offset in range(30):
        appointment_date = today + timedelta(days=day_offset)
        
        # –°–æ–∑–¥–∞–µ–º 5-8 –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        daily_appointments = random.randint(5, 8)
        for i in range(daily_appointments):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            patient = random.choice(patients)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞—á–∞
            doctor = random.choice(DOCTORS)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —É—Å–ª—É–≥—É
            service = random.choice(SERVICES)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è (9:00 - 18:00)
            appointment_time = appointment_date.replace(
                hour=random.randint(9, 18),
                minute=random.choice([0, 30])
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointment_data = {
                "patient_id": patient['id'],
                "doctor_id": doctor['id'],
                "appointment_datetime": appointment_time.isoformat(),
                "service_type": service,
                "notes": f"–ó–∞–ø–∏—Å—å –Ω–∞ {appointment_time.strftime('%d.%m.%Y')}",
                "status": "scheduled",
                "registrar_id": 1
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            appointment = create_appointment(token, appointment_data)
            if appointment:
                appointments_created += 1
                if appointments_created % 50 == 0:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {appointments_created}")
    
    print(f"üéâ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(patients)}")
    print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {appointments_created}")
    print(f"üìÖ –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥: {today.strftime('%d.%m.%Y')} - {(today + timedelta(days=29)).strftime('%d.%m.%Y')}")

if __name__ == "__main__":
    main()

