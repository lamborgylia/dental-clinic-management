from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends
from typing import List, Dict
import json
import asyncio
from ..core.dependencies import get_current_user_from_token
from ..models.user import User

router = APIRouter()

class ConnectionManager:
    def __init__(self):
        # –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ doctor_id
        self.active_connections: Dict[int, List[WebSocket]] = {}
        # –•—Ä–∞–Ω–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ user_id –¥–ª—è –æ–±—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.user_connections: Dict[int, List[WebSocket]] = {}

    async def connect(self, websocket: WebSocket, doctor_id: int = None, user_id: int = None):
        await websocket.accept()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞
        if doctor_id:
            if doctor_id not in self.active_connections:
                self.active_connections[doctor_id] = []
            self.active_connections[doctor_id].append(websocket)
            print(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Ä–∞—á–∞ {doctor_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id:
            if user_id not in self.user_connections:
                self.user_connections[user_id] = []
            self.user_connections[user_id].append(websocket)
            print(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    def disconnect(self, websocket: WebSocket, doctor_id: int = None, user_id: int = None):
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Ä–∞—á–∞
        if doctor_id and doctor_id in self.active_connections:
            if websocket in self.active_connections[doctor_id]:
                self.active_connections[doctor_id].remove(websocket)
                if not self.active_connections[doctor_id]:
                    del self.active_connections[doctor_id]
                print(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Ä–∞—á–∞ {doctor_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id and user_id in self.user_connections:
            if websocket in self.user_connections[user_id]:
                self.user_connections[user_id].remove(websocket)
                if not self.user_connections[user_id]:
                    del self.user_connections[user_id]
                print(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async def send_personal_message(self, message: str, websocket: WebSocket):
        try:
            await websocket.send_text(message)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def broadcast_to_doctor(self, message: str, doctor_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞"""
        if doctor_id in self.active_connections:
            disconnected = []
            for connection in self.active_connections[doctor_id]:
                try:
                    await connection.send_text(message)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–∞—á—É {doctor_id}: {e}")
                    disconnected.append(connection)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for connection in disconnected:
                self.active_connections[doctor_id].remove(connection)

    async def broadcast_to_user(self, message: str, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_connections:
            disconnected = []
            for connection in self.user_connections[user_id]:
                try:
                    await connection.send_text(message)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    disconnected.append(connection)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for connection in disconnected:
                self.user_connections[user_id].remove(connection)

    async def broadcast_appointment_update(self, appointment_data: dict, doctor_id: int = None, user_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"""
        message = json.dumps({
            "type": "appointment_update",
            "data": appointment_data
        })
        
        if doctor_id:
            await self.broadcast_to_doctor(message, doctor_id)
        
        if user_id:
            await self.broadcast_to_user(message, user_id)

    async def broadcast_appointment_created(self, appointment_data: dict, doctor_id: int = None, user_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        message = json.dumps({
            "type": "appointment_created",
            "data": appointment_data
        })
        
        if doctor_id:
            await self.broadcast_to_doctor(message, doctor_id)
        
        if user_id:
            await self.broadcast_to_user(message, user_id)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
manager = ConnectionManager()

@router.websocket("/ws/appointments/{doctor_id}")
async def websocket_endpoint(websocket: WebSocket, doctor_id: int):
    """WebSocket endpoint –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø–∏—Å–µ–π –≤—Ä–∞—á–∞"""
    await manager.connect(websocket, doctor_id=doctor_id)
    
    try:
        while True:
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (ping/pong –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
            data = await websocket.receive_text()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await manager.send_personal_message(json.dumps({
                "type": "pong",
                "message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
            }), websocket)
            
    except WebSocketDisconnect:
        manager.disconnect(websocket, doctor_id=doctor_id)
        print(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Ä–∞—á–∞ {doctor_id}")

@router.websocket("/ws/user/{user_id}")
async def websocket_user_endpoint(websocket: WebSocket, user_id: int):
    """WebSocket endpoint –¥–ª—è –æ–±—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await manager.connect(websocket, user_id=user_id)
    
    try:
        while True:
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await manager.send_personal_message(json.dumps({
                "type": "pong",
                "message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
            }), websocket)
            
    except WebSocketDisconnect:
        manager.disconnect(websocket, user_id=user_id)
        print(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö
async def notify_appointment_created(appointment_data: dict, doctor_id: int = None, user_id: int = None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    await manager.broadcast_appointment_created(appointment_data, doctor_id, user_id)

async def notify_appointment_updated(appointment_data: dict, doctor_id: int = None, user_id: int = None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"""
    await manager.broadcast_appointment_update(appointment_data, doctor_id, user_id)
