from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from ..core.database import get_db
from ..core.dependencies import require_medical_staff
from ..models.user import User
from ..models.treatment_plan import TreatmentPlan, TreatmentPlanService
from ..schemas.treatment_plan import TreatmentPlanCreate, TreatmentPlanUpdate, TreatmentPlanResponse, TreatmentPlanServiceResponse

router = APIRouter(prefix="/treatment-plans", tags=["treatment_plans"])


@router.get("/", response_model=List[TreatmentPlanResponse])
async def get_treatment_plans(
    skip: int = 0,
    limit: int = 100,
    patient_id: int = None,
    doctor_id: int = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_medical_staff)
):
    from ..models.patient import Patient
    from ..models.treatment_plan import TreatmentPlanService
    
    query = db.query(TreatmentPlan).join(Patient, TreatmentPlan.patient_id == Patient.id)
    
    if patient_id:
        query = query.filter(TreatmentPlan.patient_id == patient_id)
    if doctor_id:
        query = query.filter(TreatmentPlan.doctor_id == doctor_id)
    
    treatment_plans = query.offset(skip).limit(limit).all()
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è: {len(treatment_plans)}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    result = []
    for plan in treatment_plans:
        patient = db.query(Patient).filter(Patient.id == plan.patient_id).first()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –∑—É–±–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
        tooth_services = db.query(TreatmentPlanService).filter(
            TreatmentPlanService.treatment_plan_id == plan.id
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –ø–æ –∑—É–±–∞–º
        teeth_services_dict = {}
        services_list = []
        selected_teeth = set()
        total_cost = 0
        
        for tooth_service in tooth_services:
            tooth_id = tooth_service.tooth_id
            service_id = tooth_service.service_id
            
            if tooth_id not in teeth_services_dict:
                teeth_services_dict[tooth_id] = []
            
            teeth_services_dict[tooth_id].append(service_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —É—Å–ª—É–≥–∏ –≤–º–µ—Å—Ç–æ ID
            services_list.append(TreatmentPlanServiceResponse(
                id=tooth_service.id,
                service_id=tooth_service.service_id,
                tooth_id=tooth_service.tooth_id,
                service_name=tooth_service.service_name,
                service_price=tooth_service.service_price,
                quantity=tooth_service.quantity,
                notes=tooth_service.notes
            ))
            selected_teeth.add(tooth_id)
            total_cost += tooth_service.service_price * tooth_service.quantity
        
        plan_dict = {
            "id": plan.id,
            "patient_id": plan.patient_id,
            "doctor_id": plan.doctor_id,
            "diagnosis": plan.diagnosis,
            "notes": plan.notes,
            "created_at": plan.created_at,
            "updated_at": plan.updated_at,
            "services": services_list,  # –°–ø–∏—Å–æ–∫ ID —É—Å–ª—É–≥
            "teeth_services": teeth_services_dict,  # –°–ª–æ–≤–∞—Ä—å –∑—É–± -> [—É—Å–ª—É–≥–∏]
            "patient_name": patient.full_name if patient else None,
            "patient_phone": patient.phone if patient else None,
            "patient_iin": patient.iin if patient else None,
            "patient_birth_date": patient.birth_date.isoformat() if patient and patient.birth_date else None,
            "patient_allergies": patient.allergies if patient else None,
            "patient_chronic_diseases": patient.chronic_diseases if patient else None,
            "patient_contraindications": patient.contraindications if patient else None,
            "patient_special_notes": patient.special_notes if patient else None,
            "treatment_description": plan.notes,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º notes –∫–∞–∫ treatment_description
            "total_cost": total_cost,  # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            "selected_teeth": list(selected_teeth),  # –°–ø–∏—Å–æ–∫ –∑—É–±–æ–≤
            "status": "active"
        }
        result.append(plan_dict)
        print(f"üìã –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è ID {plan.id}: {len(services_list)} —É—Å–ª—É–≥, {len(selected_teeth)} –∑—É–±–æ–≤, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}")
    
    print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(result)} –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è")
    return result


@router.post("/", response_model=TreatmentPlanResponse)
async def create_treatment_plan(
    treatment_plan: TreatmentPlanCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_medical_staff)
):
    from ..models.patient import Patient
    
    # Create treatment plan
    db_treatment_plan = TreatmentPlan(
        patient_id=treatment_plan.patient_id,
        doctor_id=treatment_plan.doctor_id,
        diagnosis=treatment_plan.diagnosis,
        notes=treatment_plan.notes
    )
    db.add(db_treatment_plan)
    db.commit()
    db.refresh(db_treatment_plan)
    
    # Add services to treatment plan
    for service_data in treatment_plan.services:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from ..models.service import Service
        service = db.query(Service).filter(Service.id == service_data.service_id).first()
        
        db_service = TreatmentPlanService(
            treatment_plan_id=db_treatment_plan.id,
            service_id=service_data.service_id,
            tooth_id=service_data.tooth_id or 0,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π tooth_id –∏–ª–∏ 0
            service_name=service_data.service_name or (service.name if service else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ –∏–∑ –ë–î
            service_price=service_data.service_price if service_data.service_price is not None else (service.price if service else 0.0),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ –∏–∑ –ë–î
            quantity=service_data.quantity,
            notes=service_data.notes
        )
        db.add(db_service)
    
    db.commit()
    db.refresh(db_treatment_plan)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    patient = db.query(Patient).filter(Patient.id == db_treatment_plan.patient_id).first()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    created_services = db.query(TreatmentPlanService).filter(
        TreatmentPlanService.treatment_plan_id == db_treatment_plan.id
    ).all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Å–ª—É–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    services_list = []
    teeth_services_dict = {}
    selected_teeth = set()
    total_cost = 0
    
    for service in created_services:
        tooth_id = service.tooth_id
        service_id = service.service_id
        
        if tooth_id not in teeth_services_dict:
            teeth_services_dict[tooth_id] = []
        
        teeth_services_dict[tooth_id].append(service_id)
        services_list.append(TreatmentPlanServiceResponse(
            id=service.id,
            service_id=service.service_id,
            tooth_id=service.tooth_id,
            service_name=service.service_name,
            service_price=service.service_price,
            quantity=service.quantity,
            notes=service.notes
        ))
        selected_teeth.add(tooth_id)
        total_cost += service.service_price * service.quantity
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    plan_dict = {
        "id": db_treatment_plan.id,
        "patient_id": db_treatment_plan.patient_id,
        "doctor_id": db_treatment_plan.doctor_id,
        "diagnosis": db_treatment_plan.diagnosis,
        "notes": db_treatment_plan.notes,
        "created_at": db_treatment_plan.created_at,
        "updated_at": db_treatment_plan.updated_at,
        "services": services_list,
        "teeth_services": teeth_services_dict,
        "patient_name": patient.full_name if patient else None,
        "patient_phone": patient.phone if patient else None,
        "patient_iin": patient.iin if patient else None,
        "patient_birth_date": patient.birth_date.isoformat() if patient and patient.birth_date else None,
        "patient_allergies": patient.allergies if patient else None,
        "patient_chronic_diseases": patient.chronic_diseases if patient else None,
        "patient_contraindications": patient.contraindications if patient else None,
        "patient_special_notes": patient.special_notes if patient else None,
        "treatment_description": db_treatment_plan.notes,
        "total_cost": total_cost,
        "selected_teeth": list(selected_teeth),
        "status": "active"
    }
    
    return plan_dict


@router.get("/patient/{patient_id}", response_model=List[TreatmentPlanResponse])
async def get_treatment_plans_by_patient(
    patient_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_medical_staff)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    from ..models.patient import Patient
    from ..models.treatment_plan import TreatmentPlanService
    
    print(f"üîç –ü–æ–∏—Å–∫ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ ID: {patient_id}")
    treatment_plans = db.query(TreatmentPlan).filter(TreatmentPlan.patient_id == patient_id).all()
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è: {len(treatment_plans)}")
    
    if not treatment_plans:
        print("‚ùå –ü–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    result = []
    for plan in treatment_plans:
        patient = db.query(Patient).filter(Patient.id == plan.patient_id).first()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –∑—É–±–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
        tooth_services = db.query(TreatmentPlanService).filter(
            TreatmentPlanService.treatment_plan_id == plan.id
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –ø–æ –∑—É–±–∞–º
        teeth_services_dict = {}
        services_list = []
        selected_teeth = set()
        total_cost = 0
        
        for tooth_service in tooth_services:
            tooth_id = tooth_service.tooth_id
            service_id = tooth_service.service_id
            
            if tooth_id not in teeth_services_dict:
                teeth_services_dict[tooth_id] = []
            
            teeth_services_dict[tooth_id].append(service_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —É—Å–ª—É–≥–∏ –≤–º–µ—Å—Ç–æ ID
            services_list.append(TreatmentPlanServiceResponse(
                id=tooth_service.id,
                service_id=tooth_service.service_id,
                tooth_id=tooth_service.tooth_id,
                service_name=tooth_service.service_name,
                service_price=tooth_service.service_price,
                quantity=tooth_service.quantity,
                notes=tooth_service.notes
            ))
            selected_teeth.add(tooth_id)
            total_cost += tooth_service.service_price * tooth_service.quantity
        
        plan_dict = {
            "id": plan.id,
            "patient_id": plan.patient_id,
            "doctor_id": plan.doctor_id,
            "diagnosis": plan.diagnosis,
            "notes": plan.notes,
            "created_at": plan.created_at,
            "updated_at": plan.updated_at,
            "services": services_list,  # –°–ø–∏—Å–æ–∫ ID —É—Å–ª—É–≥
            "teeth_services": teeth_services_dict,  # –°–ª–æ–≤–∞—Ä—å –∑—É–± -> [—É—Å–ª—É–≥–∏]
            "patient_name": patient.full_name if patient else None,
            "patient_phone": patient.phone if patient else None,
            "patient_iin": patient.iin if patient else None,
            "patient_birth_date": patient.birth_date.isoformat() if patient and patient.birth_date else None,
            "patient_allergies": patient.allergies if patient else None,
            "patient_chronic_diseases": patient.chronic_diseases if patient else None,
            "patient_contraindications": patient.contraindications if patient else None,
            "patient_special_notes": patient.special_notes if patient else None,
            "treatment_description": plan.notes,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º notes –∫–∞–∫ treatment_description
            "total_cost": total_cost,  # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            "selected_teeth": list(selected_teeth),  # –°–ø–∏—Å–æ–∫ –∑—É–±–æ–≤
            "status": "active"
        }
        result.append(plan_dict)
        print(f"üìã –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è ID {plan.id}: {len(services_list)} —É—Å–ª—É–≥, {len(selected_teeth)} –∑—É–±–æ–≤, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}")
    
    print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(result)} –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è")
    return result

@router.get("/{treatment_plan_id}", response_model=TreatmentPlanResponse)
async def get_treatment_plan(
    treatment_plan_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_medical_staff)
):
    treatment_plan = db.query(TreatmentPlan).filter(TreatmentPlan.id == treatment_plan_id).first()
    if treatment_plan is None:
        raise HTTPException(status_code=404, detail="Treatment plan not found")
    return treatment_plan


@router.put("/{treatment_plan_id}", response_model=TreatmentPlanResponse)
async def update_treatment_plan(
    treatment_plan_id: int,
    treatment_plan: TreatmentPlanUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_medical_staff)
):
    db_treatment_plan = db.query(TreatmentPlan).filter(TreatmentPlan.id == treatment_plan_id).first()
    if db_treatment_plan is None:
        raise HTTPException(status_code=404, detail="Treatment plan not found")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–ª–∞–Ω–∞
    for field, value in treatment_plan.dict(exclude_unset=True, exclude={'services'}).items():
        setattr(db_treatment_plan, field, value)
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —É—Å–ª—É–≥–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    if treatment_plan.services is not None:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É—Å–ª—É–≥–∏
        db.query(TreatmentPlanService).filter(
            TreatmentPlanService.treatment_plan_id == treatment_plan_id
        ).delete()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏
        for service_data in treatment_plan.services:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from ..models.service import Service
            service = db.query(Service).filter(Service.id == service_data.service_id).first()
            
            db_service = TreatmentPlanService(
                treatment_plan_id=treatment_plan_id,
                service_id=service_data.service_id,
                tooth_id=service_data.tooth_id or 0,
                service_name=service_data.service_name or (service.name if service else ""),
                service_price=service_data.service_price or (service.price if service else 0.0),
                quantity=service_data.quantity,
                notes=service_data.notes
            )
            db.add(db_service)
    
    db.commit()
    db.refresh(db_treatment_plan)
    return db_treatment_plan


@router.delete("/{treatment_plan_id}")
async def delete_treatment_plan(
    treatment_plan_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_medical_staff)
):
    treatment_plan = db.query(TreatmentPlan).filter(TreatmentPlan.id == treatment_plan_id).first()
    if treatment_plan is None:
        raise HTTPException(status_code=404, detail="Treatment plan not found")
    
    db.delete(treatment_plan)
    db.commit()
    return {"message": "Treatment plan deleted"}


@router.post("/{treatment_plan_id}/update-from-order")
async def update_treatment_plan_from_order(
    treatment_plan_id: int,
    order_services: List[dict],  # –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ –Ω–∞—Ä—è–¥–∞
    db: Session = Depends(get_db),
    current_user: User = Depends(require_medical_staff)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª—É–≥ –∏–∑ –Ω–∞—Ä—è–¥–∞.
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∑—É–±—ã –∏ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø–ª–∞–Ω–µ –ª–µ—á–µ–Ω–∏—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
    treatment_plan = db.query(TreatmentPlan).filter(TreatmentPlan.id == treatment_plan_id).first()
    if treatment_plan is None:
        raise HTTPException(status_code=404, detail="Treatment plan not found")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
    existing_services = db.query(TreatmentPlanService).filter(
        TreatmentPlanService.treatment_plan_id == treatment_plan_id
    ).all()
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∑—É–±-—É—Å–ª—É–≥–∞
    existing_combinations = set()
    for service in existing_services:
        existing_combinations.add((service.tooth_id, service.service_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ –Ω–∞—Ä—è–¥–∞
    new_services_added = 0
    for order_service in order_services:
        tooth_id = order_service.get('tooth_number', 0)
        service_id = order_service.get('service_id')
        service_name = order_service.get('service_name', '')
        service_price = order_service.get('service_price', 0.0)
        quantity = order_service.get('quantity', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∑—É–±-—É—Å–ª—É–≥–∞
        if (tooth_id, service_id) not in existing_combinations:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from ..models.service import Service
            service = db.query(Service).filter(Service.id == service_id).first()
            
            db_service = TreatmentPlanService(
                treatment_plan_id=treatment_plan_id,
                service_id=service_id,
                tooth_id=tooth_id,
                service_name=service_name or (service.name if service else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"),
                service_price=service_price if service_price is not None else (service.price if service else 0.0),
                quantity=quantity,
                notes=f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –Ω–∞—Ä—è–¥–∞"
            )
            db.add(db_service)
            new_services_added += 1
    
    db.commit()
    
    return {
        "message": f"Treatment plan updated successfully",
        "new_services_added": new_services_added,
        "treatment_plan_id": treatment_plan_id
    }


@router.get("/patient/{patient_id}/services", response_model=List[TreatmentPlanServiceResponse])
async def get_patient_treatment_plan_services(
    patient_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_medical_staff)
):
    """–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –∏–∑ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
    treatment_plan = db.query(TreatmentPlan).filter(
        TreatmentPlan.patient_id == patient_id,
        TreatmentPlan.clinic_id == current_user.clinic_id
    ).first()
    
    if not treatment_plan:
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
    services = db.query(TreatmentPlanService).filter(
        TreatmentPlanService.treatment_plan_id == treatment_plan.id
    ).all()
    
    result = []
    for service in services:
        result.append(TreatmentPlanServiceResponse(
            id=service.id,
            treatment_plan_id=service.treatment_plan_id,
            service_id=service.service_id,
            service_name=service.service_name,
            service_price=service.service_price,
            tooth_number=service.tooth_number,
            quantity=service.quantity,
            is_completed=service.is_completed,
            notes=service.notes
        ))
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(result)} —É—Å–ª—É–≥ –≤ –ø–ª–∞–Ω–µ –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_id}")
    return result
