#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
"""

import requests
import json
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://localhost:8001"
LOGIN_URL = f"{BASE_URL}/auth/login"
PATIENTS_URL = f"{BASE_URL}/patients/"
APPOINTMENTS_URL = f"{BASE_URL}/appointments/"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
LOGIN_DATA = {
    "username": "+77771234567",
    "password": "1234"
}

def login():
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    try:
        response = requests.post(LOGIN_URL, data=LOGIN_DATA)
        if response.status_code == 200:
            data = response.json()
            return data['access_token']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def get_patients(token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.get(PATIENTS_URL, headers=headers, params={"page": 1, "size": 50})
        if response.status_code == 200:
            data = response.json()
            return data.get('patients', [])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        return []

def create_appointment(token, appointment_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.post(APPOINTMENTS_URL, json=appointment_data, headers=headers)
        if response.status_code == 200 or response.status_code == 201:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return None

def main():
    print("üöÄ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é...")
    
    # –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
    token = login()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        return
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    patients = get_patients(token)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(patients)}")
    
    if not patients:
        print("‚ùå –ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π")
        return
    
    # –í—Ä–∞—á–∏ (ID 1, 2, 3)
    doctors = [
        {"id": 1, "full_name": "–î–æ–∫—Ç–æ—Ä –ê–π–¥–∞—Ä"},
        {"id": 2, "full_name": "–î–æ–∫—Ç–æ—Ä –ê—Å–µ–ª—å"},
        {"id": 3, "full_name": "–î–æ–∫—Ç–æ—Ä –î–∞–Ω–∏—è—Ä"}
    ]
    
    # –£—Å–ª—É–≥–∏
    services = [
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", "–ü–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤",
        "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞", "–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è", "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è",
        "–õ–µ—á–µ–Ω–∏–µ –¥–µ—Å–µ–Ω", "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (2025 –≥–æ–¥)
    appointments_created = 0
    today = datetime.now().replace(hour=9, minute=0, second=0, microsecond=0)
    
    print(f"üìÖ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∏–Ω–∞—è —Å: {today.strftime('%d.%m.%Y')}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    for doctor in doctors:
        print(f"\nüë®‚Äç‚öïÔ∏è –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è {doctor['full_name']} (ID: {doctor['id']})")
        
        for day_offset in range(7):
            appointment_date = today + timedelta(days=day_offset)
            
            # –°–æ–∑–¥–∞–µ–º 2-4 –∑–∞–ø–∏—Å–∏ –≤ –¥–µ–Ω—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞—á–∞
            num_appointments = random.randint(2, 4)
            
            for i in range(num_appointments):
                patient = random.choice(patients)
                service = random.choice(services)
                
                # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00 - 18:00)
                appointment_time = appointment_date.replace(
                    hour=random.randint(9, 18),
                    minute=random.choice([0, 30])
                )
                
                appointment_data = {
                    "patient_id": patient['id'],
                    "doctor_id": doctor['id'],
                    "registrar_id": 1,  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    "appointment_datetime": appointment_time.isoformat(),
                    "service_type": service,
                    "notes": f"–ó–∞–ø–∏—Å—å –Ω–∞ {service} –¥–ª—è {patient['full_name']}",
                    "status": "scheduled"
                }
                
                appointment = create_appointment(token, appointment_data)
                if appointment:
                    appointments_created += 1
                    print(f"  ‚úÖ {patient['full_name']} - {appointment_time.strftime('%d.%m.%Y %H:%M')}")
                else:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è {patient['full_name']}")
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {appointments_created}")
    print(f"üìÖ –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥: {today.strftime('%d.%m.%Y')} - {(today + timedelta(days=6)).strftime('%d.%m.%Y')}")
    print(f"üë®‚Äç‚öïÔ∏è –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π: {', '.join([d['full_name'] for d in doctors])}")

if __name__ == "__main__":
    main()

