#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://localhost:8001"
LOGIN_URL = f"{BASE_URL}/auth/login"
APPOINTMENTS_URL = f"{BASE_URL}/appointments/"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
LOGIN_DATA = {
    "username": "+77771234567",
    "password": "1234"
}

def login():
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    try:
        response = requests.post(LOGIN_URL, data=LOGIN_DATA)
        if response.status_code == 200:
            data = response.json()
            return data['access_token']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def main():
    print("üîç –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
    token = login()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        return
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
    doctors = [1, 2, 6]  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –¥–≤–∞ –≤—Ä–∞—á–∞
    total_appointments = 0
    
    for doctor_id in doctors:
        response = requests.get(APPOINTMENTS_URL, headers=headers, params={"doctor_id": doctor_id})
        appointments = response.json()
        
        print(f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á {doctor_id}: {len(appointments)} –∑–∞–ø–∏—Å–µ–π")
        total_appointments += len(appointments)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã –∑–∞–ø–∏—Å–µ–π
        if appointments:
            dates = []
            for apt in appointments[:5]:
                apt_date = apt['appointment_datetime'].split('T')[0]
                dates.append(apt_date)
            print(f"  üìÖ –ü–µ—Ä–≤—ã–µ 5 –¥–∞—Ç: {dates}")
    
    print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {total_appointments}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    today_2025 = datetime.now().replace(year=2025)
    start_of_week = today_2025 - timedelta(days=today_2025.weekday())
    end_of_week = start_of_week + timedelta(days=6)
    
    print(f"\nüìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {start_of_week.strftime('%d.%m.%Y')} - {end_of_week.strftime('%d.%m.%Y')}")
    
    current_week_count = 0
    for doctor_id in doctors:
        response = requests.get(APPOINTMENTS_URL, headers=headers, params={"doctor_id": doctor_id})
        appointments = response.json()
        
        current_week_appointments = []
        for apt in appointments:
            apt_date = datetime.fromisoformat(apt['appointment_datetime'].replace('Z', '+00:00'))
            if start_of_week.date() <= apt_date.date() <= end_of_week.date():
                current_week_appointments.append(apt)
        
        print(f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á {doctor_id} –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é: {len(current_week_appointments)} –∑–∞–ø–∏—Å–µ–π")
        current_week_count += len(current_week_appointments)
    
    print(f"\nüìÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é: {current_week_count}")

if __name__ == "__main__":
    main()

