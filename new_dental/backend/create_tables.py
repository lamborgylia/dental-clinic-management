#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
"""

import os
import sys
import time
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv('DATABASE_URL')
    
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Render
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        max_retries = 3
        for attempt in range(max_retries):
            try:
                print(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}/{max_retries}...")
                engine = create_engine(
                    database_url,
                    connect_args={
                        "sslmode": "require",
                        "sslcert": None,
                        "sslkey": None,
                        "sslrootcert": None
                    },
                    pool_pre_ping=True,
                    pool_recycle=300
                )
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                with engine.connect() as test_conn:
                    test_conn.execute(text("SELECT 1"))
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
                break
                
            except SQLAlchemyError as e:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                if attempt < max_retries - 1:
                    print("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(5)
                else:
                    raise e
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        with engine.connect() as conn:
            # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç
            conn.execute(text("COMMIT"))
            
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
            tables_sql = [
                # –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–ª–µ–π
                """
                CREATE TABLE IF NOT EXISTS roles (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(50) UNIQUE NOT NULL,
                    description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–Ω–∏–∫
                """
                CREATE TABLE IF NOT EXISTS clinics (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    description TEXT,
                    address TEXT,
                    contacts TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                """
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    full_name VARCHAR(255) NOT NULL,
                    phone VARCHAR(20) UNIQUE NOT NULL,
                    password_hash VARCHAR(255) NOT NULL,
                    role VARCHAR(50) NOT NULL,
                    clinic_id INTEGER REFERENCES clinics(id),
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
                """
                CREATE TABLE IF NOT EXISTS patients (
                    id SERIAL PRIMARY KEY,
                    full_name VARCHAR(255) NOT NULL,
                    phone VARCHAR(20) UNIQUE NOT NULL,
                    iin VARCHAR(12) UNIQUE NOT NULL,
                    birth_date DATE,
                    allergies TEXT,
                    chronic_diseases TEXT,
                    contraindications TEXT,
                    special_notes TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥
                """
                CREATE TABLE IF NOT EXISTS services (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    price DECIMAL(10,2) NOT NULL,
                    description TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º
                """
                CREATE TABLE IF NOT EXISTS appointments (
                    id SERIAL PRIMARY KEY,
                    patient_id INTEGER REFERENCES patients(id),
                    doctor_id INTEGER REFERENCES users(id),
                    registrar_id INTEGER REFERENCES users(id),
                    appointment_datetime TIMESTAMP NOT NULL,
                    service_type VARCHAR(255),
                    notes TEXT,
                    status VARCHAR(50) DEFAULT 'scheduled',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è
                """
                CREATE TABLE IF NOT EXISTS treatment_plans (
                    id SERIAL PRIMARY KEY,
                    patient_id INTEGER REFERENCES patients(id),
                    doctor_id INTEGER REFERENCES users(id),
                    diagnosis TEXT,
                    notes TEXT,
                    status VARCHAR(50) DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥ –≤ –ø–ª–∞–Ω–∞—Ö –ª–µ—á–µ–Ω–∏—è
                """
                CREATE TABLE IF NOT EXISTS treatment_plan_services (
                    id SERIAL PRIMARY KEY,
                    treatment_plan_id INTEGER REFERENCES treatment_plans(id),
                    service_id INTEGER REFERENCES services(id),
                    tooth_id INTEGER,
                    quantity INTEGER DEFAULT 1,
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Ä—è–¥–æ–≤
                """
                CREATE TABLE IF NOT EXISTS treatment_orders (
                    id SERIAL PRIMARY KEY,
                    patient_id INTEGER REFERENCES patients(id),
                    doctor_id INTEGER REFERENCES users(id),
                    appointment_id INTEGER REFERENCES appointments(id),
                    visit_date TIMESTAMP,
                    total_amount DECIMAL(10,2),
                    status VARCHAR(50) DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥ –≤ –Ω–∞—Ä—è–¥–∞—Ö
                """
                CREATE TABLE IF NOT EXISTS treatment_order_services (
                    id SERIAL PRIMARY KEY,
                    treatment_order_id INTEGER REFERENCES treatment_orders(id),
                    service_id INTEGER REFERENCES services(id),
                    tooth_number INTEGER,
                    quantity INTEGER DEFAULT 1,
                    notes TEXT,
                    is_completed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                """,
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –∫–ª–∏–Ω–∏–∫ –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
                """
                CREATE TABLE IF NOT EXISTS clinic_patients (
                    id SERIAL PRIMARY KEY,
                    clinic_id INTEGER REFERENCES clinics(id),
                    patient_id INTEGER REFERENCES patients(id),
                    first_visit_date TIMESTAMP,
                    last_visit_date TIMESTAMP,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(clinic_id, patient_id)
                );
                """
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            for i, sql in enumerate(tables_sql, 1):
                try:
                    conn.execute(text(sql))
                    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i} —Å–æ–∑–¥–∞–Ω–∞")
                except SQLAlchemyError as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {i}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            indexes_sql = [
                "CREATE INDEX IF NOT EXISTS idx_users_phone ON users(phone);",
                "CREATE INDEX IF NOT EXISTS idx_users_clinic_id ON users(clinic_id);",
                "CREATE INDEX IF NOT EXISTS idx_patients_phone ON patients(phone);",
                "CREATE INDEX IF NOT EXISTS idx_patients_iin ON patients(iin);",
                "CREATE INDEX IF NOT EXISTS idx_appointments_patient_id ON appointments(patient_id);",
                "CREATE INDEX IF NOT EXISTS idx_appointments_doctor_id ON appointments(doctor_id);",
                "CREATE INDEX IF NOT EXISTS idx_appointments_datetime ON appointments(appointment_datetime);",
                "CREATE INDEX IF NOT EXISTS idx_treatment_plans_patient_id ON treatment_plans(patient_id);",
                "CREATE INDEX IF NOT EXISTS idx_treatment_orders_patient_id ON treatment_orders(patient_id);",
                "CREATE INDEX IF NOT EXISTS idx_clinic_patients_clinic_id ON clinic_patients(clinic_id);",
                "CREATE INDEX IF NOT EXISTS idx_clinic_patients_patient_id ON clinic_patients(patient_id);"
            ]
            
            print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
            for sql in indexes_sql:
                try:
                    conn.execute(text(sql))
                except SQLAlchemyError as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
            
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
            
    except SQLAlchemyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    success = create_tables()
    if success:
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        sys.exit(0)
    else:
        print("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        sys.exit(1)
