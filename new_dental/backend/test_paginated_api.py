#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API –∑–∞–ø–∏—Å–µ–π
"""

import requests
import json
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://localhost:8001"
LOGIN_URL = f"{BASE_URL}/auth/login"
APPOINTMENTS_URL = f"{BASE_URL}/appointments/"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
LOGIN_DATA = {
    "username": "+77771234567",
    "password": "1234"
}

def login():
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    try:
        response = requests.post(LOGIN_URL, data=LOGIN_DATA)
        if response.status_code == 200:
            data = response.json()
            return data['access_token']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def test_paginated_api(token, doctor_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API"""
    headers = {"Authorization": f"Bearer {token}"}
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è –≤—Ä–∞—á–∞ {doctor_id}...")
    
    all_appointments = []
    page = 1
    page_size = 100
    
    while True:
        print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}...")
        response = requests.get(APPOINTMENTS_URL, headers=headers, params={
            "doctor_id": doctor_id,
            "page": page,
            "size": page_size
        })
        
        if response.status_code != 200:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {response.status_code}")
            break
        
        appointments = response.json()
        print(f"  üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(appointments)}")
        
        if not appointments or len(appointments) == 0:
            print(f"  ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –ø—É—Å—Ç–∞—è, –∑–∞–≤–µ—Ä—à–∞–µ–º")
            break
        
        all_appointments.extend(appointments)
        
        if len(appointments) < page_size:
            print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ {page_size} –∑–∞–ø–∏—Å–µ–π, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            break
        
        page += 1
    
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—Ä–∞—á–∞ {doctor_id}: {len(all_appointments)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    today_2025 = datetime.now().replace(year=2025)
    start_of_week = today_2025 - timedelta(days=today_2025.weekday())
    end_of_week = start_of_week + timedelta(days=6)
    
    current_week_appointments = []
    for apt in all_appointments:
        apt_date = datetime.fromisoformat(apt['appointment_datetime'].replace('Z', '+00:00'))
        if start_of_week.date() <= apt_date.date() <= end_of_week.date():
            current_week_appointments.append(apt)
    
    print(f"üìÖ –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é: {len(current_week_appointments)}")
    
    return len(all_appointments), len(current_week_appointments)

def main():
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∑–∞–ø–∏—Å–µ–π...")
    
    # –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
    token = login()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        return
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
    doctors = [1, 2, 6]
    total_appointments = 0
    total_current_week = 0
    
    for doctor_id in doctors:
        appointments_count, current_week_count = test_paginated_api(token, doctor_id)
        total_appointments += appointments_count
        total_current_week += current_week_count
        print()
    
    print(f"üéØ –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_appointments}")
    print(f"üéØ –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é: {total_current_week}")

if __name__ == "__main__":
    main()

