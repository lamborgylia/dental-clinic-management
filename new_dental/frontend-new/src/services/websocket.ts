import { api } from './api';

export interface WebSocketMessage {
  type: 'appointment_created' | 'appointment_updated' | 'pong';
  data?: any;
  message?: string;
}

export interface AppointmentData {
  id: number;
  patient_id: number;
  doctor_id: number;
  appointment_datetime: string;
  status: string;
  service_type: string;
  notes: string;
  patient_name: string;
  patient_phone: string;
  created_at?: string;
  updated_at?: string;
}

class WebSocketService {
  private ws: WebSocket | null = null;
  private doctorId: number | null = null;
  private userId: number | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private isConnecting = false;
  private messageHandlers: Map<string, (data: any) => void> = new Map();

  constructor() {
    this.setupMessageHandlers();
  }

  private setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    this.messageHandlers.set('appointment_created', (data: AppointmentData) => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', data);
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      this.onAppointmentCreated?.(data);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    this.messageHandlers.set('appointment_updated', (data: AppointmentData) => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', data);
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      this.onAppointmentUpdated?.(data);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è pong —Å–æ–æ–±—â–µ–Ω–∏–π
    this.messageHandlers.set('pong', (data: any) => {
      console.log('üì° WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
    });
  }

  // Callbacks –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
  public onAppointmentCreated: ((data: AppointmentData) => void) | null = null;
  public onAppointmentUpdated: ((data: AppointmentData) => void) | null = null;

  async connect(doctorId: number, userId?: number) {
    if (this.isConnecting || this.ws?.readyState === WebSocket.OPEN) {
      console.log('üîå WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è');
      return;
    }

    this.isConnecting = true;
    this.doctorId = doctorId;
    this.userId = userId || null;

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è WebSocket
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const host = window.location.hostname;
      const port = window.location.hostname === 'localhost' ? ':8001' : '';
      const wsUrl = `${protocol}//${host}${port}/ws/appointments/${doctorId}`;

      console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);

      this.ws = new WebSocket(wsUrl);

      this.ws.onopen = () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Ä–∞—á–∞', doctorId);
        this.isConnecting = false;
        this.reconnectAttempts = 0;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        this.sendAuthToken(token);
      };

      this.ws.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);
          console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

          const handler = this.messageHandlers.get(message.type);
          if (handler) {
            handler(message.data);
          } else {
            console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };

      this.ws.onclose = (event) => {
        console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
        this.isConnecting = false;
        this.ws = null;

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
          this.scheduleReconnect();
        } else {
          console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        }
      };

      this.ws.onerror = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
        this.isConnecting = false;
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      this.isConnecting = false;
    }
  }

  private sendAuthToken(token: string) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.ws.send(JSON.stringify({
        type: 'auth',
        token: token
      }));
    }
  }

  private scheduleReconnect() {
    this.reconnectAttempts++;
    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
    
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);
    
    setTimeout(() => {
      if (this.doctorId) {
        this.connect(this.doctorId, this.userId || undefined);
      }
    }, delay);
  }

  disconnect() {
    if (this.ws) {
      console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º WebSocket');
      this.ws.close();
      this.ws = null;
    }
    this.doctorId = null;
    this.userId = null;
    this.reconnectAttempts = 0;
  }

  sendPing() {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify({
        type: 'ping',
        timestamp: Date.now()
      }));
    }
  }

  isConnected(): boolean {
    return this.ws?.readyState === WebSocket.OPEN;
  }

  getConnectionState(): string {
    if (!this.ws) return 'disconnected';
    
    switch (this.ws.readyState) {
      case WebSocket.CONNECTING:
        return 'connecting';
      case WebSocket.OPEN:
        return 'connected';
      case WebSocket.CLOSING:
        return 'closing';
      case WebSocket.CLOSED:
        return 'closed';
      default:
        return 'unknown';
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const websocketService = new WebSocketService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default websocketService;
