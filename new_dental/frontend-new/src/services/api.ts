import axios from 'axios';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const getBaseURL = () => {
  const { protocol, hostname } = window.location;
  console.log('üîç Hostname:', hostname);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (Render)
  if (hostname.includes('onrender.com')) {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞
    const backendURL = "https://dental-clinic-management-bzsn.onrender.com";
    console.log('üåê Using production backend URL:', backendURL);
    return backendURL;
  } else {
    // –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8001
    const backendURL = `${protocol}//${hostname}:8001`;
    console.log('üåê Using local backend URL:', backendURL);
    return backendURL;
  }
};

const baseURL = getBaseURL();
console.log('üöÄ API Base URL:', baseURL);

const api = axios.create({
  baseURL: baseURL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
const getToken = () => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º localStorage
    let token = localStorage.getItem('access_token');
    if (token) {
      console.log('üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ localStorage');
      return token;
    }
    
    // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º sessionStorage
    token = sessionStorage.getItem('access_token');
    if (token) {
      console.log('üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ sessionStorage');
      return token;
    }
    
    console.log('üîë –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ localStorage, –Ω–∏ –≤ sessionStorage');
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É:', error);
    return null;
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
api.interceptors.request.use(
  (config) => {
    const token = getToken();
    console.log('üîë –¢–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ:', token ? '–ï–°–¢–¨' : '–ù–ï–¢');
    console.log('üì± User Agent:', navigator.userAgent);
    console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', config.url);
    
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return Promise.reject(error);
  }
);

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
  (response) => {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', response.status, response.config.url);
    return response;
  },
  (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', error.response?.status, error.config?.url);
    console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
    
    if (error.response?.status === 401) {
      console.log('üö™ 401 –æ—à–∏–±–∫–∞ - –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º');
      try {
        localStorage.removeItem('access_token');
        localStorage.removeItem('user');
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', e);
      }
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;
