import { useState, useEffect, useCallback, forwardRef, useImperativeHandle } from 'react';

interface Service {
  id: number;
  name: string;
  price: number;
  category: string;
}

interface ToothService {
  toothId: number;
  services: Service[];
  serviceStatuses?: Record<number, string>; // {service_id: "pending"/"completed"}
}

interface TeethMapProps {
  services: Service[];
  onToothServicesChange: (toothServices: ToothService[]) => void;
  selectedTeeth?: number[];
  onToothSelect?: (toothId: number) => void;
  teethServices?: Record<number, number[]>;
  toothServices?: ToothService[]; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ ToothService[]
  onAddServiceToTooth?: (toothId: number, serviceId: number) => void;
  onRemoveServiceFromTooth?: (toothId: number, serviceId: number) => void;
  onClearSelection?: () => void;
  // –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑—É–±–æ–≤
  treatedTeeth?: number[]; // –ó—É–±—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–ª–µ—á–µ–Ω—ã (–∑–µ–ª–µ–Ω—ã–µ)
  treatmentTeeth?: number[]; // –ó—É–±—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ª–µ—á–µ–Ω–∏–µ (–∫—Ä–∞—Å–Ω—ã–µ)
  // –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏
  onUpdateServiceStatus?: (toothId: number, serviceId: number, status: string) => void;
}

const TeethMap = forwardRef<any, TeethMapProps>((props, ref) => {
  const { 
    services, 
    onToothServicesChange,
    selectedTeeth: externalSelectedTeeth,
    onToothSelect,
    onAddServiceToTooth,
    onClearSelection,
    treatedTeeth = [],
    treatmentTeeth = [],
    toothServices: externalToothServices = [],
    onUpdateServiceStatus
  } = props;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º onUpdateServiceStatus –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ª–∏–Ω—Ç–µ—Ä–∞
  console.log('üîÑ TeethMap: onUpdateServiceStatus –¥–æ—Å—Ç—É–ø–µ–Ω:', !!onUpdateServiceStatus);
  const [selectedTeeth, setSelectedTeeth] = useState<number[]>(externalSelectedTeeth || []);
  const [toothServices, setToothServices] = useState<ToothService[]>([]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≤–Ω–µ—à–Ω–∏–º–∏ selectedTeeth
  useEffect(() => {
    if (externalSelectedTeeth) {
      setSelectedTeeth(externalSelectedTeeth);
    } else {
      // –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–µ selectedTeeth –ø—É—Å—Ç—ã–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤—ã–±–æ—Ä
      setSelectedTeeth([]);
    }
  }, [externalSelectedTeeth]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≤–Ω–µ—à–Ω–∏–º–∏ toothServices
  useEffect(() => {
    if (externalToothServices && externalToothServices.length > 0) {
      console.log('ü¶∑ TeethMap –ø–æ–ª—É—á–∏–ª –≤–Ω–µ—à–Ω–∏–µ toothServices:', externalToothServices);
      setToothServices(externalToothServices);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∑—É–±–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      setTimeout(() => {
        updateAllTeethColors();
      }, 100);
    } else {
      console.log('ü¶∑ TeethMap: –≤–Ω–µ—à–Ω–∏–µ toothServices –ø—É—Å—Ç—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      setToothServices([]);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∑—É–±–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      setTimeout(() => {
        updateAllTeethColors();
      }, 100);
    }
  }, [externalToothServices]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    console.log('ü¶∑ TeethMap –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–µ –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–æ–ø—Å—ã:');
    console.log('  - externalSelectedTeeth:', externalSelectedTeeth);
    console.log('  - treatedTeeth:', treatedTeeth);
    console.log('  - treatmentTeeth:', treatmentTeeth);
    console.log('  - externalToothServices:', externalToothServices);
    console.log('  - services:', services);
    console.log('ü¶∑ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–£–ë–ê–•:');
    console.log('  - –ó—É–±—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏ (treatmentTeeth):', treatmentTeeth);
    console.log('  - –í—ã–ª–µ—á–µ–Ω–Ω—ã–µ –∑—É–±—ã (treatedTeeth):', treatedTeeth);
    console.log('  - –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã (externalSelectedTeeth):', externalSelectedTeeth);
    console.log('  - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ toothServices:', toothServices);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–æ–ø—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if (externalSelectedTeeth) {
      setSelectedTeeth(externalSelectedTeeth);
    } else {
      setSelectedTeeth([]);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∑—É–±–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—Å–æ–≤
    setTimeout(() => {
      updateAllTeethColors();
    }, 100);
  }, [externalSelectedTeeth, treatedTeeth, treatmentTeeth, externalToothServices, services]);

  const updateAllTeethColors = useCallback(() => {
    console.log('ü¶∑ updateAllTeethColors –≤—ã–∑–≤–∞–Ω–∞');
    console.log('ü¶∑ –¢–µ–∫—É—â–∏–µ toothServices:', toothServices);
    console.log('ü¶∑ –¢–µ–∫—É—â–∏–µ selectedTeeth:', selectedTeeth);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–µ—Ö –∑—É–±–æ–≤
    for (let toothId = 11; toothId <= 85; toothId++) {
      updateToothColor(toothId);
    }
  }, [selectedTeeth, treatedTeeth, treatmentTeeth]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
  useEffect(() => {
    console.log('ü¶∑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∑—É–±–æ–≤:');
    console.log('  - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã:', selectedTeeth);
    console.log('  - –í—ã–ª–µ—á–µ–Ω–Ω—ã–µ –∑—É–±—ã:', treatedTeeth);
    console.log('  - –ó—É–±—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –ª–µ—á–µ–Ω–∏–µ–º:', treatmentTeeth);
    updateAllTeethColors();
  }, [selectedTeeth, treatedTeeth, treatmentTeeth, updateAllTeethColors]);

  const updateToothColor = (toothId: number) => {
    const toothElement = document.getElementById(`tooth-${toothId}`);
    if (!toothElement) {
      console.log(`ü¶∑ –≠–ª–µ–º–µ–Ω—Ç –∑—É–±–∞ ${toothId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM`);
      return;
    }

    let color = '#e5e7eb'; // –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let status = '–æ–±—ã—á–Ω—ã–π';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏ –Ω–∞ –∑—É–±–µ
    const toothServiceData = toothServices.find(ts => ts.toothId === toothId);
    
    if (toothServiceData && toothServiceData.services.length > 0) {
      // –ï—Å–ª–∏ –Ω–∞ –∑—É–±–µ –µ—Å—Ç—å —É—Å–ª—É–≥–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å—ã
      const serviceStatuses = toothServiceData.serviceStatuses || {};
      const allServicesCompleted = toothServiceData.services.every(service => 
        serviceStatuses[service.id] === 'completed'
      );
      
      if (allServicesCompleted) {
        color = '#10b981'; // –ó–µ–ª–µ–Ω—ã–π - –≤—Å–µ —É—Å–ª—É–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        status = '–≤—Å–µ —É—Å–ª—É–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã';
      } else {
        color = '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π - –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        status = '–µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏';
      }
    } else if (selectedTeeth.includes(toothId)) {
      color = '#3b82f6'; // –°–∏–Ω–∏–π - –≤—ã–±—Ä–∞–Ω
      status = '–≤—ã–±—Ä–∞–Ω';
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑—É–±—ã —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    if (status !== '–æ–±—ã—á–Ω—ã–π') {
      console.log(`ü¶∑ –ó—É–± ${toothId}: ${status} (${color})`);
      console.log(`ü¶∑   - toothServiceData:`, toothServiceData);
      console.log(`ü¶∑   - selectedTeeth:`, selectedTeeth);
    }

    toothElement.style.fill = color;
    toothElement.style.stroke = '#374151';
    toothElement.style.strokeWidth = '1';
  };

  const handleToothClick = (toothId: number) => {
    if (toothId <= 0) return;

    console.log('ü¶∑ –ö–ª–∏–∫ –ø–æ –∑—É–±—É:', toothId);
    console.log('ü¶∑ –¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã:', selectedTeeth);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª—É–≥–∏ –Ω–∞ —ç—Ç–æ–º –∑—É–±–µ
    const toothServiceData = toothServices.find(ts => ts.toothId === toothId);
    
    if (toothServiceData && toothServiceData.services.length > 0) {
      // –ï—Å–ª–∏ –Ω–∞ –∑—É–±–µ –µ—Å—Ç—å —É—Å–ª—É–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑—É–±–∞–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥
      console.log('ü¶∑ –ù–∞ –∑—É–±–µ –µ—Å—Ç—å —É—Å–ª—É–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º:', toothServiceData.services);
      
      let newSelectedTeeth: number[];
      if (selectedTeeth.includes(toothId)) {
        // –£–±–∏—Ä–∞–µ–º –∑—É–± –∏–∑ –≤—ã–±–æ—Ä–∞
        newSelectedTeeth = selectedTeeth.filter(id => id !== toothId);
        console.log('ü¶∑ –£–±–∏—Ä–∞–µ–º –∑—É–± –∏–∑ –≤—ã–±–æ—Ä–∞. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:', newSelectedTeeth);
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑—É–± –∫ –≤—ã–±–æ—Ä—É
        newSelectedTeeth = [...selectedTeeth, toothId];
        console.log('ü¶∑ –î–æ–±–∞–≤–ª—è–µ–º –∑—É–± –∫ –≤—ã–±–æ—Ä—É. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:', newSelectedTeeth);
      }
      
      setSelectedTeeth(newSelectedTeeth);
      
      // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –∑—É–±–æ–≤
      if (onToothSelect) {
        onToothSelect(toothId);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞
      updateAllTeethColors();
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞ –∑—É–±–µ –Ω–µ—Ç —É—Å–ª—É–≥, —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    let newSelectedTeeth: number[];
    if (selectedTeeth.includes(toothId)) {
      // –£–±–∏—Ä–∞–µ–º –∑—É–± –∏–∑ –≤—ã–±–æ—Ä–∞
      newSelectedTeeth = selectedTeeth.filter(id => id !== toothId);
      console.log('ü¶∑ –£–±–∏—Ä–∞–µ–º –∑—É–± –∏–∑ –≤—ã–±–æ—Ä–∞. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:', newSelectedTeeth);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑—É–± –∫ –≤—ã–±–æ—Ä—É
      newSelectedTeeth = [...selectedTeeth, toothId];
      console.log('ü¶∑ –î–æ–±–∞–≤–ª—è–µ–º –∑—É–± –∫ –≤—ã–±–æ—Ä—É. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:', newSelectedTeeth);
    }
    
    setSelectedTeeth(newSelectedTeeth);
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –∑—É–±–æ–≤
    if (onToothSelect) {
      onToothSelect(toothId);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞
    updateAllTeethColors();
  };

  const handleServiceSelect = (service: Service) => {
    if (selectedTeeth.length === 0) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑—É–±');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –∫–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑—É–±–∞–º
    let updatedToothServices = [...toothServices];
    
    selectedTeeth.forEach(toothId => {
      const existingToothService = updatedToothServices.find(ts => ts.toothId === toothId);
      
      if (existingToothService) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —É—Å–ª—É–≥–∞
        if (!existingToothService.services.some(s => s.id === service.id)) {
          // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑—É–±—É
          updatedToothServices = updatedToothServices.map(ts => 
            ts.toothId === toothId 
              ? { ...ts, services: [...ts.services, service] }
              : ts
          );
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∑—É–±–∞
        const newToothService: ToothService = {
          toothId,
          services: [service]
        };
        updatedToothServices.push(newToothService);
      }

      // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      if (onAddServiceToTooth) {
        onAddServiceToTooth(toothId, service.id);
      }
    });
    
    setToothServices(updatedToothServices);
    onToothServicesChange(updatedToothServices);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑—É–±–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
    setSelectedTeeth([]);
    updateAllTeethColors();
  };

  const handleRemoveService = (toothId: number, serviceId: number) => {
    const updatedToothServices = toothServices.map(ts => 
      ts.toothId === toothId 
        ? { ...ts, services: ts.services.filter(s => s.id !== serviceId) }
        : ts
    ).filter(ts => ts.services.length > 0);
    
    setToothServices(updatedToothServices);
    onToothServicesChange(updatedToothServices);
  };

  const handleClearSelection = () => {
    setSelectedTeeth([]);
    if (onClearSelection) {
      onClearSelection();
    }
    updateAllTeethColors();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
  const resetSelection = () => {
    console.log('ü¶∑ –û—á–∏—â–µ–Ω –≤—ã–±–æ—Ä –∑—É–±–æ–≤');
    console.log('ü¶∑ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑—É–±—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏!');
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã, –ù–ï –∑—É–±—ã —Å —É—Å–ª—É–≥–∞–º–∏
    setSelectedTeeth([]);
    updateAllTeethColors();
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞
    if (onClearSelection) {
      onClearSelection();
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ ref
  useImperativeHandle(ref, () => ({
    resetSelection
  }));

  // –°–æ–∑–¥–∞–µ–º SVG –∫–∞—Ä—Ç—É –∑—É–±–æ–≤
  const createTeethSVG = () => {
    
    // –ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –∑—É–±–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    // –í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ): 18, 17, 16, 15, 14, 13, 12, 11 | 21, 22, 23, 24, 25, 26, 27, 28
    const upperTeeth = [
      { id: 18, x: 40, y: 20, width: 20, height: 35, label: '18', type: 'molar' },
      { id: 17, x: 65, y: 20, width: 20, height: 35, label: '17', type: 'molar' },
      { id: 16, x: 90, y: 20, width: 20, height: 35, label: '16', type: 'molar' },
      { id: 15, x: 115, y: 20, width: 18, height: 35, label: '15', type: 'premolar' },
      { id: 14, x: 138, y: 20, width: 18, height: 35, label: '14', type: 'premolar' },
      { id: 13, x: 161, y: 20, width: 16, height: 35, label: '13', type: 'canine' },
      { id: 12, x: 182, y: 20, width: 14, height: 35, label: '12', type: 'incisor' },
      { id: 11, x: 201, y: 20, width: 14, height: 35, label: '11', type: 'incisor' },
      { id: 21, x: 220, y: 20, width: 14, height: 35, label: '21', type: 'incisor' },
      { id: 22, x: 239, y: 20, width: 14, height: 35, label: '22', type: 'incisor' },
      { id: 23, x: 258, y: 20, width: 16, height: 35, label: '23', type: 'canine' },
      { id: 24, x: 279, y: 20, width: 18, height: 35, label: '24', type: 'premolar' },
      { id: 25, x: 302, y: 20, width: 18, height: 35, label: '25', type: 'premolar' },
      { id: 26, x: 325, y: 20, width: 20, height: 35, label: '26', type: 'molar' },
      { id: 27, x: 350, y: 20, width: 20, height: 35, label: '27', type: 'molar' },
      { id: 28, x: 375, y: 20, width: 20, height: 35, label: '28', type: 'molar' },
    ];

    // –ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ): 48, 47, 46, 45, 44, 43, 42, 41 | 31, 32, 33, 34, 35, 36, 37, 38
    const lowerTeeth = [
      { id: 48, x: 40, y: 85, width: 20, height: 35, label: '48', type: 'molar' },
      { id: 47, x: 65, y: 85, width: 20, height: 35, label: '47', type: 'molar' },
      { id: 46, x: 90, y: 85, width: 20, height: 35, label: '46', type: 'molar' },
      { id: 45, x: 115, y: 85, width: 18, height: 35, label: '45', type: 'premolar' },
      { id: 44, x: 138, y: 85, width: 18, height: 35, label: '44', type: 'premolar' },
      { id: 43, x: 161, y: 85, width: 16, height: 35, label: '43', type: 'canine' },
      { id: 42, x: 182, y: 85, width: 14, height: 35, label: '42', type: 'incisor' },
      { id: 41, x: 201, y: 85, width: 14, height: 35, label: '41', type: 'incisor' },
      { id: 31, x: 220, y: 85, width: 14, height: 35, label: '31', type: 'incisor' },
      { id: 32, x: 239, y: 85, width: 14, height: 35, label: '32', type: 'incisor' },
      { id: 33, x: 258, y: 85, width: 16, height: 35, label: '33', type: 'canine' },
      { id: 34, x: 279, y: 85, width: 18, height: 35, label: '34', type: 'premolar' },
      { id: 35, x: 302, y: 85, width: 18, height: 35, label: '35', type: 'premolar' },
      { id: 36, x: 325, y: 85, width: 20, height: 35, label: '36', type: 'molar' },
      { id: 37, x: 350, y: 85, width: 20, height: 35, label: '37', type: 'molar' },
      { id: 38, x: 375, y: 85, width: 20, height: 35, label: '38', type: 'molar' },
    ];

    const allTeeth = [...upperTeeth, ...lowerTeeth];

    return (
      <svg 
        width="100%" 
        height="140" 
        viewBox="0 0 420 140" 
        style={{ 
          maxWidth: '420px',
          border: '2px solid #e5e7eb', 
          borderRadius: '12px',
          backgroundColor: '#fafafa',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
        }}
      >
        {/* –§–æ–Ω */}
        <rect x="0" y="0" width="420" height="140" fill="#fafafa" rx="12" />
        
        {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */}
        <text x="210" y="15" textAnchor="middle" fontSize="12" fill="#1f2937" fontWeight="600">
          –í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å
        </text>
        <text x="210" y="135" textAnchor="middle" fontSize="12" fill="#1f2937" fontWeight="600">
          –ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å
        </text>
        
        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è */}
        <line x1="20" y1="70" x2="400" y2="70" stroke="#d1d5db" strokeWidth="1" strokeDasharray="3,3" />
        
        {/* –ó—É–±—ã */}
        {allTeeth.map(tooth => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É –∑—É–±–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
          const getToothShape = (tooth: any) => {
            const { x, y, width, height, type } = tooth;
            
            if (type === 'molar') {
              // –ú–æ–ª—è—Ä—ã - –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–µ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ
              return (
                <rect
                  x={x}
                  y={y}
                  width={width}
                  height={height}
                  rx="4"
                  ry="4"
                />
              );
            } else if (type === 'premolar') {
              // –ü—Ä–µ–º–æ–ª—è—Ä—ã - —Å—Ä–µ–¥–Ω–∏–µ
              return (
                <rect
                  x={x}
                  y={y}
                  width={width}
                  height={height}
                  rx="3"
                  ry="3"
                />
              );
            } else if (type === 'canine') {
              // –ö–ª—ã–∫–∏ - –∑–∞–æ—Å—Ç—Ä–µ–Ω–Ω—ã–µ
              return (
                <path
                  d={`M${x + width/2} ${y} L${x + width} ${y + height/3} L${x + width} ${y + height} L${x} ${y + height} L${x} ${y + height/3} Z`}
                />
              );
            } else {
              // –†–µ–∑—Ü—ã - —É–∑–∫–∏–µ –∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ
              return (
                <rect
                  x={x}
                  y={y}
                  width={width}
                  height={height}
                  rx="2"
                  ry="2"
                />
              );
            }
          };

          return (
            <g key={tooth.id}>
              {getToothShape(tooth)}
              <rect
                id={`tooth-${tooth.id}`}
                x={tooth.x}
                y={tooth.y}
                width={tooth.width}
                height={tooth.height}
                rx={tooth.type === 'molar' ? 4 : tooth.type === 'premolar' ? 3 : tooth.type === 'canine' ? 0 : 2}
                ry={tooth.type === 'molar' ? 4 : tooth.type === 'premolar' ? 3 : tooth.type === 'canine' ? 0 : 2}
                fill="#e5e7eb"
                stroke="#374151"
                strokeWidth="1.5"
                style={{ cursor: 'pointer' }}
                onClick={() => {
                  console.log('ü¶∑ –ü–†–Ø–ú–û–ô –ö–õ–ò–ö –ü–û –ó–£–ë–£:', tooth.id);
                  console.log('ü¶∑ –≠–ª–µ–º–µ–Ω—Ç –∑—É–±–∞:', document.getElementById(`tooth-${tooth.id}`));
                  handleToothClick(tooth.id);
                }}
              />
              <text
                x={tooth.x + tooth.width / 2}
                y={tooth.y + tooth.height / 2 + 3}
                textAnchor="middle"
                fontSize="9"
                fill="#374151"
                fontWeight="600"
                style={{ pointerEvents: 'none' }}
              >
                {tooth.label}
              </text>
            </g>
          );
        })}
      </svg>
    );
  };

  return (
    <div style={{ 
      padding: '1rem', 
      backgroundColor: 'white', 
      borderRadius: '8px', 
      border: '1px solid #e5e7eb',
      maxWidth: '100%',
      overflow: 'hidden'
    }}>

      <h3 style={{ 
        marginBottom: '1rem', 
        color: '#374151',
        fontSize: 'clamp(1rem, 4vw, 1.25rem)',
        textAlign: 'center'
      }}>–ö–∞—Ä—Ç–∞ –∑—É–±–æ–≤</h3>
      
      {/* SVG –∫–∞—Ä—Ç–∞ –∑—É–±–æ–≤ */}
      <div style={{ 
        marginBottom: '1rem', 
        display: 'flex', 
        justifyContent: 'center',
        width: '100%',
        overflow: 'hidden'
      }}>
        {createTeethSVG()}
      </div>

      {/* –õ–µ–≥–µ–Ω–¥–∞ –ø–æ–¥ –∫–∞—Ä—Ç–æ–π */}
      <div style={{ 
        marginBottom: '1rem', 
        padding: '1rem', 
        backgroundColor: '#f8fafc', 
        borderRadius: '8px',
        border: '1px solid #e2e8f0'
      }}>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          gap: '2rem',
          flexWrap: 'wrap'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            <div style={{ 
              width: '16px', 
              height: '16px', 
              borderRadius: '3px', 
              backgroundColor: '#10b981', 
              border: '1px solid #059669' 
            }} />
            <span style={{ fontSize: '0.875rem', color: '#374151', fontWeight: '500' }}>–í—ã–ª–µ—á–µ–Ω</span>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            <div style={{ 
              width: '16px', 
              height: '16px', 
              borderRadius: '3px', 
              backgroundColor: '#ef4444', 
              border: '1px solid #dc2626' 
            }} />
            <span style={{ fontSize: '0.875rem', color: '#374151', fontWeight: '500' }}>–õ–µ—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</span>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            <div style={{ 
              width: '16px', 
              height: '16px', 
              borderRadius: '3px', 
              backgroundColor: '#3b82f6', 
              border: '1px solid #2563eb' 
            }} />
            <span style={{ fontSize: '0.875rem', color: '#374151', fontWeight: '500' }}>–í—ã–±—Ä–∞–Ω</span>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            <div style={{ 
              width: '16px', 
              height: '16px', 
              borderRadius: '3px', 
              backgroundColor: '#e5e7eb', 
              border: '1px solid #9ca3af' 
            }} />
            <span style={{ fontSize: '0.875rem', color: '#374151', fontWeight: '500' }}>–û–±—ã—á–Ω—ã–π</span>
          </div>
        </div>
        
        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        <div style={{ 
          textAlign: 'center', 
          marginTop: '0.75rem', 
          fontSize: '0.875rem', 
          color: '#6b7280' 
        }}>
          üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑—É–±—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ ‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑—É–±–æ–≤
        </div>
      </div>

      {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã */}
      {selectedTeeth.length > 0 && (
        <div style={{ 
          marginBottom: '1rem', 
          padding: '1rem', 
          backgroundColor: '#eff6ff', 
          borderRadius: '8px',
          border: '1px solid #bfdbfe'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>
            <span style={{ fontSize: '1.25rem' }}>ü¶∑</span>
            <strong style={{ color: '#1e40af', fontSize: '1rem' }}>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã:</strong> 
            <span style={{ color: '#1e40af', fontWeight: '600', fontSize: '1rem' }}>
              {selectedTeeth.join(', ')}
            </span>
          </div>
          {selectedTeeth.length > 1 && (
            <div style={{ 
              fontSize: '0.875rem', 
              color: '#6b7280', 
              backgroundColor: '#dbeafe',
              padding: '0.5rem',
              borderRadius: '4px',
              border: '1px solid #93c5fd'
            }}>
              üí° –£—Å–ª—É–≥–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑—É–±–∞–º ({selectedTeeth.length} –∑—É–±–æ–≤)
            </div>
          )}
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤ */}
      {selectedTeeth.length > 0 && (
        <div style={{ marginBottom: '1rem' }}>
          <h4 style={{ marginBottom: '0.75rem', color: '#374151', fontSize: '1rem', fontWeight: '600' }}>
            –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –∫ –∑—É–±–∞–º {selectedTeeth.length > 1 ? selectedTeeth.join(', ') : selectedTeeth[0]}:
          </h4>
          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.75rem' }}>
            {services.map(service => (
              <button
                key={service.id}
                onClick={() => handleServiceSelect(service)}
                style={{
                  padding: '0.75rem 1.25rem',
                  backgroundColor: '#3b82f6',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '0.875rem',
                  fontWeight: '500',
                  transition: 'all 0.2s ease',
                  boxShadow: '0 2px 4px rgba(59, 130, 246, 0.3)'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#2563eb';
                  e.currentTarget.style.transform = 'translateY(-1px)';
                  e.currentTarget.style.boxShadow = '0 4px 8px rgba(59, 130, 246, 0.4)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = '#3b82f6';
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 2px 4px rgba(59, 130, 246, 0.3)';
                }}
              >
                {service.name} - {service.price}‚Ç∏
              </button>
            ))}
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ */}
      {toothServices.length > 0 && (
        <div style={{ marginBottom: '1rem' }}>
          <h4 style={{ marginBottom: '0.75rem', color: '#374151', fontSize: '1rem', fontWeight: '600' }}>
            üìã –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:
          </h4>
          {toothServices.map(toothService => (
            <div key={toothService.toothId} style={{ 
              marginBottom: '0.75rem', 
              padding: '1rem', 
              backgroundColor: '#fef2f2', 
              borderRadius: '8px',
              border: '1px solid #fecaca'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.75rem' }}>
                <span style={{ fontSize: '1.25rem' }}>ü¶∑</span>
                <strong style={{ color: '#dc2626', fontSize: '1rem' }}>–ó—É–± {toothService.toothId}:</strong>
                <span style={{ 
                  fontSize: '0.875rem', 
                  color: '#6b7280',
                  backgroundColor: '#f3f4f6',
                  padding: '0.25rem 0.5rem',
                  borderRadius: '4px'
                }}>
                  {toothService.services.length} —É—Å–ª—É–≥
                </span>
              </div>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.75rem' }}>
                {toothService.services.map(service => (
                  <div key={service.id} style={{
                    padding: '0.75rem 1rem',
                    backgroundColor: '#dc2626',
                    color: 'white',
                    borderRadius: '8px',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.75rem',
                    boxShadow: '0 2px 4px rgba(220, 38, 38, 0.2)'
                  }}>
                    <span style={{ fontSize: '1rem' }}>‚öïÔ∏è</span>
                    <div style={{ display: 'flex', flexDirection: 'column', gap: '0.25rem' }}>
                      <span>{service.name}</span>
                      <span style={{ fontSize: '0.75rem', opacity: 0.9 }}>{service.price}‚Ç∏</span>
                    </div>
                    <button
                      onClick={() => handleRemoveService(toothService.toothId, service.id)}
                      style={{
                        background: 'rgba(255,255,255,0.2)',
                        border: 'none',
                        color: 'white',
                        cursor: 'pointer',
                        fontSize: '0.875rem',
                        padding: '0.5rem',
                        borderRadius: '4px',
                        transition: 'all 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.backgroundColor = 'rgba(255,255,255,0.3)';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.backgroundColor = 'rgba(255,255,255,0.2)';
                      }}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}


      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'center' }}>
        <button
          onClick={handleClearSelection}
          style={{
            padding: '0.75rem 1.5rem',
            backgroundColor: '#6b7280',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '0.875rem',
            fontWeight: '500',
            transition: 'all 0.2s ease'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.backgroundColor = '#4b5563';
            e.currentTarget.style.transform = 'translateY(-1px)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.backgroundColor = '#6b7280';
            e.currentTarget.style.transform = 'translateY(0)';
          }}
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
        </button>
      </div>
    </div>
  );
});

export default TeethMap;