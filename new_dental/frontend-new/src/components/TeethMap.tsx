import React, { useState, useEffect, useRef } from 'react';

interface Service {
  id: number;
  name: string;
  price: number;
  category: string;
}

interface ToothService {
  toothId: number;
  services: Service[];
}

interface TeethMapProps {
  services: Service[];
  onToothServicesChange: (toothServices: ToothService[]) => void;
  selectedTeeth?: number[];
  onToothSelect?: (toothId: number) => void;
  teethServices?: Record<number, number[]>;
  onAddServiceToTooth?: (toothId: number, serviceId: number) => void;
  onRemoveServiceFromTooth?: (toothId: number, serviceId: number) => void;
  onClearSelection?: () => void;
}

const TeethMap: React.FC<TeethMapProps> = ({ 
  services, 
  onToothServicesChange,
  selectedTeeth: externalSelectedTeeth,
  onToothSelect,
  teethServices,
  onAddServiceToTooth
}) => {
  const [selectedTeeth, setSelectedTeeth] = useState<number[]>(externalSelectedTeeth || []);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≤–Ω–µ—à–Ω–∏–º–∏ selectedTeeth
  useEffect(() => {
    if (externalSelectedTeeth) {
      setSelectedTeeth(externalSelectedTeeth);
    }
  }, [externalSelectedTeeth]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∑—É–±–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedTeeth
  useEffect(() => {
    updateAllTeethColors();
  }, [selectedTeeth]);
  const [toothServices, setToothServices] = useState<ToothService[]>([]);
  const [selectedServices, setSelectedServices] = useState<Service[]>([]);
  const [svgContent, setSvgContent] = useState<string>('');
  const containerRef = useRef<HTMLDivElement>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º SVG –∫–∞—Ä—Ç—É –∑—É–±–æ–≤
  useEffect(() => {
    fetch('/src/components/Map.svg')
      .then(response => response.text())
      .then(svgText => {
        console.log('üìÅ SVG –∫–∞—Ä—Ç–∞ –∑—É–±–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        setSvgContent(svgText);
      })
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SVG –∫–∞—Ä—Ç—ã –∑—É–±–æ–≤:', error);
      });
  }, []);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (containerRef.current && svgContent) {
      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG –∫–∞—Ä—Ç—É –∑—É–±–æ–≤');
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
      setTimeout(() => {
        processTeeth();
      }, 100);
    }
  }, [svgContent]);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑—É–±—ã –≤ SVG
  const processTeeth = () => {
    if (!containerRef.current) return;
    
    console.log('üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑—É–±—ã –≤ SVG –∫–∞—Ä—Ç–µ');
    
    // –ò—â–µ–º –≤—Å–µ –ø—É—Ç–∏ —Å –∫–ª–∞—Å—Å–æ–º tooth-X
    const toothPaths = containerRef.current.querySelectorAll('path[class*="tooth-"]');
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∑—É–±–æ–≤ –≤ SVG:', toothPaths.length);
    
    if (toothPaths.length === 0) {
      console.log('‚ö†Ô∏è –ó—É–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ SVG');
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑—É–±
    toothPaths.forEach((path) => {
      const className = path.getAttribute('class') || '';
      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Ç—å —Å –∫–ª–∞—Å—Å–æ–º: "${className}"`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑—É–±–∞ –∏–∑ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, tooth-11 -> 11)
      const toothMatch = className.match(/tooth-(\d+)/);
      if (!toothMatch) return;
      
      const toothId = parseInt(toothMatch[1]);
      if (!Number.isFinite(toothId) || toothId <= 0) {
        console.log('‚õîÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π toothId:', toothId);
        return;
      }
      console.log(`ü¶∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑—É–± ${toothId}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∑—É–±–∞
      updateToothColor(path, toothId);
      
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      const newPath = path.cloneNode(true) as SVGPathElement;
      path.parentNode?.replaceChild(newPath, path);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      updateToothColor(newPath, toothId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      newPath.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('ü¶∑ –ö–ª–∏–∫ –ø–æ –∑—É–±—É:', toothId);
        handleToothClick(toothId);
      });
      
      newPath.addEventListener('mouseenter', () => {
        // –ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤
        if (!selectedTeeth.includes(toothId)) {
          newPath.setAttribute('fill', '#3b82f6'); // –°–∏–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        }
      });
      
      newPath.addEventListener('mouseleave', () => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç
        updateToothColor(newPath, toothId);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
      newPath.style.cursor = 'pointer';
      newPath.style.pointerEvents = 'all';
    });
    
    console.log('‚úÖ –ó—É–±—ã –≤ SVG –∫–∞—Ä—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑—É–±–∞
  const updateToothColor = (path: Element, toothId: number) => {
    const toothService = toothServices.find(ts => ts.toothId === toothId);
    
    let color = '#e5e7eb'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä—ã–π
    
    // –ï—Å–ª–∏ —É –∑—É–±–∞ –µ—Å—Ç—å —É—Å–ª—É–≥–∏ - –∫—Ä–∞—Å–Ω—ã–π
    if (toothService && toothService.services.length > 0) {
      color = '#ef4444';
      console.log(`ü¶∑ –ó—É–± ${toothId}: –∫—Ä–∞—Å–Ω—ã–π (–µ—Å—Ç—å —É—Å–ª—É–≥–∏)`);
    }
    // –ï—Å–ª–∏ –∑—É–± –≤—ã–±—Ä–∞–Ω - —Å–∏–Ω–∏–π
    else if (selectedTeeth.includes(toothId)) {
      color = '#3b82f6';
      console.log(`ü¶∑ –ó—É–± ${toothId}: —Å–∏–Ω–∏–π (–≤—ã–±—Ä–∞–Ω)`);
    }
    else {
      console.log(`ü¶∑ –ó—É–± ${toothId}: —Å–µ—Ä—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)`);
    }
    
    console.log(`üé® –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∑—É–±–∞ ${toothId}: ${color}`);
    path.setAttribute('fill', color);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–≤–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    const actualColor = path.getAttribute('fill');
    if (actualColor !== color) {
      console.warn(`‚ö†Ô∏è –¶–≤–µ—Ç –∑—É–±–∞ ${toothId} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è: –æ–∂–∏–¥–∞–ª—Å—è ${color}, –ø–æ–ª—É—á–∏–ª—Å—è ${actualColor}`);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç
      path.setAttribute('fill', color);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑—É–±—É
  const handleToothClick = (toothId: number) => {
    console.log('ü¶∑ –ö–ª–∏–∫ –ø–æ –∑—É–±—É:', toothId);
    
    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setSelectedTeeth(prev => {
      const newSelection = prev.includes(toothId) 
        ? prev.filter(id => id !== toothId)
        : [...prev, toothId];
      
      console.log('ü¶∑ –ù–æ–≤—ã–π –≤—ã–±–æ—Ä –∑—É–±–æ–≤:', newSelection);
      return newSelection;
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑—É–±–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const existingToothService = toothServices.find(ts => ts.toothId === toothId);
    if (existingToothService) {
      setSelectedServices(existingToothService.services);
    } else {
      setSelectedServices([]);
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (onToothSelect) {
      onToothSelect(toothId);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑—É–±–∞–º
  const handleAddService = (service: Service) => {
    if (selectedTeeth.length === 0) return;
    
    setSelectedServices(prev => {
      const isAlreadySelected = prev.find(s => s.id === service.id);
      if (isAlreadySelected) {
        return prev.filter(s => s.id !== service.id);
      } else {
        return [...prev, service];
      }
    });
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤
  const handleSaveToothServices = () => {
    if (selectedTeeth.length === 0 || selectedServices.length === 0) return;
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –∑—É–±–æ–≤:', selectedTeeth, selectedServices);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (onAddServiceToTooth) {
      selectedTeeth.forEach(toothId => {
        selectedServices.forEach(service => {
          console.log('ü¶∑ –í—ã–∑—ã–≤–∞–µ–º onAddServiceToTooth:', toothId, service.id);
          onAddServiceToTooth(toothId, service.id);
        });
      });
    } else {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      let newToothServices = [...toothServices];
      
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤
      newToothServices = newToothServices.filter(ts => !selectedTeeth.includes(ts.toothId));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑—É–±–∞
      selectedTeeth.forEach(toothId => {
        newToothServices.push({
          toothId: toothId,
          services: selectedServices
        });
      });
      
      setToothServices(newToothServices);
      onToothServicesChange(newToothServices);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∑—É–±–æ–≤ –∏ —É—Å–ª—É–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
    setSelectedTeeth([]);
    setSelectedServices([]);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–µ—Ö –∑—É–±–æ–≤
    updateAllTeethColors();
    
    console.log('‚úÖ –£—Å–ª—É–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∑—É–±–æ–≤:', selectedTeeth);
    console.log('ü¶∑ –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω - –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑—É–±');
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –¥–ª—è –∑—É–±–∞

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–µ—Ö –∑—É–±–æ–≤
  const updateAllTeethColors = () => {
    if (!containerRef.current) return;
    
    console.log('üé® –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–µ—Ö –∑—É–±–æ–≤');
    
    const toothPaths = containerRef.current.querySelectorAll('path[class*="tooth-"]');
    toothPaths.forEach((path) => {
      const className = path.getAttribute('class') || '';
      const toothMatch = className.match(/tooth-(\d+)/);
      if (toothMatch) {
        const toothId = parseInt(toothMatch[1]);
        updateToothColor(path, toothId);
      }
    });
    
    console.log('‚úÖ –¶–≤–µ—Ç–∞ –≤—Å–µ—Ö –∑—É–±–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  };

  // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑—É–±–æ–≤
  const reattachEventListeners = () => {
    if (!containerRef.current) return;
    
    console.log('üîß –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑—É–±–æ–≤');
    
    const toothPaths = containerRef.current.querySelectorAll('path[class*="tooth-"]');
    toothPaths.forEach((path) => {
      const className = path.getAttribute('class') || '';
      const toothMatch = className.match(/tooth-(\d+)/);
      if (!toothMatch) return;
      
      const toothId = parseInt(toothMatch[1]);
      
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      const newPath = path.cloneNode(true) as SVGPathElement;
      path.parentNode?.replaceChild(newPath, path);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      updateToothColor(newPath, toothId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      newPath.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('ü¶∑ –ö–ª–∏–∫ –ø–æ –∑—É–±—É:', toothId);
        handleToothClick(toothId);
      });
      
      newPath.addEventListener('mouseenter', () => {
        // –ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤
        if (!selectedTeeth.includes(toothId)) {
          newPath.setAttribute('fill', '#3b82f6'); // –°–∏–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        }
      });
      
      newPath.addEventListener('mouseleave', () => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç
        updateToothColor(newPath, toothId);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
      newPath.style.cursor = 'pointer';
      newPath.style.pointerEvents = 'all';
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∑—É–±–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    if (containerRef.current && svgContent) {
      console.log('üîÑ useEffect: –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∑—É–±–æ–≤');
      console.log('ü¶∑ selectedTeeth:', selectedTeeth);
      console.log('ü¶∑ toothServices:', toothServices);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
      setTimeout(() => {
        updateAllTeethColors();
        // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑—É–±–æ–≤
        reattachEventListeners();
      }, 50);
    }
  }, [toothServices, selectedTeeth, svgContent]);

  return (
    <div className="teeth-map-container">
      {/* –ö–∞—Ä—Ç–∞ –∑—É–±–æ–≤ */}
      <div className="teeth-map">
        {/* SVG –∫–∞—Ä—Ç–∞ –∑—É–±–æ–≤ */}
        <div 
          ref={containerRef}
          className="svg-container"
          dangerouslySetInnerHTML={{ __html: svgContent }}
        />
      </div>

      {/* –í—ã–±–æ—Ä —É—Å–ª—É–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤ */}
      <div className="services-selection">
        <h4 className="services-title">
          {selectedTeeth.length > 0 
            ? `–í—ã–±–æ—Ä —É—Å–ª—É–≥ –¥–ª—è –∑—É–±–æ–≤: ${selectedTeeth.join(', ')}`
            : '–í—ã–±–µ—Ä–∏—Ç–µ –∑—É–± –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ª—É–≥'
          }
        </h4>
          
          <div className="services-grid">
            {services && services.map(service => (
              <div
                key={service.id}
                className={`service-item ${
                  selectedServices.find(s => s.id === service.id) ? 'selected' : ''
                }`}
                onClick={() => handleAddService(service)}
              >
                <div className="service-name">{service.name}</div>
                <div className="service-price">{service.price} ‚Ç∏</div>
                <div className="service-category">{service.category || '–û–±—â–µ–µ'}</div>
              </div>
            ))}
          </div>
          
          <div className="services-actions">
            <button
              className="btn-save"
              onClick={handleSaveToothServices}
              disabled={selectedTeeth.length === 0 || selectedServices.length === 0}
            >
              {selectedTeeth.length > 0 
                ? `–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥–∏ –¥–ª—è –∑—É–±–æ–≤ ${selectedTeeth.join(', ')}`
                : '–í—ã–±–µ—Ä–∏—Ç–µ –∑—É–± –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ª—É–≥'
              }
            </button>
            
            <button
              className="btn-cancel"
              onClick={() => {
                setSelectedTeeth([]);
                setSelectedServices([]);
              }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            
            <button
              className="btn-clear"
              onClick={() => {
                setSelectedTeeth([]);
                setSelectedServices([]);
              }}
              style={{
                backgroundColor: '#6b7280',
                color: 'white',
                padding: '10px 20px',
                border: 'none',
                borderRadius: '6px',
                fontWeight: '500',
                cursor: 'pointer',
                transition: 'all 0.2s ease'
              }}
            >
              –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –∑—É–±–æ–≤
            </button>
          </div>
        </div>

        <style>{`
        .teeth-map-container {
          width: 100%;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
          background: transparent;
        }

        .teeth-map {
          margin-bottom: 30px;
          display: flex;
          flex-direction: column;
          align-items: center;
        }

        .svg-container {
          width: 100%;
          max-width: 600px;
          height: auto;
          display: flex;
          justify-content: center;
          align-items: center;
        }

        .svg-container svg {
          width: 100%;
          height: auto;
          max-height: 400px;
        }

        .services-selection {
          background: #f9fafb;
          padding: 20px;
          border-radius: 8px;
          margin-bottom: 20px;
          border: 2px solid #e5e7eb;
          min-height: 200px;
        }

        .services-title {
          color: #1f2937;
          margin-bottom: 15px;
          font-size: 1.125rem;
          font-weight: 600;
        }

        .services-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
          gap: 12px;
          margin-bottom: 20px;
        }

        .service-item {
          background: white;
          padding: 12px;
          border-radius: 6px;
          border: 2px solid #e5e7eb;
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .service-item:hover {
          border-color: #3b82f6;
          transform: translateY(-2px);
        }

        .service-item.selected {
          border-color: #ef4444;
          background: #fef2f2;
        }

        .service-name {
          font-weight: 600;
          color: #1f2937;
          margin-bottom: 4px;
        }

        .service-price {
          color: #059669;
          font-weight: 500;
          margin-bottom: 2px;
        }

        .service-category {
          color: #6b7280;
          font-size: 0.875rem;
        }

        .services-actions {
          display: flex;
          gap: 12px;
          justify-content: center;
        }

        .btn-save, .btn-cancel {
          padding: 10px 20px;
          border-radius: 6px;
          border: none;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .btn-save {
          background: #ef4444;
          color: white;
        }

        .btn-save:hover:not(:disabled) {
          background: #dc2626;
          transform: translateY(-1px);
        }

        .btn-save:disabled {
          background: #9ca3af;
          cursor: not-allowed;
          opacity: 0.6;
        }

        .btn-cancel {
          background: #6b7280;
          color: white;
        }

        .btn-cancel:hover {
          background: #4b5563;
          transform: translateY(-1px);
        }

        @media (max-width: 768px) {
          .teeth-map-container {
            padding: 15px;
          }
          
          .svg-container {
            max-width: 100%;
          }
          
          .services-grid {
            grid-template-columns: 1fr;
          }
        }
      `}</style>
    </div>
  );
};

export default TeethMap;