import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import TreatmentOrderModal from './TreatmentOrderModal';
import { doctorsApi } from '../services/doctorsApi';
import type { Doctor } from '../types/doctor';
import { clinicPatientsApi } from '../services/clinicPatientsApi';
import type { PatientSearchResult } from '../services/clinicPatientsApi';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø—Ä—è–º–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
interface Patient {
  id: number;
  full_name: string;
  phone: string;
  iin: string;
  birth_date: string;
  allergies: string;
  chronic_diseases: string;
  contraindications: string;
  special_notes: string;
  created_at: string;
}

interface Appointment {
  id: number;
  patient_id: number;
  patient_name: string;
  patient_phone: string;
  patient_iin: string;
  patient_birth_date: string;
  patient_allergies: string;
  patient_chronic_diseases: string;
  patient_contraindications: string;
  patient_special_notes: string;
  doctor_id: number;
  appointment_date: string;
  start_time: string;
  end_time: string;
  status: string;
  notes: string;
}

interface TreatmentPlan {
  id: number;
  patient_id: number;
  patient_name: string;
  doctor_id: number;
  diagnosis: string;
  treatment_description: string;
  services: number[];
  total_cost: number;
  selected_teeth: number[];
  status: string;
  created_at: string;
}

interface AppointmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  date: Date;
  time: string;
  appointment: Appointment | null;
  doctorId: number;
  treatmentPlanForAppointment?: {
    plan: any;
    teethServices: Record<number, number[]>;
  } | null;
  onAppointmentCreated: (appointment: Appointment) => void;
  onAppointmentUpdated: (appointment: Appointment) => void;
  onNavigateToTreatmentPlan?: (patient: Patient) => void;
  onCreateTreatmentPlan?: (patient: Patient) => void;
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä—è–º–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
const treatmentPlansApi = {
  getByPatientId: async (patientId: number): Promise<TreatmentPlan[]> => {
    try {
      const response = await api.get(`/treatment-plans/patient/${patientId}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è:', error);
      return [];
    }
  }
};



const AppointmentModal: React.FC<AppointmentModalProps> = ({
  isOpen,
  onClose,
  date,
  time,
  appointment,
  doctorId,
  treatmentPlanForAppointment,
  onAppointmentCreated,
  onAppointmentUpdated,
  onNavigateToTreatmentPlan,
  onCreateTreatmentPlan
}) => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    full_name: '',
    phone: '+7 ',
    iin: '',
    birth_date: '',
    allergies: '',
    chronic_diseases: '',
    contraindications: '',
    special_notes: '',
    start_time: time,
    end_time: '',
    notes: '',
    doctor_id: doctorId // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  });

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ formData
  useEffect(() => {
    console.log('üìù formData –∏–∑–º–µ–Ω–∏–ª—Å—è:', formData);
  }, [formData]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
  const loadTreatmentPlans = async (patientId: number) => {
    if (!patientId) return;
    
    setLoadingPlans(true);
    try {
      const plans = await treatmentPlansApi.getByPatientId(patientId);
      setTreatmentPlans(plans);
      console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è:', plans);
      console.log('üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–≤:', plans.length);
      console.log('üìã –ü–µ—Ä–≤—ã–π –ø–ª–∞–Ω:', plans[0]);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è:', error);
      setTreatmentPlans([]);
    } finally {
      setLoadingPlans(false);
    }
  };
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [existingPatient, setExistingPatient] = useState<Patient | null>(null);
  const [treatmentPlans, setTreatmentPlans] = useState<TreatmentPlan[]>([]);
  const [loadingPlans, setLoadingPlans] = useState(false);
  const [showTreatmentOrderModal, setShowTreatmentOrderModal] = useState(false);
  const [doctors, setDoctors] = useState<Doctor[]>([]);
  const [loadingDoctors, setLoadingDoctors] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π –∫–ª–∏–Ω–∏–∫–∏
  const loadDoctors = async () => {
    setLoadingDoctors(true);
    try {
      const doctorsList = await doctorsApi.getDoctors();
      setDoctors(doctorsList);
      console.log('üë®‚Äç‚öïÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Ä–∞—á–∏:', doctorsList);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–∞—á–µ–π:', error);
      setDoctors([]);
    } finally {
      setLoadingDoctors(false);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
  useEffect(() => {
    if (isOpen) {
      console.log('üöÄ –ú–æ–¥–∞–ª –æ—Ç–∫—Ä—ã—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É');
      if (appointment) {
        console.log('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏:', appointment);
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        setFormData({
          full_name: appointment.patient_name,
          phone: appointment.patient_phone,
          iin: appointment.patient_iin,
          birth_date: toDateInput(appointment.patient_birth_date),
          allergies: appointment.patient_allergies || '',
          chronic_diseases: appointment.patient_chronic_diseases || '',
          contraindications: appointment.patient_contraindications || '',
          special_notes: appointment.patient_special_notes || '',
          start_time: appointment.start_time,
          end_time: appointment.end_time,
          notes: appointment.notes,
          doctor_id: appointment.doctor_id
        });
        setExistingPatient({
          id: appointment.patient_id,
          full_name: appointment.patient_name,
          phone: appointment.patient_phone,
          iin: appointment.patient_iin,
          birth_date: toDateInput(appointment.patient_birth_date),
          allergies: appointment.patient_allergies || '',
          chronic_diseases: appointment.patient_chronic_diseases || '',
          contraindications: appointment.patient_contraindications || '',
          special_notes: appointment.patient_special_notes || '',
          created_at: ''
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
        loadTreatmentPlans(appointment.patient_id);
      } else {
        console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏');
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        setFormData({
          full_name: '',
          phone: '+7 ',
          iin: '',
          birth_date: '',
          allergies: '',
          chronic_diseases: '',
          contraindications: '',
          special_notes: '',
          start_time: time,
          end_time: '',
          notes: '',
          doctor_id: doctorId
        });
        setExistingPatient(null);
        setTreatmentPlans([]);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
      loadDoctors();
    }
  }, [isOpen, appointment, time]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
  useEffect(() => {
    if (isOpen && !appointment && treatmentPlanForAppointment?.plan) {
      console.log('üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è:', treatmentPlanForAppointment);
      
      const plan = treatmentPlanForAppointment.plan;
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
      setFormData(prev => ({
        ...prev,
        full_name: plan.patient_name || '',
        phone: plan.patient_phone || '+7 ',
        iin: plan.patient_iin || '',
        birth_date: plan.patient_birth_date || '',
        allergies: plan.patient_allergies || '',
        chronic_diseases: plan.patient_chronic_diseases || '',
        contraindications: plan.patient_contraindications || '',
        special_notes: plan.patient_special_notes || '',
        notes: `–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è: ${plan.diagnosis || '–ù–µ —É–∫–∞–∑–∞–Ω'}. –£—Å–ª—É–≥–∏: ${Object.entries(treatmentPlanForAppointment.teethServices)
          .map(([toothId, serviceIds]) => `–ó—É–± ${toothId} - ${serviceIds.length} —É—Å–ª—É–≥`)
          .join(', ')}`
      }));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      setExistingPatient({
        id: plan.patient_id || 0,
        full_name: plan.patient_name || '',
        phone: plan.patient_phone || '',
        iin: plan.patient_iin || '',
        birth_date: plan.patient_birth_date || '',
        allergies: plan.patient_allergies || '',
        chronic_diseases: plan.patient_chronic_diseases || '',
        contraindications: plan.patient_contraindications || '',
        special_notes: plan.patient_special_notes || '',
        created_at: ''
      });
      
      console.log('‚úÖ –§–æ—Ä–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è');
    }
  }, [isOpen, appointment, treatmentPlanForAppointment]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (1 —á–∞—Å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞)
  useEffect(() => {
    if (formData.start_time) {
      const [hours, minutes] = formData.start_time.split(':');
      const endTime = new Date();
      endTime.setHours(parseInt(hours) + 1, parseInt(minutes), 0);
      const endTimeString = endTime.toTimeString().slice(0, 5);
      setFormData(prev => ({ ...prev, end_time: endTimeString }));
    }
  }, [formData.start_time]);

  // –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  const isAutoFilling = useRef(false);

  const toDateInput = (d?: string) => (d ? new Date(d).toISOString().slice(0, 10) : '');

  const formatPhoneFromDigits = (digits: string) => {
    // –æ–∂–∏–¥–∞–µ–º 11 —Ü–∏—Ñ—Ä, –ø–µ—Ä–≤–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 7
    if (!digits) return '+7 ';
    const d = digits.replace(/\D/g, '');
    if (d.length < 1) return '+7 ';
    let out = '+7 (' + (d.slice(1, 4) || '');
    if (d.length >= 4) {
      out += ') ' + d.slice(4, 7);
      if (d.length >= 7) {
        out += '-' + d.slice(7, 9);
        if (d.length >= 9) {
          out += '-' + d.slice(9, 11);
        }
      }
    }
    return out;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –ò–ò–ù
  const extractBirthDateFromIIN = (iin: string): string => {
    if (iin.length >= 6) {
      const datePart = iin.substring(0, 6);
      const year = datePart.substring(0, 2);
      const month = datePart.substring(2, 4);
      const day = datePart.substring(4, 6);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–∫ (–µ—Å–ª–∏ –≥–æ–¥ > 50, —Ç–æ 19xx, –∏–Ω–∞—á–µ 20xx)
      const century = parseInt(year) > 50 ? '19' : '20';
      const fullYear = century + year;
      
      return `${fullYear}-${month}-${day}`;
    }
    return '';
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ò–ò–ù
  const handleIINChange = async (iin: string) => {
    console.log('üîç handleIINChange –≤—ã–∑–≤–∞–Ω —Å –ò–ò–ù:', iin);
    if (isAutoFilling.current) return;
    // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const digits = iin.replace(/\D/g, '');
    setFormData(prev => ({ ...prev, iin: digits }));
    
    if (digits.length === 12) {
      console.log('‚úÖ –ò–ò–ù —Å–æ–¥–µ—Ä–∂–∏—Ç 12 —Ü–∏—Ñ—Ä, –∏—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞...');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
      const birthDate = extractBirthDateFromIIN(digits);
      console.log('üìÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:', birthDate);
      setFormData(prev => ({ ...prev, birth_date: birthDate }));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –ò–ò–ù –≤ –±–∞–∑–µ
      try {
        console.log('üîé –í—ã–∑—ã–≤–∞–µ–º findPatient —Å –ò–ò–ù:', digits);
        const patient = await findPatient(digits);
        console.log('üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', patient);
        
        if (patient) {
          console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è:', patient);
          isAutoFilling.current = true;
          setExistingPatient(patient as unknown as Patient);
          setFormData(prev => ({
            ...prev,
            full_name: patient.full_name || '',
            phone: patient.phone || '',
            iin: patient.iin || digits,
            birth_date: toDateInput(patient.birth_date) || birthDate,
            allergies: patient.allergies || '',
            chronic_diseases: patient.chronic_diseases || '',
            contraindications: patient.contraindications || '',
            special_notes: patient.special_notes || ''
          }));
          isAutoFilling.current = false;
          console.log('‚úÖ –ü–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
          loadTreatmentPlans(patient.id);
        } else {
          console.log('‚ùå –ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
          setExistingPatient(null);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
      }
    } else {
      console.log('‚ùå –ò–ò–ù –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 12 —Ü–∏—Ñ—Ä:', iin.length);
      setExistingPatient(null);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const handlePhoneChange = async (phone: string) => {
    console.log('üì± handlePhoneChange –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º:', phone);
    if (isAutoFilling.current) return;
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (phone.startsWith('8')) {
      phone = '7' + phone.slice(1);
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (!phone.startsWith('+7')) {
      phone = '+7 ' + phone;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const digits = phone.replace(/\D/g, '');
    let formattedPhone = phone;
    
    if (digits.length >= 1) {
      formattedPhone = '+7 (' + digits.slice(1, 4);
      if (digits.length >= 4) {
        formattedPhone += ') ' + digits.slice(4, 7);
        if (digits.length >= 7) {
          formattedPhone += '-' + digits.slice(7, 9);
          if (digits.length >= 9) {
            formattedPhone += '-' + digits.slice(9, 11);
          }
        }
      }
    }
    
    setFormData(prev => ({ ...prev, phone: formattedPhone }));
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª–Ω—ã–π (11 —Ü–∏—Ñ—Ä), –∏—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if (digits.length === 11) {
      console.log('üì± –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª–Ω—ã–π (11 —Ü–∏—Ñ—Ä), –∏—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞...');
      try {
        const patient = await findPatient(undefined, formattedPhone);
        if (patient) {
          console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è:', patient);
          isAutoFilling.current = true;
          setExistingPatient(patient as unknown as Patient);
          const patientDigitsPhone = (patient.phone || '').replace(/\D/g, '');
          setFormData(prev => ({
            ...prev,
            full_name: patient.full_name || '',
            phone: patientDigitsPhone ? formatPhoneFromDigits(patientDigitsPhone) : formattedPhone,
            iin: patient.iin || prev.iin,
            birth_date: toDateInput(patient.birth_date) || prev.birth_date,
            allergies: patient.allergies || '',
            chronic_diseases: patient.chronic_diseases || '',
            contraindications: patient.contraindications || '',
            special_notes: patient.special_notes || ''
          }));
          isAutoFilling.current = false;
          // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è
          loadTreatmentPlans(patient.id);
        } else {
          console.log('‚ùå –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω');
          setExistingPatient(null);
        }
      } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', e);
      }
    } else {
      console.log('üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞');
      setExistingPatient(null);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
  const findPatient = async (iin?: string, phone?: string): Promise<PatientSearchResult | null> => {
    try {
      console.log('üîç findPatient –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { iin, phone });
      
      let searchQuery = '';
      if (iin) {
        searchQuery = iin;
        console.log('üîç –ò—â–µ–º –ø–æ –ò–ò–ù:', iin);
      } else if (phone) {
        // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        searchQuery = phone.replace(/\D/g, '');
        console.log('üì± –ò—â–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', searchQuery);
      } else {
        console.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞');
        return null;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—â–µ–π –±–∞–∑–µ
      const searchResults = await clinicPatientsApi.searchPatients(searchQuery);
      
      if (searchResults && searchResults.length > 0) {
        const foundPatient = searchResults[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', foundPatient);
        return foundPatient;
      }
      
      console.log('‚ùå –ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
      return null;
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = (): boolean => {
    if (!formData.full_name.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞');
      return false;
    }
    if (formData.phone.replace(/\D/g, '').length !== 11) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      return false;
    }
    if (!formData.iin || formData.iin.length !== 12) {
      setError('–ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä');
      return false;
    }
    if (!formData.birth_date) {
      setError('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è');
      return false;
    }
    if (!formData.start_time || !formData.end_time) {
      setError('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞');
      return false;
    }
    if (!formData.doctor_id) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞');
      return false;
    }
    return true;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      let patientId = existingPatient?.id || 0;
      
      // –ï—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!existingPatient) {
        console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ë–î...');
        
        const { data: newPatient } = await api.post('/patients/', {
          full_name: formData.full_name,
          phone: formData.phone,
          iin: formData.iin,
          birth_date: formData.birth_date,
          allergies: formData.allergies || '',
          chronic_diseases: formData.chronic_diseases || '',
          contraindications: formData.contraindications || '',
          special_notes: formData.special_notes || ''
        });

        if (newPatient) {
          patientId = newPatient.id;
          console.log('‚úÖ –ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', newPatient);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API');
          setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞');
          setLoading(false);
          return;
        }
      } else {
        // –ï—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
        patientId = existingPatient.id;
        console.log('üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', existingPatient);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –∫–ª–∏–Ω–∏–∫—É (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
      try {
        console.log('üè• –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –∫–ª–∏–Ω–∏–∫—É...');
        await clinicPatientsApi.addPatientToClinic(patientId);
        console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∏–Ω–∏–∫—É');
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç —É–∂–µ –≤ –∫–ª–∏–Ω–∏–∫–µ
        console.log('‚ÑπÔ∏è –ü–∞—Ü–∏–µ–Ω—Ç —É–∂–µ –≤ –∫–ª–∏–Ω–∏–∫–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
      }
      
      const appointmentData = {
        patient_id: patientId,
        doctor_id: formData.doctor_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞
        appointment_date: date.toISOString().split('T')[0],
        start_time: formData.start_time,
        end_time: formData.end_time,
        notes: formData.notes,
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        patient_name: formData.full_name,
        patient_phone: formData.phone,
        patient_iin: formData.iin,
        patient_birth_date: formData.birth_date,
        patient_allergies: formData.allergies,
        patient_chronic_diseases: formData.chronic_diseases,
        patient_contraindications: formData.contraindications,
        patient_special_notes: formData.special_notes
      };
      
      if (appointment) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î:', appointmentData);
        const { data: updatedAppointment } = await api.put(`/appointments/${appointment.id}`, appointmentData);
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î:', updatedAppointment);
        onAppointmentUpdated(updatedAppointment);
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        console.log('üíæ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î:', appointmentData);
        const { data: newAppointment } = await api.post('/appointments/', appointmentData);
        console.log('‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î:', newAppointment);
        onAppointmentCreated(newAppointment);
      }
      
      onClose();
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  const generateTimeSlots = (): string[] => {
    const slots = [];
    for (let hour = 8; hour <= 18; hour++) {
      for (let minute = 0; minute < 60; minute += 30) {
        const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        slots.push(time);
      }
    }
    return slots;
  };

  if (!isOpen) return null;

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 9999
    }}>
      <div style={{
        backgroundColor: 'white',
        borderRadius: '8px',
        padding: '24px',
        width: '100%',
        maxWidth: '600px',
        maxHeight: '90vh',
        overflow: 'auto',
        boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)'
      }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '16px'
        }}>
          <h2 style={{
            fontSize: '20px',
            fontWeight: '600',
            margin: 0
          }}>
            {appointment ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏' : `–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º ${date.toLocaleDateString('ru-RU')}`}
          </h2>
          <button
            onClick={onClose}
            style={{
              color: '#6b7280',
              fontSize: '24px',
              background: 'none',
              border: 'none',
              cursor: 'pointer',
              padding: '4px'
            }}
          >
            √ó
          </button>
        </div>

        {existingPatient && (
          <div style={{
            marginBottom: '16px',
            padding: '12px',
            backgroundColor: '#eff6ff',
            border: '1px solid #bfdbfe',
            borderRadius: '8px'
          }}>
            <p style={{
              color: '#1e40af',
              fontSize: '14px',
              margin: 0
            }}>
              ‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ü–∏–µ–Ω—Ç: {existingPatient.full_name}
            </p>
          </div>
        )}

        <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ */}
          <div style={{
            display: 'grid',
            gridTemplateColumns: '1fr 1fr',
            gap: '16px'
          }}>
                          <div>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: '500',
                  color: '#374151',
                  marginBottom: '4px'
                }}>
                  –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞ *
                </label>
                <input
                  type="text"
                  value={formData.full_name}
                  onChange={(e) => setFormData(prev => ({ ...prev, full_name: e.target.value }))}
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '14px',
                    boxSizing: 'border-box'
                  }}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û"
                  required
                />
              </div>

                          <div>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: '500',
                  color: '#374151',
                  marginBottom: '4px'
                }}>
                  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *
                </label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => handlePhoneChange(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '14px',
                    boxSizing: 'border-box'
                  }}
                  placeholder="+7 (XXX) XXX-XX-XX"
                  required
                />
              </div>

                          <div>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: '500',
                  color: '#374151',
                  marginBottom: '4px'
                }}>
                  –ò–ò–ù *
                </label>
                <input
                  type="text"
                  value={formData.iin}
                  onChange={(e) => handleIINChange(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '14px',
                    boxSizing: 'border-box'
                  }}
                  placeholder="12 —Ü–∏—Ñ—Ä"
                  maxLength={12}
                  required
                />
              </div>

                          <div>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: '500',
                  color: '#374151',
                  marginBottom: '4px'
                }}>
                  –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è *
                </label>
                <input
                  type="date"
                  value={formData.birth_date}
                  onChange={(e) => setFormData(prev => ({ ...prev, birth_date: e.target.value }))}
                  style={{
                    width: '100%',
                    padding: '8px 12px',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '14px',
                    boxSizing: 'border-box'
                  }}
                  required
                />
              </div>
          </div>

          {/* –ê–Ω–∞–º–Ω–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞ */}
          <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
            <h3 style={{
              fontSize: '18px',
              fontWeight: '500',
              color: '#111827',
              borderBottom: '1px solid #e5e7eb',
              paddingBottom: '8px',
              margin: 0
            }}>
              –ê–Ω–∞–º–Ω–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            </h3>
            
            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                color: '#374151',
                marginBottom: '4px'
              }}>
                –ê–ª–ª–µ—Ä–≥–∏–∏
              </label>
              <textarea
                value={formData.allergies}
                onChange={(e) => setFormData(prev => ({ ...prev, allergies: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box',
                  resize: 'vertical',
                  minHeight: '60px'
                }}
                placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ç.–¥."
                rows={2}
              />
            </div>

            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                color: '#374151',
                marginBottom: '4px'
              }}>
                –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
              </label>
              <textarea
                value={formData.chronic_diseases}
                onChange={(e) => setFormData(prev => ({ ...prev, chronic_diseases: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box',
                  resize: 'vertical',
                  minHeight: '60px'
                }}
                placeholder="–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç, –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è, –∞—Å—Ç–º–∞ –∏ —Ç.–¥."
                rows={2}
              />
            </div>

            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                color: '#374151',
                marginBottom: '4px'
              }}>
                –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è
              </label>
              <textarea
                value={formData.contraindications}
                onChange={(e) => setFormData(prev => ({ ...prev, contraindications: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box',
                  resize: 'vertical',
                  minHeight: '60px'
                }}
                placeholder="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ª–µ—á–µ–Ω–∏—é, –Ω–∞—Ä–∫–æ–∑—É –∏ —Ç.–¥."
                rows={2}
              />
            </div>

            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                color: '#374151',
                marginBottom: '4px'
              }}>
                –û—Å–æ–±—ã–µ –∑–∞–º–µ—Ç–∫–∏
              </label>
              <textarea
                value={formData.special_notes}
                onChange={(e) => setFormData(prev => ({ ...prev, special_notes: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box',
                  resize: 'vertical',
                  minHeight: '60px'
                }}
                placeholder="–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å, –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤, –∫—É—Ä–µ–Ω–∏–µ –∏ —Ç.–¥."
                rows={2}
              />
            </div>
          </div>

          {/* –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ */}
          <div style={{
            display: 'grid',
            gridTemplateColumns: '1fr 1fr',
            gap: '16px'
          }}>
            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                color: '#374151',
                marginBottom: '4px'
              }}>
                –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ *
              </label>
              <select
                value={formData.start_time}
                onChange={(e) => setFormData(prev => ({ ...prev, start_time: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box'
                }}
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                {generateTimeSlots().map(time => (
                  <option key={time} value={time}>{time}</option>
                ))}
              </select>
            </div>

            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                color: '#374151',
                marginBottom: '4px'
              }}>
                –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è *
              </label>
              <select
                value={formData.end_time}
                onChange={(e) => setFormData(prev => ({ ...prev, end_time: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px',
                  boxSizing: 'border-box'
                }}
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                {generateTimeSlots().map(time => (
                  <option key={time} value={time}>{time}</option>
                ))}
              </select>
            </div>
          </div>

          {/* –í—ã–±–æ—Ä –≤—Ä–∞—á–∞ */}
          <div>
            <label style={{
              display: 'block',
              fontSize: '14px',
              fontWeight: '500',
              color: '#374151',
              marginBottom: '4px'
            }}>
              –í—Ä–∞—á *
            </label>
            <select
              value={formData.doctor_id}
              onChange={(e) => setFormData(prev => ({ ...prev, doctor_id: parseInt(e.target.value) }))}
              style={{
                width: '100%',
                padding: '8px 12px',
                border: '1px solid #d1d5db',
                borderRadius: '6px',
                fontSize: '14px',
                boxSizing: 'border-box'
              }}
              required
              disabled={loadingDoctors}
            >
              <option value="">{loadingDoctors ? '–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–∞—á–µ–π...' : '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞'}</option>
              {doctors.map(doctor => (
                <option key={doctor.id} value={doctor.id}>
                  {doctor.full_name} ({doctor.role === 'doctor' ? '–í—Ä–∞—á' : '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞'})
                </option>
              ))}
            </select>
          </div>

          {/* –ó–∞–º–µ—Ç–∫–∏ */}
          <div>
            <label style={{
              display: 'block',
              fontSize: '14px',
              fontWeight: '500',
              color: '#374151',
              marginBottom: '4px'
            }}>
              –ó–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–ø–∏—Å–∏
            </label>
            <textarea
              value={formData.notes}
              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
              style={{
                width: '100%',
                padding: '8px 12px',
                border: '1px solid #d1d5db',
                borderRadius: '6px',
                fontSize: '14px',
                boxSizing: 'border-box',
                resize: 'vertical',
                minHeight: '80px'
              }}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏"
              rows={3}
            />
          </div>

          {/* –û—à–∏–±–∫–∏ */}
          {error && (
            <div style={{
              color: '#dc2626',
              fontSize: '14px',
              backgroundColor: '#fef2f2',
              padding: '12px',
              borderRadius: '8px',
              border: '1px solid #fecaca'
            }}>
              {error}
            </div>
          )}

          {/* –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è */}
          {(existingPatient || (appointment && appointment.patient_id)) && (
            <div style={{
              marginBottom: '16px',
              padding: '16px',
              backgroundColor: '#f8fafc',
              borderRadius: '8px',
              border: '1px solid #e2e8f0'
            }}>
              <h4 style={{
                margin: '0 0 12px 0',
                fontSize: '16px',
                fontWeight: '600',
                color: '#1e293b'
              }}>
                üìã –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
              </h4>
              
              {loadingPlans ? (
                <div style={{ color: '#64748b', fontSize: '14px' }}>
                  –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è...
                </div>
              ) : treatmentPlans.length > 0 ? (
                <div>
                  <div style={{ marginBottom: '12px', fontSize: '14px', color: '#64748b' }}>
                    –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è: {treatmentPlans.length}
                  </div>
                  
                  {/* –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è */}
                  <div style={{ marginBottom: '12px' }}>
                    {treatmentPlans.map((plan, index) => (
                      <div key={plan.id || index} style={{
                        padding: '12px',
                        backgroundColor: '#f8fafc',
                        border: '1px solid #e2e8f0',
                        borderRadius: '6px',
                        marginBottom: '8px'
                      }}>
                        <div style={{ fontWeight: '500', marginBottom: '4px' }}>
                          –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è #{plan.id}
                        </div>
                        <div style={{ fontSize: '12px', color: '#64748b', marginBottom: '4px' }}>
                          –î–∏–∞–≥–Ω–æ–∑: {plan.diagnosis || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                        </div>
                        <div style={{ fontSize: '12px', color: '#64748b', marginBottom: '4px' }}>
                          –û–ø–∏—Å–∞–Ω–∏–µ: {plan.treatment_description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                        </div>
                        <div style={{ fontSize: '12px', color: '#64748b', marginBottom: '8px' }}>
                          –°–æ–∑–¥–∞–Ω: {new Date(plan.created_at).toLocaleDateString('ru-RU')}
                        </div>
                        <button
                          type="button"
                          onClick={() => {
                            if (onNavigateToTreatmentPlan) {
                              // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–æ—Ä–º—ã
                              const patientFromForm: Patient = {
                                id: existingPatient?.id || 0,
                                full_name: formData.full_name,
                                phone: formData.phone,
                                iin: formData.iin,
                                birth_date: formData.birth_date,
                                allergies: formData.allergies,
                                chronic_diseases: formData.chronic_diseases,
                                contraindications: formData.contraindications,
                                special_notes: formData.special_notes,
                                created_at: new Date().toISOString().split('T')[0]
                              };
                              console.log('üìã –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–ª–∞–Ω—É –ª–µ—á–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–æ—Ä–º—ã:', patientFromForm);
                              onNavigateToTreatmentPlan(patientFromForm);
                              onClose();
                            }
                          }}
                          style={{
                            padding: '6px 12px',
                            backgroundColor: '#059669',
                            color: 'white',
                            border: 'none',
                            borderRadius: '4px',
                            cursor: 'pointer',
                            fontSize: '12px',
                            fontWeight: '500'
                          }}
                        >
                          üìã –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞–Ω
                        </button>
                      </div>
                    ))}
                  </div>
                  
                  {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—è–¥–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è */}
                  <button
                    type="button"
                    onClick={() => {
                      if (appointment) {
                        navigate(`/treatment-orders/create?appointment_id=${appointment.id}`);
                      } else if (existingPatient) {
                        navigate(`/treatment-orders/create?patient_id=${existingPatient.id}`);
                      }
                    }}
                    style={{
                      padding: '8px 16px',
                      backgroundColor: '#059669',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '500',
                      marginTop: '12px'
                    }}
                  >
                    üìã –°–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥
                  </button>
                </div>
              ) : (
                <div>
                  <div style={{ marginBottom: '12px', fontSize: '14px', color: '#64748b' }}>
                    –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω
                  </div>
                  <button
                    type="button"
                    onClick={() => {
                      if (onCreateTreatmentPlan) {
                        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–æ—Ä–º—ã
                        const patientFromForm: Patient = {
                          id: existingPatient?.id || 0,
                          full_name: formData.full_name,
                          phone: formData.phone,
                          iin: formData.iin,
                          birth_date: formData.birth_date,
                          allergies: formData.allergies,
                          chronic_diseases: formData.chronic_diseases,
                          contraindications: formData.contraindications,
                          special_notes: formData.special_notes,
                          created_at: new Date().toISOString().split('T')[0]
                        };
                        console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–æ—Ä–º—ã:', patientFromForm);
                        onCreateTreatmentPlan(patientFromForm);
                        onClose();
                      }
                    }}
                    style={{
                      padding: '8px 16px',
                      backgroundColor: '#2563eb',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '500'
                    }}
                  >
                    ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      if (appointment) {
                        navigate(`/treatment-orders/create?appointment_id=${appointment.id}`);
                      } else if (existingPatient) {
                        navigate(`/treatment-orders/create?patient_id=${existingPatient.id}`);
                      }
                    }}
                    style={{
                      padding: '8px 16px',
                      backgroundColor: '#059669',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '500',
                      marginLeft: '8px'
                    }}
                  >
                    üìã –°–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥
                  </button>
                </div>
              )}
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div style={{
            display: 'flex',
            justifyContent: 'flex-end',
            gap: '12px',
            paddingTop: '16px'
          }}>
            <button
              type="button"
              onClick={onClose}
              style={{
                padding: '8px 16px',
                color: '#374151',
                backgroundColor: '#f3f4f6',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '14px'
              }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={loading}
              style={{
                padding: '8px 16px',
                backgroundColor: loading ? '#9ca3af' : '#2563eb',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: loading ? 'not-allowed' : 'pointer',
                fontSize: '14px'
              }}
            >
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (appointment ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
            </button>
          </div>
        </form>
      </div>

      {/* Treatment Order Modal */}
      <TreatmentOrderModal
        isOpen={showTreatmentOrderModal}
        onClose={() => setShowTreatmentOrderModal(false)}
        patient={existingPatient}
        appointmentId={appointment?.id}
        onSuccess={() => {
          console.log('‚úÖ –ù–∞—Ä—è–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        }}
      />
    </div>
  );
};

export default AppointmentModal;
