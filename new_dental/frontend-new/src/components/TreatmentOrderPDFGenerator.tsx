import React from 'react';
import jsPDF from 'jspdf';
import type { TreatmentOrder } from '../types/treatmentOrder';

interface Patient {
  id: number;
  full_name: string;
  phone: string;
  iin: string;
  birth_date?: string;
}

interface Service {
  id: number;
  name: string;
  price: number;
  description?: string;
}

interface TreatmentOrderPDFGeneratorProps {
  treatmentOrder: TreatmentOrder;
  patient: Patient;
  services: Service[];
}

const TreatmentOrderPDFGenerator: React.FC<TreatmentOrderPDFGeneratorProps> = ({
  treatmentOrder,
  patient,
  services
}) => {
  const generatePDF = () => {
    const doc = new jsPDF();
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('–ù–ê–†–Ø–î –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–¢–û–ú–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –£–°–õ–£–ì', 20, 30);
    
    // –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    doc.setLineWidth(0.5);
    doc.line(20, 35, 190, 35);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text('–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ "DentalCare"', 20, 50);
    doc.text('–ê–¥—Ä–µ—Å: –≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è, 150', 20, 58);
    doc.text('–¢–µ–ª–µ—Ñ–æ–Ω: +7 (727) 123-45-67', 20, 66);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('–î–ê–ù–ù–´–ï –ü–ê–¶–ò–ï–ù–¢–ê:', 20, 85);
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    doc.text(`–§–ò–û: ${patient.full_name}`, 20, 95);
    doc.text(`–ò–ò–ù: ${patient.iin}`, 20, 103);
    doc.text(`–¢–µ–ª–µ—Ñ–æ–Ω: ${patient.phone}`, 20, 111);
    doc.text(`–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${patient.birth_date}`, 20, 119);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—è–¥–µ
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ê–†–Ø–î–ï:', 20, 140);
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    doc.text(`–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥–∞: #${treatmentOrder.id}`, 20, 150);
    doc.text(`–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(treatmentOrder.created_at).toLocaleDateString('ru-RU')}`, 20, 158);
    doc.text(`–°—Ç–∞—Ç—É—Å: ${treatmentOrder.status}`, 20, 166);
    
    // –£—Å–ª—É–≥–∏
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('–ü–ï–†–ï–ß–ï–ù–¨ –£–°–õ–£–ì:', 20, 185);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.text('‚Ññ', 20, 195);
    doc.text('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏', 35, 195);
    doc.text('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 120, 195);
    doc.text('–¶–µ–Ω–∞ –∑–∞ –µ–¥.', 150, 195);
    doc.text('–°—É–º–º–∞', 175, 195);
    
    // –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    doc.setLineWidth(0.3);
    doc.line(20, 197, 190, 197);
    
    let yPosition = 205;
    let totalAmount = 0;
    
    doc.setFont('helvetica', 'normal');
    
    treatmentOrder.services.forEach((serviceItem, index) => {
      const service = services.find(s => s.id === serviceItem.service_id);
      if (service) {
        const amount = serviceItem.quantity * Number(service.price);
        totalAmount += amount;
        
        doc.text((index + 1).toString(), 20, yPosition);
        doc.text(service.name, 35, yPosition);
        doc.text(serviceItem.quantity.toString(), 120, yPosition);
        doc.text(`${Number(service.price).toLocaleString()} ‚Ç∏`, 150, yPosition);
        doc.text(`${amount.toLocaleString()} ‚Ç∏`, 175, yPosition);
        
        yPosition += 8;
      }
    });
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
    doc.setLineWidth(0.3);
    doc.line(20, yPosition + 5, 190, yPosition + 5);
    
    doc.setFont('helvetica', 'bold');
    doc.text('–ò–¢–û–ì–û:', 150, yPosition + 15);
    doc.text(`${totalAmount.toLocaleString()} ‚Ç∏`, 175, yPosition + 15);
    
    // –ü–æ–¥–ø–∏—Å–∏
    yPosition += 40;
    doc.setFont('helvetica', 'normal');
    doc.text('–í—Ä–∞—á: _________________', 20, yPosition);
    doc.text('–î–∞—Ç–∞: _________________', 120, yPosition);
    
    yPosition += 20;
    doc.text('–ü–∞—Ü–∏–µ–Ω—Ç: _________________', 20, yPosition);
    doc.text('–î–∞—Ç–∞: _________________', 120, yPosition);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const fileName = `–ù–∞—Ä—è–¥_${treatmentOrder.id}_${patient.full_name.replace(/\s+/g, '_')}.pdf`;
    doc.save(fileName);
  };

  return (
    <button
      onClick={generatePDF}
      style={{
        backgroundColor: '#dc2626',
        color: 'white',
        border: 'none',
        borderRadius: '8px',
        padding: '12px 24px',
        fontSize: '14px',
        fontWeight: '600',
        cursor: 'pointer',
        display: 'flex',
        alignItems: 'center',
        gap: '8px',
        transition: 'all 0.2s ease',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}
      onMouseOver={(e) => {
        e.currentTarget.style.backgroundColor = '#b91c1c';
        e.currentTarget.style.transform = 'translateY(-1px)';
        e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
      }}
      onMouseOut={(e) => {
        e.currentTarget.style.backgroundColor = '#dc2626';
        e.currentTarget.style.transform = 'translateY(0)';
        e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
      }}
    >
      üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
    </button>
  );
};

export default TreatmentOrderPDFGenerator;
