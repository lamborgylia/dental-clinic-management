import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import api from '../services/api';
import TeethMap from '../components/TeethMap';

interface Service {
  id: number;
  name: string;
  price: number;
  description?: string;
}

interface Patient {
  id: number;
  full_name: string;
  phone: string;
  birth_date?: string;
  address?: string;
  email?: string;
}

interface TreatmentPlan {
  id: number;
  patient_id: number;
  doctor_id: number;
  diagnosis: string;
  notes: string;
  status: string;
  created_at: string;
  updated_at?: string;
  patient_name?: string;
  services?: Service[];
  total_cost?: number;
  selected_teeth?: number[];
  teeth_services?: Record<number, number[]>;
  teethServices?: Record<number, number[]>;
  toothServicesData?: any[];
  treated_teeth?: number[];
  patient_allergies?: string;
  patient_chronic_diseases?: string;
  patient_contraindications?: string;
  patient_special_notes?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const isMobile = () => {
  return window.innerWidth <= 768;
};

// –ú–æ–±–∏–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
const MobileTreatmentPlanPage: React.FC<{
  editingTreatmentPlan: TreatmentPlan | null;
  services: Service[];
  teethServices: Record<number, number[]>;
  isLoading: boolean;
  isSaving: boolean;
  teethMapRef: React.RefObject<any>;
  selectedToothForServices: number | null;
  toothServicesModal: Service[];
  toothServiceStatuses: Record<number, string>;
  formatDateTime: (dateString: string | null | undefined) => string;
  handleToothClick: (toothId: number, toothServices: Service[], serviceStatuses: Record<number, string>) => void;
  handleUpdateServiceStatus: (toothId: number, serviceId: number, status: string) => Promise<void>;
  handleRemoveServiceFromTooth: (toothId: number, serviceId: number) => Promise<void>;
  handleToothServicesChange: (newToothServices: any[]) => void;
  saveTreatmentPlan: () => Promise<void>;
  navigate: (path: string) => void;
  setEditingTreatmentPlan: React.Dispatch<React.SetStateAction<TreatmentPlan | null>>;
}> = ({
  editingTreatmentPlan,
  services,
  teethServices,
  isLoading,
  isSaving,
  teethMapRef,
  selectedToothForServices,
  toothServicesModal,
  toothServiceStatuses,
  formatDateTime,
  handleToothClick,
  handleUpdateServiceStatus,
  handleRemoveServiceFromTooth,
  handleToothServicesChange,
  saveTreatmentPlan,
  navigate,
  setEditingTreatmentPlan
}) => {
  if (isLoading) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        backgroundColor: '#f8fafc'
      }}>
        <div style={{
          textAlign: 'center',
          padding: '2rem',
          backgroundColor: 'white',
          borderRadius: '12px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
        }}>
          <div style={{
            width: '40px',
            height: '40px',
            border: '4px solid #e5e7eb',
            borderTop: '4px solid #3b82f6',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 1rem'
          }}></div>
          <p style={{ color: '#6b7280', fontSize: '1rem' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è...</p>
        </div>
      </div>
    );
  }

  if (!editingTreatmentPlan) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        backgroundColor: '#f8fafc'
      }}>
        <div style={{
          textAlign: 'center',
          padding: '2rem',
          backgroundColor: 'white',
          borderRadius: '12px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
        }}>
          <p style={{ color: '#ef4444', fontSize: '1rem' }}>–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </div>
      </div>
    );
  }

  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: '#f8fafc',
      padding: '1rem'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '1rem',
        marginBottom: '1rem',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
      }}>
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          marginBottom: '0.5rem'
        }}>
          <h1 style={{
            fontSize: '1.25rem',
            fontWeight: '600',
            color: '#1f2937',
            margin: 0
          }}>
            üìã –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è #{editingTreatmentPlan.id}
          </h1>
          <button
            onClick={() => navigate('/doctor')}
            style={{
              padding: '0.5rem',
              backgroundColor: '#6b7280',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.875rem'
            }}
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>
        <p style={{
          color: '#6b7280',
          fontSize: '0.875rem',
          margin: 0
        }}>
          –ü–∞—Ü–∏–µ–Ω—Ç: {editingTreatmentPlan.patient_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}
        </p>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ */}
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '1rem',
        marginBottom: '1rem',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{
          fontSize: '1rem',
          fontWeight: '600',
          color: '#1f2937',
          marginBottom: '0.75rem',
          margin: 0
        }}>
          üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
        </h3>
        
        <div style={{ marginBottom: '0.5rem' }}>
          <label style={{
            display: 'block',
            fontSize: '0.75rem',
            fontWeight: '500',
            color: '#6b7280',
            marginBottom: '0.25rem'
          }}>
            –ê–ª–ª–µ—Ä–≥–∏–∏:
          </label>
          <textarea
            value={editingTreatmentPlan.patient_allergies || ''}
            onChange={(e) => setEditingTreatmentPlan(prev => prev ? {
              ...prev,
              patient_allergies: e.target.value
            } : null)}
            style={{
              width: '100%',
              padding: '0.5rem',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '0.875rem',
              resize: 'vertical',
              minHeight: '60px',
              boxSizing: 'border-box'
            }}
            placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
          />
        </div>

        <div style={{ marginBottom: '0.5rem' }}>
          <label style={{
            display: 'block',
            fontSize: '0.75rem',
            fontWeight: '500',
            color: '#6b7280',
            marginBottom: '0.25rem'
          }}>
            –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:
          </label>
          <textarea
            value={editingTreatmentPlan.patient_chronic_diseases || ''}
            onChange={(e) => setEditingTreatmentPlan(prev => prev ? {
              ...prev,
              patient_chronic_diseases: e.target.value
            } : null)}
            style={{
              width: '100%',
              padding: '0.5rem',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '0.875rem',
              resize: 'vertical',
              minHeight: '60px',
              boxSizing: 'border-box'
            }}
            placeholder="–£–∫–∞–∂–∏—Ç–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è..."
          />
        </div>

        <div style={{ marginBottom: '0.5rem' }}>
          <label style={{
            display: 'block',
            fontSize: '0.75rem',
            fontWeight: '500',
            color: '#6b7280',
            marginBottom: '0.25rem'
          }}>
            –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:
          </label>
          <textarea
            value={editingTreatmentPlan.patient_contraindications || ''}
            onChange={(e) => setEditingTreatmentPlan(prev => prev ? {
              ...prev,
              patient_contraindications: e.target.value
            } : null)}
            style={{
              width: '100%',
              padding: '0.5rem',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '0.875rem',
              resize: 'vertical',
              minHeight: '60px',
              boxSizing: 'border-box'
            }}
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è..."
          />
        </div>

        <div>
          <label style={{
            display: 'block',
            fontSize: '0.75rem',
            fontWeight: '500',
            color: '#6b7280',
            marginBottom: '0.25rem'
          }}>
            –û—Å–æ–±—ã–µ –æ—Ç–º–µ—Ç–∫–∏:
          </label>
          <textarea
            value={editingTreatmentPlan.patient_special_notes || ''}
            onChange={(e) => setEditingTreatmentPlan(prev => prev ? {
              ...prev,
              patient_special_notes: e.target.value
            } : null)}
            style={{
              width: '100%',
              padding: '0.5rem',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '0.875rem',
              resize: 'vertical',
              minHeight: '60px',
              boxSizing: 'border-box'
            }}
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏..."
          />
        </div>
      </div>

      {/* –ö–∞—Ä—Ç–∞ –∑—É–±–æ–≤ */}
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '1rem',
        marginBottom: '1rem',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{
          fontSize: '1rem',
          fontWeight: '600',
          color: '#1f2937',
          marginBottom: '0.75rem',
          margin: 0
        }}>
          ü¶∑ –ö–∞—Ä—Ç–∞ –∑—É–±–æ–≤
        </h3>
        
        <TeethMap
          ref={teethMapRef}
          services={services}
          selectedTeeth={editingTreatmentPlan.selected_teeth || []}
          toothServices={editingTreatmentPlan.toothServicesData || []}
          treatedTeeth={editingTreatmentPlan.treated_teeth || []}
          treatmentTeeth={Object.keys(editingTreatmentPlan.teethServices || {}).map(Number)}
          onToothClick={handleToothClick}
          onUpdateServiceStatus={handleUpdateServiceStatus}
          onToothServicesChange={handleToothServicesChange}
          onToothSelect={(toothId) => {
            console.log('ü¶∑ –í—ã–±—Ä–∞–Ω –∑—É–±:', toothId);
            
            if (editingTreatmentPlan) {
              const currentSelectedTeeth = editingTreatmentPlan.selected_teeth || [];
              let newSelectedTeeth: number[];
              
              if (currentSelectedTeeth.includes(toothId)) {
                newSelectedTeeth = currentSelectedTeeth.filter(id => id !== toothId);
              } else {
                newSelectedTeeth = [...currentSelectedTeeth, toothId];
              }
              
              setEditingTreatmentPlan({
                ...editingTreatmentPlan,
                selected_teeth: newSelectedTeeth
              });
            }
          }}
          onAddServiceToTooth={(toothId, serviceId) => {
            console.log('ü¶∑ –î–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞ –∫ –∑—É–±—É:', toothId, serviceId);
            setTeethServices(prev => ({
              ...prev,
              [toothId]: [...(prev[toothId] || []), serviceId]
            }));
          }}
          onClearSelection={() => {
            console.log('ü¶∑ –û—á–∏—â–µ–Ω –≤—ã–±–æ—Ä –∑—É–±–æ–≤');
          }}
        />
      </div>

      {/* –î–∏–∞–≥–Ω–æ–∑ –∏ –∑–∞–º–µ—Ç–∫–∏ */}
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '1rem',
        marginBottom: '1rem',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{
          fontSize: '1rem',
          fontWeight: '600',
          color: '#1f2937',
          marginBottom: '0.75rem',
          margin: 0
        }}>
          üìù –î–∏–∞–≥–Ω–æ–∑ –∏ –∑–∞–º–µ—Ç–∫–∏
        </h3>
        
        <div style={{ marginBottom: '0.75rem' }}>
          <label style={{
            display: 'block',
            fontSize: '0.75rem',
            fontWeight: '500',
            color: '#6b7280',
            marginBottom: '0.25rem'
          }}>
            –î–∏–∞–≥–Ω–æ–∑:
          </label>
          <textarea
            value={editingTreatmentPlan.diagnosis || ''}
            onChange={(e) => setEditingTreatmentPlan(prev => prev ? {
              ...prev,
              diagnosis: e.target.value
            } : null)}
            style={{
              width: '100%',
              padding: '0.5rem',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '0.875rem',
              resize: 'vertical',
              minHeight: '80px',
              boxSizing: 'border-box'
            }}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑..."
          />
        </div>

        <div>
          <label style={{
            display: 'block',
            fontSize: '0.75rem',
            fontWeight: '500',
            color: '#6b7280',
            marginBottom: '0.25rem'
          }}>
            –ó–∞–º–µ—Ç–∫–∏ –≤—Ä–∞—á–∞:
          </label>
          <textarea
            value={editingTreatmentPlan.notes || ''}
            onChange={(e) => setEditingTreatmentPlan(prev => prev ? {
              ...prev,
              notes: e.target.value
            } : null)}
            style={{
              width: '100%',
              padding: '0.5rem',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '0.875rem',
              resize: 'vertical',
              minHeight: '80px',
              boxSizing: 'border-box'
            }}
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤—Ä–∞—á–∞..."
          />
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '1rem',
        marginBottom: '1rem',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
      }}>
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          gap: '0.75rem'
        }}>
          <button
            onClick={saveTreatmentPlan}
            disabled={isSaving}
            style={{
              width: '100%',
              padding: '0.75rem',
              backgroundColor: isSaving ? '#9ca3af' : '#10b981',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: isSaving ? 'not-allowed' : 'pointer',
              fontSize: '0.875rem',
              fontWeight: '500',
              transition: 'all 0.2s ease'
            }}
          >
            {isSaving ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω'}
          </button>

          <button
            onClick={() => navigate('/doctor')}
            style={{
              width: '100%',
              padding: '0.75rem',
              backgroundColor: '#6b7280',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.875rem',
              fontWeight: '500',
              transition: 'all 0.2s ease'
            }}
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
          </button>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ */}
      {selectedToothForServices && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          padding: '1rem'
        }}>
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            width: '100%',
            maxWidth: '400px',
            maxHeight: '80vh',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column'
          }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
            <div style={{
              padding: '1rem',
              borderBottom: '1px solid #e5e7eb',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between'
            }}>
              <h3 style={{
                fontSize: '1rem',
                fontWeight: '600',
                color: '#1f2937',
                margin: 0
              }}>
                ü¶∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –∑—É–±–∞ {selectedToothForServices}
              </h3>
              <button
                onClick={() => {
                  setSelectedToothForServices(null);
                  setToothServicesModal([]);
                  setToothServiceStatuses({});
                }}
                style={{
                  padding: '0.5rem',
                  backgroundColor: '#f3f4f6',
                  color: '#6b7280',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: 'pointer',
                  fontSize: '1rem'
                }}
              >
                √ó
              </button>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ */}
            <div style={{
              flex: 1,
              overflow: 'auto',
              padding: '1rem'
            }}>
              {toothServicesModal.map(service => (
                <div key={service.id} style={{
                  padding: '0.75rem',
                  border: '1px solid #e5e7eb',
                  borderRadius: '8px',
                  marginBottom: '0.75rem',
                  backgroundColor: '#f9fafb'
                }}>
                  <div style={{
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '0.5rem'
                  }}>
                    <div>
                      <h4 style={{
                        fontSize: '0.875rem',
                        fontWeight: '600',
                        color: '#1f2937',
                        margin: 0,
                        marginBottom: '0.25rem'
                      }}>
                        {service.name}
                      </h4>
                      <p style={{
                        fontSize: '0.75rem',
                        color: '#6b7280',
                        margin: 0
                      }}>
                        {service.price} ‚Ç∏
                      </p>
                    </div>
                    <div style={{
                      display: 'flex',
                      gap: '0.5rem',
                      alignItems: 'center'
                    }}>
                      <select
                        value={toothServiceStatuses[service.id] || 'pending'}
                        onChange={(e) => handleUpdateServiceStatus(selectedToothForServices, service.id, e.target.value)}
                        style={{
                          flex: 1,
                          padding: '0.5rem',
                          border: '1px solid #d1d5db',
                          borderRadius: '6px',
                          fontSize: '0.75rem',
                          backgroundColor: 'white'
                        }}
                      >
                        <option value="pending">‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                        <option value="completed">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ</option>
                      </select>
                      <button
                        onClick={() => handleRemoveServiceFromTooth(selectedToothForServices, service.id)}
                        style={{
                          padding: '0.5rem',
                          backgroundColor: '#fef2f2',
                          color: '#dc2626',
                          border: 'none',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '0.75rem'
                        }}
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                </div>
              ))}

              {toothServicesModal.length === 0 && (
                <div style={{
                  textAlign: 'center',
                  padding: '2rem',
                  color: '#6b7280'
                }}>
                  <p style={{ margin: 0, fontSize: '0.875rem' }}>
                    –ù–∞ —ç—Ç–æ–º –∑—É–±–µ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
                  </p>
                </div>
              )}
            </div>

            {/* –§—É—Ç–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
            <div style={{
              padding: '1rem',
              borderTop: '1px solid #e5e7eb',
              backgroundColor: '#f9fafb'
            }}>
              <button
                onClick={() => {
                  setSelectedToothForServices(null);
                  setToothServicesModal([]);
                  setToothServiceStatuses({});
                }}
                style={{
                  width: '100%',
                  padding: '0.75rem',
                  backgroundColor: '#6b7280',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '0.875rem',
                  fontWeight: '500'
                }}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <style>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

const TreatmentPlanPage: React.FC = () => {
  const navigate = useNavigate();
  const { planId } = useParams<{ planId: string }>();
  
  const [editingTreatmentPlan, setEditingTreatmentPlan] = useState<TreatmentPlan | null>(null);
  const [services, setServices] = useState<Service[]>([]);
  const [patients, setPatients] = useState<Patient[]>([]);
  const [teethServices, setTeethServices] = useState<Record<number, number[]>>({});
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  
  const teethMapRef = useRef<any>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏
  const [selectedToothForServices, setSelectedToothForServices] = useState<number | null>(null);
  const [toothServicesModal, setToothServicesModal] = useState<Service[]>([]);
  const [toothServiceStatuses, setToothServiceStatuses] = useState<Record<number, string>>({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const [isMobileView, setIsMobileView] = useState(isMobile());

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  useEffect(() => {
    const handleResize = () => {
      setIsMobileView(isMobile());
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const formatDateTime = (dateString: string | null | undefined) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    try {
      const date = new Date(dateString);
      return date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
      return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑—É–±—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—Å–ª—É–≥
  const handleToothClick = (toothId: number, toothServices: Service[], serviceStatuses: Record<number, string>) => {
    console.log('ü¶∑ –ö–ª–∏–∫ –ø–æ –∑—É–±—É —Å —É—Å–ª—É–≥–∞–º–∏:', toothId, toothServices, serviceStatuses);
    setSelectedToothForServices(toothId);
    setToothServicesModal(toothServices);
    setToothServiceStatuses(serviceStatuses);
  };


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª—É–≥–∏
  const handleUpdateServiceStatus = async (toothId: number, serviceId: number, status: string) => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ª—É–≥–∏:', { toothId, serviceId, status });
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å ToothService –¥–ª—è —ç—Ç–æ–≥–æ –∑—É–±–∞
      const toothServiceData = editingTreatmentPlan?.toothServicesData?.find(ts => ts.toothId === toothId);
      if (!toothServiceData) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å ToothService –¥–ª—è –∑—É–±–∞:', toothId);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
      await api.patch(`/tooth-services/${toothServiceData.id}/service/${serviceId}/status`, null, {
        params: { status }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setToothServiceStatuses(prev => ({
        ...prev,
        [serviceId]: status
      }));

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–ª–∞–Ω–µ –ª–µ—á–µ–Ω–∏—è
      setEditingTreatmentPlan(prev => {
        if (!prev) return null;
        
        const updatedToothServicesData = prev.toothServicesData?.map(ts => {
          if (ts.toothId === toothId) {
            return {
              ...ts,
              serviceStatuses: {
                ...ts.serviceStatuses,
                [serviceId]: status
              }
            };
          }
          return ts;
        });

        return {
          ...prev,
          toothServicesData: updatedToothServicesData
        };
      });

      console.log('‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ª—É–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª—É–≥–∏:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ —Å –∑—É–±–∞
  const handleRemoveServiceFromTooth = async (toothId: number, serviceId: number) => {
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É —Å –∑—É–±–∞:', { toothId, serviceId });
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å ToothService –¥–ª—è —ç—Ç–æ–≥–æ –∑—É–±–∞
      const toothServiceData = editingTreatmentPlan?.toothServicesData?.find(ts => ts.toothId === toothId);
      if (!toothServiceData) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å ToothService –¥–ª—è –∑—É–±–∞:', toothId);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥, —É–±–∏—Ä–∞—è —É–¥–∞–ª—è–µ–º—É—é
      const updatedServiceIds = toothServiceData.services.filter(s => s.id !== serviceId).map(s => s.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
      await api.put(`/tooth-services/${toothServiceData.id}`, {
        service_ids: updatedServiceIds,
        service_statuses: Object.fromEntries(
          Object.entries(toothServiceData.serviceStatuses || {}).filter(([id]) => id !== serviceId.toString())
        )
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setToothServicesModal(prev => prev.filter(s => s.id !== serviceId));
      setToothServiceStatuses(prev => {
        const newStatuses = { ...prev };
        delete newStatuses[serviceId];
        return newStatuses;
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–ª–∞–Ω–µ –ª–µ—á–µ–Ω–∏—è
      setEditingTreatmentPlan(prev => {
        if (!prev) return null;
        
        const updatedToothServicesData = prev.toothServicesData?.map(ts => {
          if (ts.toothId === toothId) {
            return {
              ...ts,
              services: ts.services.filter(s => s.id !== serviceId),
              serviceStatuses: Object.fromEntries(
                Object.entries(ts.serviceStatuses || {}).filter(([id]) => id !== serviceId.toString())
              )
            };
          }
          return ts;
        });

        return {
          ...prev,
          toothServicesData: updatedToothServicesData
        };
      });

      console.log('‚úÖ –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞ —Å –∑—É–±–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ —Å –∑—É–±–∞:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª—É–≥ –Ω–∞ –∑—É–±–∞—Ö
  const handleToothServicesChange = (newToothServices: any[]) => {
    console.log('ü¶∑ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', newToothServices);
    
    const newTeethServices: Record<number, number[]> = {};
    newToothServices.forEach(ts => {
      newTeethServices[ts.toothId] = ts.services.map(s => s.id);
    });
    setTeethServices(newTeethServices);
    
    const newSelectedTeeth = newToothServices.map(ts => ts.toothId);
    setEditingTreatmentPlan(prev => prev ? {
      ...prev,
      teethServices: newTeethServices,
      toothServicesData: newToothServices,
      selected_teeth: newSelectedTeeth
    } : null);
  };

  useEffect(() => {
    fetchData();
  }, [planId]);

  const fetchData = async () => {
    try {
      setIsLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏
      const servicesRes = await api.get('/services/');
      setServices(servicesRes.data || []);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
      const patientsRes = await api.get('/patients/');
      setPatients(patientsRes.data?.patients || patientsRes.data || []);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
      if (planId) {
        const planRes = await api.get(`/treatment-plans/${planId}`);
        const plan = planRes.data;
        
        console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è:', plan);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö
        const toothServicesRes = await api.get(`/tooth-services/treatment-plan/${planId}`);
        const toothServicesData = toothServicesRes.data || [];
        
        console.log('ü¶∑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', toothServicesData);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const planTeethServices: Record<number, number[]> = {};
        const toothServicesForMap: any[] = [];
        
        toothServicesData.forEach((toothService: any) => {
          planTeethServices[toothService.tooth_id] = toothService.service_ids;
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è TeethMap
          const servicesForTooth = toothService.service_ids.map((serviceId: number) => 
            services.find(s => s.id === serviceId) || { id: serviceId, name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞', price: 0, category: '' }
          );
          
          toothServicesForMap.push({
            toothId: toothService.tooth_id,
            services: servicesForTooth,
            serviceStatuses: toothService.service_statuses || {}
          });
        });
        
        console.log('ü¶∑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö:', planTeethServices);
        console.log('ü¶∑ –î–∞–Ω–Ω—ã–µ –¥–ª—è TeethMap:', toothServicesForMap);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –ø–æ ID
        console.log('üë§ ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ø–ª–∞–Ω–µ:', plan.patient_id);
        
        let patient = null;
        try {
          const patientRes = await api.get(`/patients/${plan.patient_id}`);
          patient = patientRes.data;
          console.log('üë§ –ü–∞—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é:', patient);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
          // Fallback: –∏—â–µ–º –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
          const patientsArray = patientsRes.data?.patients || patientsRes.data || [];
          patient = patientsArray.find((p: Patient) => p.id === plan.patient_id);
          console.log('üë§ –ü–∞—Ü–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ (fallback):', patient);
        }
        
        const planWithDefaults = {
          ...plan,
          patient_name: patient?.full_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç',
          patient_allergies: plan.patient_allergies || '',
          patient_chronic_diseases: plan.patient_chronic_diseases || '',
          patient_contraindications: plan.patient_contraindications || '',
          patient_special_notes: plan.patient_special_notes || '',
          services: getPlanServices(plan),
          total_cost: getPlanTotalCost(plan),
          selected_teeth: [], // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
          teethServices: planTeethServices,
          toothServicesData: toothServicesForMap,
          treated_teeth: plan.treated_teeth || []
        };
        
        console.log('‚úÖ –ü–ª–∞–Ω —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:', planWithDefaults);
        setEditingTreatmentPlan(planWithDefaults);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö
        setTeethServices(planTeethServices);
        
        console.log('ü¶∑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ª—É–≥–∏ –¥–ª—è –∑—É–±–æ–≤:', planTeethServices);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥ –∏–∑ –ø–ª–∞–Ω–∞
  const getPlanServices = (plan: TreatmentPlan) => {
    if (plan.services && plan.services.length > 0) {
      return plan.services;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ teethServices
    const teethServices = plan.teethServices || {};
    const serviceIds = new Set<number>();
    
    Object.values(teethServices).forEach(toothServices => {
      toothServices.forEach(serviceId => serviceIds.add(serviceId));
    });
    
    return Array.from(serviceIds).map(serviceId => 
      services.find(s => s.id === serviceId) || { id: serviceId, name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞', price: 0 }
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞
  const getPlanTotalCost = (plan: TreatmentPlan) => {
    if (plan.total_cost && plan.total_cost > 0) {
      return plan.total_cost;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª—É–≥
    const teethServices = plan.teethServices || {};
    let totalCost = 0;
    
    Object.values(teethServices).forEach(toothServices => {
      toothServices.forEach(serviceId => {
        const service = services.find(s => s.id === serviceId);
        if (service) {
          totalCost += service.price;
        }
      });
    });
    
    return totalCost;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞
  const getPlanSelectedTeeth = (plan: TreatmentPlan) => {
    console.log('ü¶∑ getPlanSelectedTeeth –¥–ª—è –ø–ª–∞–Ω–∞', plan.id, ':', plan.selected_teeth);
    console.log('ü¶∑ –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω:', plan);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å selected_teeth, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (plan.selected_teeth && plan.selected_teeth.length > 0) {
      console.log('ü¶∑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º selected_teeth:', plan.selected_teeth);
      return plan.selected_teeth;
    }
    
    // –ò–Ω–∞—á–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑—É–±—ã –∏–∑ teethServices
    const teethServices = plan.teethServices || {};
    const teeth = Object.keys(teethServices).map(Number);
    console.log('ü¶∑ –ò–∑–≤–ª–µ—á–µ–Ω—ã –∑—É–±—ã –∏–∑ teethServices:', teeth);
    return teeth;
  };

  const saveTreatmentPlan = async () => {
    if (!editingTreatmentPlan) return;
    
    try {
      setIsSaving(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –≤ –ë–î
      const updatedPlan = {
        ...editingTreatmentPlan,
        services: getPlanServices(editingTreatmentPlan),
        total_cost: getPlanTotalCost(editingTreatmentPlan),
        selected_teeth: getPlanSelectedTeeth(editingTreatmentPlan),
        teethServices: editingTreatmentPlan.teethServices || {},
        toothServicesData: editingTreatmentPlan.toothServicesData || []
      };
      
      console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è:', updatedPlan);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –≤ –ë–î
      await api.put(`/treatment-plans/${planId}`, {
        diagnosis: updatedPlan.diagnosis,
        notes: updatedPlan.treatment_description || updatedPlan.notes,
        patient_allergies: updatedPlan.patient_allergies,
        patient_chronic_diseases: updatedPlan.patient_chronic_diseases,
        patient_contraindications: updatedPlan.patient_contraindications,
        patient_special_notes: updatedPlan.patient_special_notes,
        status: updatedPlan.status
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –≤ –ë–î
      try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        await api.delete(`/tooth-services/treatment-plan/${planId}`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const servicesWithTeeth = [];
        for (const [toothId, serviceIds] of Object.entries(teethServices)) {
          if (serviceIds.length > 0) {
            servicesWithTeeth.push({
              treatment_plan_id: parseInt(planId!),
              tooth_id: parseInt(toothId),
              service_ids: serviceIds
            });
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for (const serviceData of servicesWithTeeth) {
          await api.post('/tooth-services/', serviceData);
        }
        
        console.log('‚úÖ –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î');
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (teethMapRef.current) {
          teethMapRef.current.resetSelection();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∞, –æ—á–∏—â–∞—è selected_teeth
        setEditingTreatmentPlan(prev => prev ? {
          ...prev,
          selected_teeth: []
        } : null);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        alert('‚úÖ –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        navigate(-1);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑—É–±–∞—Ö –≤ –ë–î:', error);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è');
    } finally {
      setIsSaving(false);
    }
  };

  const markTeethAsTreated = (toothIds: number[]) => {
    if (!editingTreatmentPlan) return;
    
    const currentTreatedTeeth = editingTreatmentPlan.treated_teeth || [];
    const newTreatedTeeth = [...new Set([...currentTreatedTeeth, ...toothIds])];
    
    setEditingTreatmentPlan({
      ...editingTreatmentPlan,
      treated_teeth: newTreatedTeeth
    });
    
    console.log('‚úÖ –ó—É–±—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—ã–ª–µ—á–µ–Ω–Ω—ã–µ:', toothIds);
    console.log('ü¶∑ –í—Å–µ –≤—ã–ª–µ—á–µ–Ω–Ω—ã–µ –∑—É–±—ã:', newTreatedTeeth);
  };

  if (isLoading) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        fontSize: '1.2rem',
        color: '#6b7280'
      }}>
        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è...
      </div>
    );
  }

  if (!editingTreatmentPlan) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        fontSize: '1.2rem',
        color: '#ef4444'
      }}>
        –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω
      </div>
    );
  }

  // –ï—Å–ª–∏ –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è, —Ä–µ–Ω–¥–µ—Ä–∏–º –º–æ–±–∏–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (isMobileView) {
    return (
      <MobileTreatmentPlanPage
        editingTreatmentPlan={editingTreatmentPlan}
        services={services}
        teethServices={teethServices}
        isLoading={isLoading}
        isSaving={isSaving}
        teethMapRef={teethMapRef}
        selectedToothForServices={selectedToothForServices}
        toothServicesModal={toothServicesModal}
        toothServiceStatuses={toothServiceStatuses}
        formatDateTime={formatDateTime}
        handleToothClick={handleToothClick}
        handleUpdateServiceStatus={handleUpdateServiceStatus}
        handleRemoveServiceFromTooth={handleRemoveServiceFromTooth}
        handleToothServicesChange={handleToothServicesChange}
        saveTreatmentPlan={saveTreatmentPlan}
        navigate={navigate}
        setEditingTreatmentPlan={setEditingTreatmentPlan}
      />
    );
  }

  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: '#f8fafc',
      padding: '2rem'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        padding: '2rem',
        marginBottom: '2rem',
        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
        border: '1px solid #e5e7eb'
      }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '1rem'
        }}>
          <div>
            <h1 style={{
              fontSize: '2rem',
              fontWeight: '700',
              color: '#1f2937',
              margin: '0 0 0.5rem 0'
            }}>
              –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è #{editingTreatmentPlan.id}
            </h1>
            <p style={{
              fontSize: '1.1rem',
              color: '#6b7280',
              margin: 0
            }}>
              –ü–∞—Ü–∏–µ–Ω—Ç: {editingTreatmentPlan.patient_name}
            </p>
          </div>
          
          <div style={{
            display: 'flex',
            gap: '1rem'
          }}>
            <button
              onClick={() => navigate(-1)}
              style={{
                backgroundColor: '#6b7280',
                color: 'white',
                border: 'none',
                padding: '0.75rem 1.5rem',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '1rem',
                fontWeight: '500',
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = '#4b5563';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = '#6b7280';
              }}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            
            <button
              onClick={saveTreatmentPlan}
              disabled={isSaving}
              style={{
                backgroundColor: isSaving ? '#9ca3af' : '#059669',
                color: 'white',
                border: 'none',
                padding: '0.75rem 1.5rem',
                borderRadius: '8px',
                cursor: isSaving ? 'not-allowed' : 'pointer',
                fontSize: '1rem',
                fontWeight: '500',
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={(e) => {
                if (!isSaving) {
                  e.currentTarget.style.backgroundColor = '#047857';
                }
              }}
              onMouseLeave={(e) => {
                if (!isSaving) {
                  e.currentTarget.style.backgroundColor = '#059669';
                }
              }}
            >
              {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
          </div>
        </div>
        
        {/* –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∞ */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: '0.5rem',
          marginBottom: '1rem'
        }}>
          <span style={{
            fontSize: '0.875rem',
            fontWeight: '500',
            color: '#374151'
          }}>
            –°—Ç–∞—Ç—É—Å:
          </span>
          <select
            value={editingTreatmentPlan.status}
            onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, status: e.target.value})}
            style={{
              padding: '0.5rem',
              border: '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '0.875rem',
              backgroundColor: 'white'
            }}
          >
            <option value="active">–ê–∫—Ç–∏–≤–µ–Ω</option>
            <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
            <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
          </select>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: '1fr 1fr',
        gap: '2rem',
        maxWidth: '1400px',
        margin: '0 auto'
      }}>
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –∏ –¥–∏–∞–≥–Ω–æ–∑ */}
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          gap: '2rem'
        }}>
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '2rem',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e5e7eb'
          }}>
            <h2 style={{
              fontSize: '1.5rem',
              fontWeight: '600',
              color: '#1f2937',
              margin: '0 0 1.5rem 0'
            }}>
              üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
            </h2>
            
            <div style={{
              display: 'grid',
              gridTemplateColumns: '1fr 1fr',
              gap: '1rem',
              marginBottom: '1.5rem'
            }}>
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:
                </label>
                <input
                  type="text"
                  value={editingTreatmentPlan.patient_name || ''}
                  disabled
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    backgroundColor: '#f9fafb',
                    color: '#6b7280'
                  }}
                />
              </div>
              
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:
                </label>
                <input
                  type="text"
                  value={formatDateTime(editingTreatmentPlan.created_at)}
                  disabled
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    backgroundColor: '#f9fafb',
                    color: '#6b7280'
                  }}
                />
              </div>
              
              {/* –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
                </label>
                <input
                  type="text"
                  value={formatDateTime(editingTreatmentPlan.updated_at)}
                  disabled
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    backgroundColor: '#f9fafb',
                    color: '#6b7280'
                  }}
                />
              </div>
            </div>
            
            {/* –ê–Ω–∞–º–Ω–µ–∑ */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: '1fr 1fr',
              gap: '1rem'
            }}>
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –ê–ª–ª–µ—Ä–≥–∏–∏:
                </label>
                <textarea
                  value={editingTreatmentPlan.patient_allergies || ''}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_allergies: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    minHeight: '80px',
                    resize: 'vertical'
                  }}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
                />
              </div>
              
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:
                </label>
                <textarea
                  value={editingTreatmentPlan.patient_chronic_diseases || ''}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_chronic_diseases: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    minHeight: '80px',
                    resize: 'vertical'
                  }}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è..."
                />
              </div>
              
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:
                </label>
                <textarea
                  value={editingTreatmentPlan.patient_contraindications || ''}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_contraindications: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    minHeight: '80px',
                    resize: 'vertical'
                  }}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è..."
                />
              </div>
              
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –û—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:
                </label>
                <textarea
                  value={editingTreatmentPlan.patient_special_notes || ''}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_special_notes: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    minHeight: '80px',
                    resize: 'vertical'
                  }}
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
                />
              </div>
            </div>
          </div>

          {/* –î–∏–∞–≥–Ω–æ–∑ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '2rem',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e5e7eb'
          }}>
            <h2 style={{
              fontSize: '1.5rem',
              fontWeight: '600',
              color: '#1f2937',
              margin: '0 0 1.5rem 0'
            }}>
              ü©∫ –î–∏–∞–≥–Ω–æ–∑ –∏ –ª–µ—á–µ–Ω–∏–µ
            </h2>
            
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              gap: '1rem'
            }}>
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –î–∏–∞–≥–Ω–æ–∑:
                </label>
                <input
                  type="text"
                  value={editingTreatmentPlan.diagnosis}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, diagnosis: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem'
                  }}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑..."
                />
              </div>
              
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: '#374151'
                }}>
                  –û–ø–∏—Å–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è:
                </label>
                <textarea
                  value={editingTreatmentPlan.notes}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, notes: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    minHeight: '120px',
                    resize: 'vertical'
                  }}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è..."
                />
              </div>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ö–∞—Ä—Ç–∞ –∑—É–±–æ–≤ –∏ —É—Å–ª—É–≥–∏ */}
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          gap: '2rem'
        }}>
          {/* –ö–∞—Ä—Ç–∞ –∑—É–±–æ–≤ */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '2rem',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e5e7eb'
          }}>
            <h2 style={{
              fontSize: '1.5rem',
              fontWeight: '600',
              color: '#1f2937',
              margin: '0 0 1.5rem 0'
            }}>
              ü¶∑ –ö–∞—Ä—Ç–∞ –∑—É–±–æ–≤
            </h2>
            
            <TeethMap
              ref={teethMapRef}
              services={services}
              selectedTeeth={editingTreatmentPlan.selected_teeth || []}
              toothServices={editingTreatmentPlan.toothServicesData || []}
              treatedTeeth={editingTreatmentPlan.treated_teeth || []}
              treatmentTeeth={Object.keys(editingTreatmentPlan.teethServices || {}).map(Number)}
              onToothClick={handleToothClick}
              onUpdateServiceStatus={handleUpdateServiceStatus}
              onToothServicesChange={handleToothServicesChange}
              onToothSelect={(toothId) => {
                console.log('ü¶∑ –í—ã–±—Ä–∞–Ω –∑—É–±:', toothId);
                
                if (editingTreatmentPlan) {
                  const currentSelectedTeeth = editingTreatmentPlan.selected_teeth || [];
                  let newSelectedTeeth: number[];
                  
                  if (currentSelectedTeeth.includes(toothId)) {
                    newSelectedTeeth = currentSelectedTeeth.filter(id => id !== toothId);
                  } else {
                    newSelectedTeeth = [...currentSelectedTeeth, toothId];
                  }
                  
                  setEditingTreatmentPlan({
                    ...editingTreatmentPlan,
                    selected_teeth: newSelectedTeeth
                  });
                }
              }}
              onAddServiceToTooth={(toothId, serviceId) => {
                console.log('ü¶∑ –î–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞ –∫ –∑—É–±—É:', toothId, serviceId);
                setTeethServices(prev => ({
                  ...prev,
                  [toothId]: [...(prev[toothId] || []), serviceId]
                }));
              }}
              onClearSelection={() => {
                console.log('ü¶∑ –û—á–∏—â–µ–Ω –≤—ã–±–æ—Ä –∑—É–±–æ–≤');
              }}
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '2rem',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e5e7eb'
          }}>
            <h2 style={{
              fontSize: '1.5rem',
              fontWeight: '600',
              color: '#1f2937',
              margin: '0 0 1.5rem 0'
            }}>
              ‚ö° –î–µ–π—Å—Ç–≤–∏—è
            </h2>
            
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              gap: '1rem'
            }}>
              
              {/* –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º" */}
              {(() => {
                const teethWithServices = Object.keys(editingTreatmentPlan?.teethServices || {}).map(Number);
                const treatedTeeth = editingTreatmentPlan?.treated_teeth || [];
                const untreatedTeeth = teethWithServices.filter(toothId => !treatedTeeth.includes(toothId));
                
                return untreatedTeeth.length > 0 && (
                  <button
                    onClick={() => {
                      console.log('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –¥–ª—è –Ω–µ–≤—ã–ª–µ—á–µ–Ω–Ω—ã—Ö –∑—É–±–æ–≤:', untreatedTeeth);
                      alert(`üìÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –¥–ª—è –∑—É–±–æ–≤: ${untreatedTeeth.join(', ')}`);
                      navigate('/doctor');
                    }}
                    style={{
                      backgroundColor: '#2563eb',
                      color: 'white',
                      border: 'none',
                      padding: '1rem 1.5rem',
                      borderRadius: '8px',
                      cursor: 'pointer',
                      fontSize: '1rem',
                      fontWeight: '500',
                      boxShadow: '0 2px 4px rgba(37, 99, 235, 0.3)',
                      transition: 'all 0.2s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.backgroundColor = '#1d4ed8';
                      e.currentTarget.style.transform = 'translateY(-1px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.backgroundColor = '#2563eb';
                      e.currentTarget.style.transform = 'translateY(0)';
                    }}
                  >
                    üìÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –¥–ª—è –∑—É–±–æ–≤ {untreatedTeeth.join(', ')}
                  </button>
                );
              })()}
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞ –∑—É–±–µ */}
      {selectedToothForServices && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '2rem',
            maxWidth: '500px',
            width: '90%',
            maxHeight: '80vh',
            overflow: 'auto',
            boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '1.5rem'
            }}>
              <h3 style={{
                fontSize: '1.5rem',
                fontWeight: '600',
                color: '#1f2937',
                margin: 0
              }}>
                ü¶∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –∑—É–±–∞ {selectedToothForServices}
              </h3>
              <button
                onClick={() => {
                  setSelectedToothForServices(null);
                  setToothServicesModal([]);
                  setToothServiceStatuses({});
                }}
                style={{
                  backgroundColor: '#ef4444',
                  color: 'white',
                  border: 'none',
                  borderRadius: '50%',
                  width: '32px',
                  height: '32px',
                  cursor: 'pointer',
                  fontSize: '1.2rem',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
              >
                √ó
              </button>
            </div>

            <div style={{
              display: 'flex',
              flexDirection: 'column',
              gap: '1rem'
            }}>
              {toothServicesModal.map(service => (
                <div key={service.id} style={{
                  border: '1px solid #e5e7eb',
                  borderRadius: '8px',
                  padding: '1rem',
                  backgroundColor: '#f9fafb'
                }}>
                  <div style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    marginBottom: '0.5rem'
                  }}>
                    <div>
                      <h4 style={{
                        fontSize: '1.1rem',
                        fontWeight: '500',
                        color: '#1f2937',
                        margin: 0
                      }}>
                        {service.name}
                      </h4>
                      <p style={{
                        fontSize: '0.875rem',
                        color: '#6b7280',
                        margin: '0.25rem 0 0 0'
                      }}>
                        {service.category} ‚Ä¢ {service.price} ‚Ç∏
                      </p>
                    </div>
                    <div style={{
                      display: 'flex',
                      gap: '0.5rem',
                      alignItems: 'center'
                    }}>
                      <select
                        value={toothServiceStatuses[service.id] || 'pending'}
                        onChange={(e) => handleUpdateServiceStatus(selectedToothForServices, service.id, e.target.value)}
                        style={{
                          padding: '0.5rem',
                          borderRadius: '4px',
                          border: '1px solid #d1d5db',
                          backgroundColor: 'white',
                          fontSize: '0.875rem'
                        }}
                      >
                        <option value="pending">‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                        <option value="completed">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ</option>
                      </select>
                      <button
                        onClick={() => handleRemoveServiceFromTooth(selectedToothForServices, service.id)}
                        style={{
                          backgroundColor: '#ef4444',
                          color: 'white',
                          border: 'none',
                          borderRadius: '4px',
                          padding: '0.5rem',
                          cursor: 'pointer',
                          fontSize: '0.875rem'
                        }}
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                </div>
              ))}

              {toothServicesModal.length === 0 && (
                <div style={{
                  textAlign: 'center',
                  padding: '2rem',
                  color: '#6b7280'
                }}>
                  <p>–ù–∞ —ç—Ç–æ–º –∑—É–±–µ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥</p>
                </div>
              )}
            </div>

            <div style={{
              marginTop: '1.5rem',
              paddingTop: '1rem',
              borderTop: '1px solid #e5e7eb',
              display: 'flex',
              justifyContent: 'flex-end'
            }}>
              <button
                onClick={() => {
                  setSelectedToothForServices(null);
                  setToothServicesModal([]);
                  setToothServiceStatuses({});
                }}
                style={{
                  backgroundColor: '#6b7280',
                  color: 'white',
                  border: 'none',
                  padding: '0.75rem 1.5rem',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '1rem',
                  fontWeight: '500'
                }}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TreatmentPlanPage;
