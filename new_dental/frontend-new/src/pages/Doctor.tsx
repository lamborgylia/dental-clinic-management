import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import api from '../services/api';
import TeethMap from '../components/TeethMap';
import CalendarSwitcher from '../components/CalendarSwitcher';
import { clinicPatientsApi } from '../services/clinicPatientsApi';
import type { ClinicPatient, DoctorStats } from '../services/clinicPatientsApi';
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä—è–º–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
interface Patient {
  id: number;
  full_name: string;
  phone: string;
  iin: string;
  birth_date: string;
  allergies: string;
  chronic_diseases: string;
  contraindications: string;
  special_notes: string;
  created_at: string;
}









interface TreatmentPlan {
  id: number;
  patient_id: number;
  patient_name: string;
  patient_phone: string;
  patient_iin: string;
  patient_birth_date: string;
  patient_allergies: string;
  patient_chronic_diseases: string;
  patient_contraindications: string;
  patient_special_notes: string;
  diagnosis: string;
  treatment_description: string;
  created_at: string;
  status: string;
  services: number[]; // ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
  total_cost: number; // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞–Ω–∞
  selected_teeth: number[]; // ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤
  teethServices?: Record<number, number[]>; // –£—Å–ª—É–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑—É–±–∞: {–∑—É–±: [—É—Å–ª—É–≥–∏]}
  teeth_services?: Record<number, number[]>; // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –æ—Ç API
  // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  toothServicesData?: Array<{
    toothId: number;
    services: Array<{
      id: number;
      name: string;
      price: number;
      category: string;
    }>;
  }>;
}

interface Service {
  id: number;
  name: string;
  description: string;
  price: number;
  category: string;
  duration: string;
  complexity: string;
  is_active: boolean;
}

const Doctor: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [patients, setPatients] = useState<Patient[]>([]);
  const [clinicPatients, setClinicPatients] = useState<ClinicPatient[]>([]);
  const [doctorsStats, setDoctorsStats] = useState<DoctorStats[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDoctorId, setSelectedDoctorId] = useState<number | null>(null);
  const searchTimeoutRef = useRef<number | null>(null);
  const searchInputRef = useRef<HTMLInputElement>(null);
  const searchValueRef = useRef<string>('');

  const [treatmentPlans, setTreatmentPlans] = useState<TreatmentPlan[]>([]);
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'patients' | 'treatment-plans' | 'services' | 'calendar'>('patients');
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [showPatientModal, setShowPatientModal] = useState(false);
  const [showTreatmentPlanModal, setShowTreatmentPlanModal] = useState(false);

  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º
  const [editingPatient, setEditingPatient] = useState<Patient | null>(null);
  const [editingTreatmentPlan, setEditingTreatmentPlan] = useState<TreatmentPlan | null>(null);

  const [isCreatingPatient, setIsCreatingPatient] = useState(false);
  const [isCreatingTreatmentPlan, setIsCreatingTreatmentPlan] = useState(false);

  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∞–Ω–∞–º–Ω–µ–∑–∞ –≤ –º–æ–¥–∞–ª–∫–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
  const [isAnamnesisCollapsed, setIsAnamnesisCollapsed] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞ –∑—É–±–∞—Ö
  const [teethServices, setTeethServices] = useState<Record<number, number[]>>({});
  
  useEffect(() => {
    fetchData();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ tab –∏–∑ URL
  useEffect(() => {
    const tabParam = searchParams.get('tab');
    if (tabParam && ['patients', 'treatment-plans', 'services', 'calendar'].includes(tabParam)) {
      setActiveTab(tabParam as 'patients' | 'treatment-plans' | 'services' | 'calendar');
    }
  }, [searchParams]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —É—Å–ª—É–≥ –∏–∑ –ø–ª–∞–Ω–∞
  const getPlanServices = (plan: TreatmentPlan) => {
    console.log('üîç getPlanServices –¥–ª—è –ø–ª–∞–Ω–∞', plan.id, ':', plan.services);
    return plan.services || [];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞
  const getPlanTotalCost = (plan: TreatmentPlan) => {
    console.log('üí∞ getPlanTotalCost –¥–ª—è –ø–ª–∞–Ω–∞', plan.id, ':', plan.total_cost);
    return plan.total_cost || 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑—É–±–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞
  const getPlanSelectedTeeth = (plan: TreatmentPlan) => {
    console.log('ü¶∑ getPlanSelectedTeeth –¥–ª—è –ø–ª–∞–Ω–∞', plan.id, ':', plan.selected_teeth);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å selected_teeth, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (plan.selected_teeth && plan.selected_teeth.length > 0) {
      return plan.selected_teeth;
    }
    
    // –ò–Ω–∞—á–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑—É–±—ã –∏–∑ teeth_services –∏–ª–∏ teethServices
    const teethServices = plan.teeth_services || plan.teethServices || {};
    const teeth = Object.keys(teethServices).map(Number);
    console.log('ü¶∑ –ò–∑–≤–ª–µ—á–µ–Ω—ã –∑—É–±—ã –∏–∑ teeth_services:', teeth);
    return teeth;
  };

  const fetchData = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞—á–µ–π
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞—á–µ–π...');
      try {
        const doctorsStatsData = await clinicPatientsApi.getDoctorsStats();
        setDoctorsStats(doctorsStatsData);
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–∞—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', doctorsStatsData);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–∞—á–µ–π:', error);
        setDoctorsStats([]);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∫–ª–∏–Ω–∏–∫–∏ –∏–∑ –ë–î
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∫–ª–∏–Ω–∏–∫–∏ –∏–∑ –ë–î...');
      try {
        const clinicPatientsData = await clinicPatientsApi.getClinicPatients(1, 100);
        setClinicPatients(clinicPatientsData);
        console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç—ã –∫–ª–∏–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', clinicPatientsData);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∫–ª–∏–Ω–∏–∫–∏:', error);
        setClinicPatients([]);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î (—á–µ—Ä–µ–∑ –æ–±—â–∏–π api, same-host) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î...');
      const { data: patientsData } = await api.get('/patients/', { params: { page: 1, size: 200 } });
      if (patientsData && patientsData.patients) {
        setPatients(patientsData.patients);
        console.log('‚úÖ –í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', patientsData.patients);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        // Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        const testPatients = [
          {
            id: 1,
            full_name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            phone: '+7 (777) 123-45-67',
            iin: '030317123456',
            birth_date: '2003-03-17',
            allergies: '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –ø–µ–Ω–∏—Ü–∏–ª–ª–∏–Ω, –ª–∏–¥–æ–∫–∞–∏–Ω',
            chronic_diseases: '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç 2 —Ç–∏–ø–∞',
            contraindications: '–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ –ø–æ–¥ –æ–±—â–∏–º –Ω–∞—Ä–∫–æ–∑–æ–º',
            special_notes: '–ü–∞—Ü–∏–µ–Ω—Ç–∫–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–∞, 3-–π —Ç—Ä–∏–º–µ—Å—Ç—Ä',
            created_at: '2024-01-15'
          },
          {
            id: 2,
            full_name: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
            phone: '+7 (777) 987-65-43',
            iin: '950512789012',
            birth_date: '1995-05-12',
            allergies: '–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π',
            chronic_diseases: '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è',
            contraindications: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ',
            special_notes: '–ü–∞—Ü–∏–µ–Ω—Ç–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–Ω—Ç–∏–∫–æ–∞–≥—É–ª—è–Ω—Ç—ã',
            created_at: '2024-01-16'
          }
        ];
        setPatients(testPatients);
      }
      
      const testTreatmentPlans = [
        {
          id: 1,
          patient_id: 1,
          patient_name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
          diagnosis: '–ö–∞—Ä–∏–µ—Å –∑—É–±–∞ 2.6',
          treatment_description: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–ª–æ–º–±—ã',
          created_at: '2024-01-10',
          status: 'active',
          services: [2, 3], // –õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ + –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã
          total_cost: 23000,
          selected_teeth: [26], // –ó—É–± 26 (2.6)
          teethServices: {
            26: [2, 3], // –ó—É–± 26: –ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ + —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã
            15: [] // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∑—É–±–∞ 15
          },
          toothServicesData: [
            {
              toothId: 26,
              services: [
                { id: 2, name: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞', price: 15000, category: 'therapy' },
                { id: 3, name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã', price: 8000, category: 'therapy' }
              ]
            }
          ]
        },
        {
          id: 2,
          patient_id: 2,
          patient_name: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
          diagnosis: '–ü—É–ª—å–ø–∏—Ç –∑—É–±–∞ 1.5',
          treatment_description: '–õ–µ—á–µ–Ω–∏–µ –ø—É–ª—å–ø–∏—Ç–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
          created_at: '2024-01-12',
          status: 'completed',
          services: [1, 2, 3], // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –õ–µ—á–µ–Ω–∏–µ + –ü–ª–æ–º–±–∞
          total_cost: 28000,
          selected_teeth: [15], // –ó—É–± 15 (1.5)
          teethServices: {
            26: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∑—É–±–∞ 26
            15: [1, 2, 3] // –ó—É–± 15: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –ª–µ—á–µ–Ω–∏–µ + –ø–ª–æ–º–±–∞
          },
          toothServicesData: [
            {
              toothId: 15,
              services: [
                { id: 1, name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞', price: 5000, category: 'therapy' },
                { id: 2, name: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞', price: 15000, category: 'therapy' },
                { id: 3, name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã', price: 8000, category: 'therapy' }
              ]
            }
          ]
        }
      ];

      const testServices = [
        {
          id: 1,
          name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞',
          description: '–ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
          price: 5000,
          category: 'therapy',
          duration: '30 –º–∏–Ω—É—Ç',
          complexity: 'low',
          is_active: true
        },
        {
          id: 2,
          name: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞',
          description: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–ª–æ–º–±—ã',
          price: 15000,
          category: 'therapy',
          duration: '45 –º–∏–Ω—É—Ç',
          complexity: 'medium',
          is_active: true
        },
        {
          id: 3,
          name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã',
          description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–µ—Ç–æ–≤–æ–π –ø–ª–æ–º–±—ã',
          price: 8000,
          category: 'therapy',
          duration: '30 –º–∏–Ω—É—Ç',
          complexity: 'medium',
          is_active: true
        },
        {
          id: 4,
          name: '–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞',
          description: '–ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞',
          price: 12000,
          category: 'surgery',
          duration: '20 –º–∏–Ω—É—Ç',
          complexity: 'high',
          is_active: true
        }
      ];

      // setAppointments(testAppointments);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –∏–∑ –ë–î
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –∏–∑ –ë–î...');
      try {
        const { data: treatmentPlansData } = await api.get('/treatment-plans/');
        if (treatmentPlansData && Array.isArray(treatmentPlansData)) {
          setTreatmentPlans(treatmentPlansData);
          console.log('‚úÖ –ü–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', treatmentPlansData);
          // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
          treatmentPlansData.forEach((plan, index) => {
            console.log(`üìã –ü–ª–∞–Ω ${index + 1}:`, {
              id: plan.id,
              services: plan.services,
              selected_teeth: plan.selected_teeth,
              teeth_services: plan.teeth_services,
              total_cost: plan.total_cost
            });
          });
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
        // Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        const testPlansWithDefaults = testTreatmentPlans.map(plan => ({
          ...plan,
          patient_phone: '',
          patient_iin: '',
          patient_birth_date: '',
          patient_allergies: '',
          patient_chronic_diseases: '',
          patient_contraindications: '',
          patient_special_notes: '',
          teethServices: plan.teethServices || {}, // –î–æ–±–∞–≤–ª—è–µ–º teethServices –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
          toothServicesData: plan.toothServicesData || [] // –î–æ–±–∞–≤–ª—è–µ–º toothServicesData –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        }));
        setTreatmentPlans(testPlansWithDefaults);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –ë–î
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –ë–î...');
      try {
        const { data: servicesData } = await api.get('/services/');
        if (servicesData && Array.isArray(servicesData)) {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TeethMap
          const servicesWithCategory = servicesData.map(service => ({
            ...service,
            category: 'therapy' // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î
          }));
          setServices(servicesWithCategory);
          console.log('‚úÖ –£—Å–ª—É–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', servicesWithCategory);
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
        setServices(testServices);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const testPatients = [
        {
          id: 1,
          full_name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
          phone: '+7 (777) 123-45-67',
          iin: '030317123456',
          birth_date: '2003-03-17',
          allergies: '–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –ø–µ–Ω–∏—Ü–∏–ª–ª–∏–Ω, –ª–∏–¥–æ–∫–∞–∏–Ω',
          chronic_diseases: '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç 2 —Ç–∏–ø–∞',
          contraindications: '–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ –ø–æ–¥ –æ–±—â–∏–º –Ω–∞—Ä–∫–æ–∑–æ–º',
          special_notes: '–ü–∞—Ü–∏–µ–Ω—Ç–∫–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–∞, 3-–π —Ç—Ä–∏–º–µ—Å—Ç—Ä',
          created_at: '2024-01-15'
        },
        {
          id: 2,
          full_name: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
          phone: '+7 (777) 987-65-43',
          iin: '950512789012',
          birth_date: '1995-05-12',
          allergies: '–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π',
          chronic_diseases: '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è',
          contraindications: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ',
          special_notes: '–ü–∞—Ü–∏–µ–Ω—Ç–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–Ω—Ç–∏–∫–æ–∞–≥—É–ª—è–Ω—Ç—ã',
          created_at: '2024-01-16'
        }
      ];
      
      const testTreatmentPlans = [
        {
          id: 1,
          patient_id: 1,
          patient_name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
          diagnosis: '–ö–∞—Ä–∏–µ—Å –∑—É–±–∞ 2.6',
          treatment_description: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–ª–æ–º–±—ã',
          created_at: '2024-01-10',
          status: 'active',
          services: [2, 3], // –õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ + –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã
          total_cost: 23000,
          selected_teeth: [26], // –ó—É–± 26 (2.6)
          teethServices: {
            26: [2, 3], // –ó—É–± 26: –ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ + —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã
            15: [] // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∑—É–±–∞ 15
          },
          toothServicesData: [
            {
              toothId: 26,
              services: [
                { id: 2, name: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞', price: 15000, category: 'therapy' },
                { id: 3, name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã', price: 8000, category: 'therapy' }
              ]
            }
          ]
        },
        {
          id: 2,
          patient_id: 2,
          patient_name: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
          diagnosis: '–ü—É–ª—å–ø–∏—Ç –∑—É–±–∞ 1.5',
          treatment_description: '–õ–µ—á–µ–Ω–∏–µ –ø—É–ª—å–ø–∏—Ç–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
          created_at: '2024-01-12',
          status: 'completed',
          services: [1, 2, 3], // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –õ–µ—á–µ–Ω–∏–µ + –ü–ª–æ–º–±–∞
          total_cost: 28000,
          selected_teeth: [15], // –ó—É–± 15 (1.5)
          teethServices: {
            26: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∑—É–±–∞ 26
            15: [1, 2, 3] // –ó—É–± 15: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è + –ª–µ—á–µ–Ω–∏–µ + –ø–ª–æ–º–±–∞
          },
          toothServicesData: [
            {
              toothId: 15,
              services: [
                { id: 1, name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞', price: 5000, category: 'therapy' },
                { id: 2, name: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞', price: 15000, category: 'therapy' },
                { id: 3, name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã', price: 8000, category: 'therapy' }
              ]
            }
          ]
        }
      ];

      const testServices = [
        {
          id: 1,
          name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞',
          description: '–ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
          price: 5000,
          category: 'therapy',
          duration: '30 –º–∏–Ω—É—Ç',
          complexity: 'low',
          is_active: true
        },
        {
          id: 2,
          name: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞',
          description: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–ª–æ–º–±—ã',
          price: 15000,
          category: 'therapy',
          duration: '45 –º–∏–Ω—É—Ç',
          complexity: 'medium',
          is_active: true
        },
        {
          id: 3,
          name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã',
          description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–µ—Ç–æ–≤–æ–π –ø–ª–æ–º–±—ã',
          price: 8000,
          category: 'therapy',
          duration: '30 –º–∏–Ω—É—Ç',
          complexity: 'medium',
          is_active: true
        },
        {
          id: 4,
          name: '–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞',
          description: '–ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞',
          price: 12000,
          category: 'surgery',
          duration: '20 –º–∏–Ω—É—Ç',
          complexity: 'high',
          is_active: true
        }
      ];

      setPatients(testPatients);
      // setAppointments(testAppointments);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –∏–∑ –ë–î
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –∏–∑ –ë–î (fallback)...');
      try {
        const { data: treatmentPlansData } = await api.get('/treatment-plans/');
        if (treatmentPlansData && Array.isArray(treatmentPlansData)) {
          setTreatmentPlans(treatmentPlansData);
          console.log('‚úÖ –ü–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î (fallback):', treatmentPlansData);
          // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
          treatmentPlansData.forEach((plan, index) => {
            console.log(`üìã –ü–ª–∞–Ω ${index + 1} (fallback):`, {
              id: plan.id,
              services: plan.services,
              selected_teeth: plan.selected_teeth,
              teeth_services: plan.teeth_services,
              total_cost: plan.total_cost
            });
          });
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è –∏–∑ –ë–î (fallback), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
        // Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        const testPlansWithDefaults = testTreatmentPlans.map(plan => ({
          ...plan,
          patient_phone: '',
          patient_iin: '',
          patient_birth_date: '',
          patient_allergies: '',
          patient_chronic_diseases: '',
          patient_contraindications: '',
          patient_special_notes: '',
          teethServices: plan.teethServices || {},
          toothServicesData: plan.toothServicesData || []
        }));
        setTreatmentPlans(testPlansWithDefaults);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –ë–î (fallback)
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –ë–î (fallback)...');
      try {
        const { data: servicesData } = await api.get('/services/');
        if (servicesData && Array.isArray(servicesData)) {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TeethMap
          const servicesWithCategory = servicesData.map(service => ({
            ...service,
            category: 'therapy' // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î
          }));
          setServices(servicesWithCategory);
          console.log('‚úÖ –£—Å–ª—É–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î (fallback):', servicesWithCategory);
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥ –∏–∑ –ë–î (fallback), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
        setServices(testServices);
      }
    } finally {
      setLoading(false);
    }
  };


  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏
  const handleCreatePatient = () => {
    setEditingPatient({
      id: 0,
      full_name: '',
      phone: '+7 ',
      iin: '',
      birth_date: '',
      allergies: '',
      chronic_diseases: '',
      contraindications: '',
      special_notes: '',
      created_at: ''
    });
    setIsCreatingPatient(true);
    setShowPatientModal(true);
  };

  const handleRemovePatientFromClinic = async (clinicPatientId: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –∫–ª–∏–Ω–∏–∫–∏?')) {
      try {
        await clinicPatientsApi.removePatientFromClinic(clinicPatientId);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∫–ª–∏–Ω–∏–∫–∏
        const updatedClinicPatients = clinicPatients.filter(cp => cp.id !== clinicPatientId);
        setClinicPatients(updatedClinicPatients);
        console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–ª–∏–Ω–∏–∫–∏');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –∫–ª–∏–Ω–∏–∫–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –∫–ª–∏–Ω–∏–∫–∏');
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
  const searchPatients = useCallback(async (page: number = 1) => {
    try {
      setLoading(true);
      
      // –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ ref
      let normalizedSearch = searchValueRef.current?.trim();
      if (normalizedSearch) {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        normalizedSearch = normalizedSearch.replace(/\s+/g, ' ').trim();
      }
      
      const clinicPatientsData = await clinicPatientsApi.getClinicPatients(
        page, 
        100, 
        selectedDoctorId || undefined, 
        normalizedSearch || undefined
      );
      setClinicPatients(clinicPatientsData);
      console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', clinicPatientsData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', error);
      setClinicPatients([]);
    } finally {
      setLoading(false);
    }
  }, [selectedDoctorId]);



  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤—Ä–∞—á—É
  const handleDoctorFilterChange = (doctorId: number | null) => {
    setSelectedDoctorId(doctorId);
    searchPatients(1);
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const clearFilters = () => {
    searchValueRef.current = '';
    setSearchQuery('');
    setSelectedDoctorId(null);
    searchPatients(1);
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
  const SearchInput = React.memo(() => {
    const [localValue, setLocalValue] = useState(searchQuery);
    
    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
      const value = e.target.value;
      setLocalValue(value);
      searchValueRef.current = value;
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
      if (!value.trim()) {
        setSearchQuery('');
        searchPatients(1);
        return;
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
      searchTimeoutRef.current = setTimeout(() => {
        setSearchQuery(value);
        searchPatients(1);
      }, 300);
    }, [searchPatients]);
    
    return (
      <input
        ref={searchInputRef}
        type="text"
        placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –ò–ò–ù (–ª—é–±–∞—è —á–∞—Å—Ç—å)..."
        value={localValue}
        onChange={handleChange}
        style={{
          width: '100%',
          padding: 'clamp(0.4rem, 2vw, 0.5rem)',
          border: '1px solid #d1d5db',
          borderRadius: '0.375rem',
          fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
          outline: 'none',
          transition: 'border-color 0.2s'
        }}
        onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
        onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
      />
    );
  });

  const savePatient = async () => {
    if (!editingPatient) return;
    try {
      if (isCreatingPatient) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ë–î
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ë–î:', editingPatient);
        
        const { data: newPatient } = await api.post('/patients/', {
          full_name: editingPatient.full_name,
          phone: editingPatient.phone,
          iin: editingPatient.iin,
          birth_date: editingPatient.birth_date,
          allergies: editingPatient.allergies || '',
          chronic_diseases: editingPatient.chronic_diseases || '',
          contraindications: editingPatient.contraindications || '',
          special_notes: editingPatient.special_notes || ''
        });

        if (newPatient) {
          console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', newPatient);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setPatients([...patients, newPatient]);
          
          setShowPatientModal(false);
          setEditingPatient(null);
          setIsCreatingPatient(false);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞');
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞');
        }
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ë–î
        console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ë–î:', editingPatient);
        
        const { data: updatedPatient } = await api.put(`/patients/${editingPatient.id}`, {
          full_name: editingPatient.full_name,
          phone: editingPatient.phone,
          iin: editingPatient.iin,
          birth_date: editingPatient.birth_date,
          allergies: editingPatient.allergies || '',
          chronic_diseases: editingPatient.chronic_diseases || '',
          contraindications: editingPatient.contraindications || '',
          special_notes: editingPatient.special_notes || ''
        });

        if (updatedPatient) {
          console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:', updatedPatient);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
          setPatients(patients.map(p => 
            p.id === editingPatient.id ? updatedPatient : p
          ));
          
          setShowPatientModal(false);
          setEditingPatient(null);
          setIsCreatingPatient(false);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞');
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞');
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞–º–∏ –ª–µ—á–µ–Ω–∏—è
  const handleCreateTreatmentPlan = () => {
    setEditingTreatmentPlan({
      id: 0,
      patient_id: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      patient_name: '',
      patient_phone: '',
      patient_iin: '',
      patient_birth_date: '',
      patient_allergies: '',
      patient_chronic_diseases: '',
      patient_contraindications: '',
      patient_special_notes: '',
      diagnosis: '',
      treatment_description: '',
      created_at: '',
      status: 'active',
      services: [],
      total_cost: 0,
      selected_teeth: [],
      teethServices: {}
    });
    setIsCreatingTreatmentPlan(true);
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    setTeethServices({});
    
    setShowTreatmentPlanModal(true);
  };

  const handleEditTreatmentPlan = (plan: TreatmentPlan) => {
    console.log('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è:', plan);
    console.log('üîç –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–º–Ω–µ–∑–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º –ø–ª–∞–Ω–µ:');
    console.log('  - patient_allergies:', plan.patient_allergies);
    console.log('  - patient_chronic_diseases:', plan.patient_chronic_diseases);
    console.log('  - patient_contraindications:', plan.patient_contraindications);
    console.log('  - patient_special_notes:', plan.patient_special_notes);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –ø–ª–∞–Ω–∞ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
    const planWithDefaults = {
      ...plan,
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
      patient_name: plan.patient_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç',
      patient_phone: plan.patient_phone || '',
      patient_iin: plan.patient_iin || '',
      patient_birth_date: plan.patient_birth_date || '',
      patient_allergies: plan.patient_allergies || '',
      patient_chronic_diseases: plan.patient_chronic_diseases || '',
      patient_contraindications: plan.patient_contraindications || '',
      patient_special_notes: plan.patient_special_notes || '',
      services: getPlanServices(plan),
      total_cost: getPlanTotalCost(plan),
      selected_teeth: getPlanSelectedTeeth(plan)
    };
    
    console.log('‚úÖ –ü–ª–∞–Ω —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', planWithDefaults);
    setEditingTreatmentPlan(planWithDefaults);
    setIsCreatingTreatmentPlan(false);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø–ª–∞–Ω–∞
    const planTeethServices: Record<number, number[]> = plan.teeth_services || plan.teethServices || {};
    const selectedTeeth = getPlanSelectedTeeth(plan);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º teethServices –∏–∑ –ø–ª–∞–Ω–∞
    setTeethServices(planTeethServices);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º toothServicesData –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∑—É–±–æ–≤
    if (plan.toothServicesData) {
      // –ï—Å–ª–∏ —É –ø–ª–∞–Ω–∞ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      console.log('ü¶∑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:', plan.toothServicesData);
    } else {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
      const newToothServicesData = Object.entries(planTeethServices).map(([toothId, serviceIds]) => ({
        toothId: parseInt(toothId),
        services: serviceIds.map(serviceId => {
          const service = services.find(s => s.id === serviceId);
          return service ? {
            id: service.id,
            name: service.name,
            price: service.price,
            category: service.category
          } : {
            id: serviceId,
            name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞',
            price: 0,
            category: 'unknown'
          };
        })
      }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const updatedPlan = {
        ...planWithDefaults,
        toothServicesData: newToothServicesData
      };
      setEditingTreatmentPlan(updatedPlan);
      
      console.log('ü¶∑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:', newToothServicesData);
    }
    
    console.log('ü¶∑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ª—É–≥–∏ –¥–ª—è –∑—É–±–æ–≤:', planTeethServices);
    console.log('ü¶∑ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã:', selectedTeeth);
    setShowTreatmentPlanModal(true);
  };

  const saveTreatmentPlan = async () => {
    if (!editingTreatmentPlan) return;
    try {
      if (isCreatingTreatmentPlan) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º ID
        const newPlan = {
          ...editingTreatmentPlan,
          id: Math.max(...treatmentPlans.map(p => p.id), 0) + 1,
          patient_name: patients.find(p => p.id === editingTreatmentPlan.patient_id)?.full_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç',
          created_at: new Date().toISOString().split('T')[0],
          services: getPlanServices(editingTreatmentPlan),
          total_cost: getPlanTotalCost(editingTreatmentPlan),
          selected_teeth: getPlanSelectedTeeth(editingTreatmentPlan),
          teethServices: editingTreatmentPlan.teethServices || {},
          toothServicesData: editingTreatmentPlan.toothServicesData || []
        };
        setTreatmentPlans([...treatmentPlans, newPlan]);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –≤ –ë–î
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –≤ –ë–î:', newPlan);
        console.log('ü¶∑ –î–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', teethServices);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –≤ –ë–î
        try {
          // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —É—Å–ª—É–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑—É–±–∞—Ö
          const servicesWithTeeth = [];
          for (const [toothId, serviceIds] of Object.entries(teethServices)) {
            for (const serviceId of serviceIds) {
              const service = services.find(s => s.id === serviceId);
              if (service) {
                servicesWithTeeth.push({
                  service_id: serviceId,
                  tooth_id: parseInt(toothId),
                  service_name: service.name,
                  service_price: service.price,
                  quantity: 1
                });
              }
            }
          }
          
          const response = await api.post('/treatment-plans', {
            patient_id: newPlan.patient_id,
            doctor_id: 1, // ID –≤—Ä–∞—á–∞ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
            diagnosis: newPlan.diagnosis,
            notes: newPlan.treatment_description,
            services: servicesWithTeeth
          });
          
          const treatmentPlanId = response.data.id;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö
          for (const [toothId, serviceIds] of Object.entries(teethServices)) {
            if (serviceIds.length > 0) {
              await api.post('/tooth-services', {
                treatment_plan_id: treatmentPlanId,
                tooth_id: parseInt(toothId),
                service_ids: serviceIds
              });
            }
          }
          
          console.log('‚úÖ –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error);
        }
        
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω
        const updatedPlan = {
          ...editingTreatmentPlan,
          services: getPlanServices(editingTreatmentPlan),
          total_cost: getPlanTotalCost(editingTreatmentPlan),
          selected_teeth: getPlanSelectedTeeth(editingTreatmentPlan),
          teethServices: editingTreatmentPlan.teethServices || {},
          toothServicesData: editingTreatmentPlan.toothServicesData || []
        };
        
        console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è:', updatedPlan);
        console.log('üîç –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–º–Ω–µ–∑–∞ –≤ –æ–±–Ω–æ–≤–ª—è–µ–º–æ–º –ø–ª–∞–Ω–µ:');
        console.log('  - patient_allergies:', updatedPlan.patient_allergies);
        console.log('  - patient_chronic_diseases:', updatedPlan.patient_chronic_diseases);
        console.log('  - patient_contraindications:', updatedPlan.patient_contraindications);
        console.log('  - patient_special_notes:', updatedPlan.patient_special_notes);
        
        setTreatmentPlans(treatmentPlans.map(p => 
          p.id === editingTreatmentPlan.id ? updatedPlan : p
        ));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –≤ –ë–î
        console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –≤ –ë–î:', updatedPlan);
        console.log('ü¶∑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', teethServices);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –≤ –ë–î
        try {
          // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —É—Å–ª—É–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑—É–±–∞—Ö
          const servicesWithTeeth = [];
          for (const [toothId, serviceIds] of Object.entries(teethServices)) {
            for (const serviceId of serviceIds) {
              const service = services.find(s => s.id === serviceId);
              if (service) {
                servicesWithTeeth.push({
                  service_id: serviceId,
                  tooth_id: parseInt(toothId),
                  service_name: service.name,
                  service_price: service.price,
                  quantity: 1
                });
              }
            }
          }
          
          await api.put(`/treatment-plans/${editingTreatmentPlan.id}`, {
            diagnosis: updatedPlan.diagnosis,
            notes: updatedPlan.treatment_description,
            services: servicesWithTeeth
          });
          
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö
          await api.delete(`/tooth-services/treatment-plan/${editingTreatmentPlan.id}`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö
          for (const [toothId, serviceIds] of Object.entries(teethServices)) {
            if (serviceIds.length > 0) {
              await api.post('/tooth-services', {
                treatment_plan_id: editingTreatmentPlan.id,
                tooth_id: parseInt(toothId),
                service_ids: serviceIds
              });
            }
          }
          
          console.log('‚úÖ –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ –ë–î:', error);
        }
      }
      
      setShowTreatmentPlanModal(false);
      setEditingTreatmentPlan(null);
      setIsCreatingTreatmentPlan(false);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      alert('‚úÖ –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è');
    }
  };


  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –ø–ª–∞–Ω—É –ª–µ—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
  const handleNavigateToTreatmentPlan = (patient: Patient) => {
    console.log('üìã –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–ª–∞–Ω—É –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:', patient);
    console.log('üîç –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–º–Ω–µ–∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ:');
    console.log('  - –ê–ª–ª–µ—Ä–≥–∏–∏:', patient.allergies);
    console.log('  - –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:', patient.chronic_diseases);
    console.log('  - –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:', patient.contraindications);
    console.log('  - –û—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:', patient.special_notes);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    const existingPlan = treatmentPlans.find(plan => plan.patient_id === patient.id);
    
    if (existingPlan) {
      // –ï—Å–ª–∏ –ø–ª–∞–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–º–Ω–µ–∑–∞ –∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
      console.log('üìã –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–º–Ω–µ–∑–∞');
      const updatedPlan = {
        ...existingPlan,
        patient_name: patient.full_name,
        patient_phone: patient.phone,
        patient_iin: patient.iin,
        patient_birth_date: patient.birth_date,
        patient_allergies: patient.allergies,
        patient_chronic_diseases: patient.chronic_diseases,
        patient_contraindications: patient.contraindications,
        patient_special_notes: patient.special_notes,
        teethServices: existingPlan.teethServices || {}, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –∑—É–±–æ–≤
        toothServicesData: existingPlan.toothServicesData || [] // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      };
      console.log('‚úÖ –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', updatedPlan);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      handleEditTreatmentPlan(updatedPlan);
    } else {
      // –ï—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      handleCreateTreatmentPlanFromPatient(patient);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è
    setActiveTab('treatment-plans');
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è –∏–∑ –º–æ–¥–∞–ª–∫–∏ –∑–∞–ø–∏—Å–∏
  const handleCreateTreatmentPlanFromModal = (patient: Patient) => {
    console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø–∏—Å–∏:', patient);
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    setEditingTreatmentPlan({
      id: 0,
      patient_id: patient.id || 0,
      patient_name: patient.full_name,
      status: 'active',
      selected_teeth: [],
      teethServices: {},
      total_cost: 0,
      created_at: new Date().toISOString().split('T')[0],
      // –ø–æ–ª—è –∞–Ω–∞–º–Ω–µ–∑–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
      allergies: (patient as any).allergies || '',
      chronic_diseases: (patient as any).chronic_diseases || '',
      contraindications: (patient as any).contraindications || '',
      special_notes: (patient as any).special_notes || ''
    } as any);
    setShowTreatmentPlanModal(true);
  };

  const handleCreateTreatmentPlanFromPatient = (patient: Patient) => {
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:', patient);
    console.log('üîç –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–º–Ω–µ–∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:');
    console.log('  - –ê–ª–ª–µ—Ä–≥–∏–∏:', patient.allergies);
    console.log('  - –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:', patient.chronic_diseases);
    console.log('  - –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:', patient.contraindications);
    console.log('  - –û—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:', patient.special_notes);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    const newPlan: TreatmentPlan = {
      id: 0, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      patient_id: patient.id,
      patient_name: patient.full_name,
      patient_phone: patient.phone,
      patient_iin: patient.iin,
      patient_birth_date: patient.birth_date,
      patient_allergies: patient.allergies,
      patient_chronic_diseases: patient.chronic_diseases,
      patient_contraindications: patient.contraindications,
      patient_special_notes: patient.special_notes,
      diagnosis: '',
      treatment_description: '',
      services: [],
      total_cost: 0,
      selected_teeth: [],
      teethServices: {}, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —É—Å–ª—É–≥ –¥–ª—è –∑—É–±–æ–≤
      toothServicesData: [], // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      status: 'active',
      created_at: new Date().toISOString().split('T')[0]
    };
    
    console.log('‚úÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', newPlan);
    console.log('üîç –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–º–Ω–µ–∑–∞ –≤ –ø–ª–∞–Ω–µ –ª–µ—á–µ–Ω–∏—è:');
    console.log('  - patient_allergies:', newPlan.patient_allergies);
    console.log('  - patient_chronic_diseases:', newPlan.patient_chronic_diseases);
    console.log('  - patient_contraindications:', newPlan.patient_contraindications);
    console.log('  - patient_special_notes:', newPlan.patient_special_notes);
    
    setEditingTreatmentPlan(newPlan);
    setIsCreatingTreatmentPlan(true);
    setShowTreatmentPlanModal(true);
    setTeethServices({});
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ø–ª–∞–Ω–µ –ª–µ—á–µ–Ω–∏—è
  const handlePatientIINChange = async (iin: string) => {
    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–ª–∞–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é (patient_id = 0)
    if (iin.length >= 12 && editingTreatmentPlan?.patient_id === 0) {
      const patient = patients.find(p => p.iin === iin);
      if (patient) {
        console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ –ò–ò–ù:', patient);
        setEditingTreatmentPlan(prev => prev ? {
          ...prev,
          patient_id: patient.id,
          patient_name: patient.full_name,
          patient_phone: patient.phone,
          patient_iin: patient.iin,
          birth_date: patient.birth_date,
          patient_allergies: patient.allergies,
          patient_chronic_diseases: patient.chronic_diseases,
          patient_contraindications: patient.contraindications,
          patient_special_notes: patient.special_notes
        } : null);
      } else {
        console.log('‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å –ò–ò–ù', iin, '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }
  };

  const handlePatientPhoneChange = async (phone: string) => {
    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–ª–∞–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é (patient_id = 0)
    if (phone.length >= 10 && editingTreatmentPlan?.patient_id === 0) {
      const patient = patients.find(p => p.phone === phone);
      if (patient) {
        console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', patient);
        setEditingTreatmentPlan(prev => prev ? {
          ...prev,
          patient_id: patient.id,
          patient_name: patient.full_name,
          patient_phone: patient.phone,
          patient_iin: patient.iin,
          patient_birth_date: patient.birth_date,
          patient_allergies: patient.allergies,
          patient_chronic_diseases: patient.chronic_diseases,
          patient_contraindications: patient.contraindications,
          patient_special_notes: patient.special_notes
        } : null);
      } else {
        console.log('‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º', phone, '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }
  };



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –ò–ò–ù
  const extractBirthDateFromIIN = (iin: string): string => {
    if (iin.length < 6) return '';
    
    const datePart = iin.substring(0, 6);
    const year = datePart.substring(0, 2);
    const month = datePart.substring(2, 4);
    const day = datePart.substring(4, 6);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω—ã–π –≥–æ–¥
    const currentYear = new Date().getFullYear();
    const currentYearLastTwo = currentYear % 100;
    const fullYear = parseInt(year) <= currentYearLastTwo ? 2000 + parseInt(year) : 1900 + parseInt(year);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    const date = new Date(fullYear, parseInt(month) - 1, parseInt(day));
    if (date.getFullYear() === fullYear && date.getMonth() === parseInt(month) - 1 && date.getDate() === parseInt(day)) {
      return `${fullYear}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    }
    
    return '';
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ò–ò–ù —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  const handleIINChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingPatient) return;
    
    const iin = e.target.value;
    const birthDate = extractBirthDateFromIIN(iin);
    
    setEditingPatient({
      ...editingPatient,
      iin: iin,
      birth_date: birthDate || editingPatient.birth_date
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editingPatient) return;
    
    let phone = e.target.value;
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    phone = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (phone.startsWith('8')) {
      phone = '7' + phone.substring(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é 7 (—Ç–∞–∫ –∫–∞–∫ +7 —É–∂–µ –µ—Å—Ç—å)
    if (phone.startsWith('7')) {
      phone = phone.substring(1);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 10 —Ü–∏—Ñ—Ä (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
    if (phone.length > 10) {
      phone = phone.substring(0, 10);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    let formattedPhone = '+7';
    if (phone.length > 0) {
      formattedPhone += ' (' + phone.substring(0, 3);
      if (phone.length > 3) {
        formattedPhone += ') ' + phone.substring(3, 6);
        if (phone.length > 6) {
          formattedPhone += '-' + phone.substring(6, 8);
          if (phone.length > 8) {
            formattedPhone += '-' + phone.substring(8, 10);
          }
        }
      }
    }
    
    setEditingPatient({
      ...editingPatient,
      phone: formattedPhone
    });
  };



  if (loading) {
    return (
      <div style={{ padding: '2rem', textAlign: 'center' }}>
        <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  return (
    <>
    <div style={{ minHeight: '100vh', backgroundColor: '#f9fafb', paddingTop: 0, marginTop: 0, padding: 0 }}>

        {/* –ü–∞—Ü–∏–µ–Ω—Ç—ã */}
        {activeTab === 'patients' && (
          <div style={{ width: '100%', maxWidth: '100%' }}>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center', 
              marginBottom: 'clamp(0.5rem, 2vw, 1rem)',
              flexWrap: 'wrap',
              gap: 'clamp(0.5rem, 2vw, 1rem)'
            }}>
              <h2 style={{ 
                fontSize: 'clamp(1.2rem, 3vw, 1.5rem)',
                margin: 0
              }}>–ü–∞—Ü–∏–µ–Ω—Ç—ã –∫–ª–∏–Ω–∏–∫–∏</h2>
              <button
                onClick={handleCreatePatient}
                style={{
                  backgroundColor: '#059669',
                  color: 'white',
                  border: 'none',
                  padding: 'clamp(0.4rem, 2vw, 0.5rem) clamp(0.8rem, 3vw, 1rem)',
                  borderRadius: '0.375rem',
                  cursor: 'pointer',
                  fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                  whiteSpace: 'nowrap',
                  minWidth: 'fit-content'
                }}
              >
                + –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞
              </button>
            </div>

            {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
            <div style={{
              backgroundColor: '#f8fafc',
              padding: 'clamp(0.75rem, 2vw, 1rem)',
              borderRadius: '0.5rem',
              marginBottom: 'clamp(0.75rem, 2vw, 1rem)',
              border: '1px solid #e2e8f0'
            }}>
              <div style={{
                display: 'flex',
                gap: 'clamp(0.5rem, 2vw, 1rem)',
                flexWrap: 'wrap',
                alignItems: 'center'
              }}>
                {/* –ü–æ–∏—Å–∫ */}
                <div style={{ flex: '1', minWidth: '200px' }}>
                  <SearchInput />
                </div>

                {/* –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–∞—á—É */}
                <div style={{ minWidth: '150px' }}>
                  <select
                    value={selectedDoctorId || ''}
                    onChange={(e) => handleDoctorFilterChange(e.target.value ? Number(e.target.value) : null)}
                    style={{
                      width: '100%',
                      padding: 'clamp(0.4rem, 2vw, 0.5rem)',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.375rem',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      outline: 'none',
                      backgroundColor: 'white'
                    }}
                  >
                    <option value="">–í—Å–µ –≤—Ä–∞—á–∏</option>
                    {doctorsStats.map(doctor => (
                      <option key={doctor.id} value={doctor.id}>
                        {doctor.full_name} ({doctor.patient_count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤)
                      </option>
                    ))}
                  </select>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ */}
                <button
                  onClick={clearFilters}
                  style={{
                    backgroundColor: '#6b7280',
                    color: 'white',
                    border: 'none',
                    padding: 'clamp(0.4rem, 2vw, 0.5rem) clamp(0.8rem, 3vw, 1rem)',
                    borderRadius: '0.375rem',
                    cursor: 'pointer',
                    fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                    whiteSpace: 'nowrap'
                  }}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </button>
              </div>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              {doctorsStats.length > 0 && (
                <div style={{
                  marginTop: 'clamp(0.5rem, 2vw, 0.75rem)',
                  padding: 'clamp(0.5rem, 2vw, 0.75rem)',
                  backgroundColor: 'white',
                  borderRadius: '0.375rem',
                  border: '1px solid #e2e8f0'
                }}>
                  <div style={{
                    fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                    color: '#6b7280',
                    marginBottom: 'clamp(0.25rem, 1vw, 0.5rem)'
                  }}>
                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–∞—á–∞–º:
                  </div>
                  <div style={{
                    display: 'flex',
                    gap: 'clamp(0.5rem, 2vw, 1rem)',
                    flexWrap: 'wrap'
                  }}>
                    {doctorsStats.map(doctor => (
                      <div key={doctor.id} style={{
                        padding: 'clamp(0.25rem, 1vw, 0.5rem) clamp(0.5rem, 2vw, 0.75rem)',
                        backgroundColor: selectedDoctorId === doctor.id ? '#dbeafe' : '#f3f4f6',
                        borderRadius: '0.25rem',
                        fontSize: 'clamp(0.7rem, 2vw, 0.8rem)',
                        cursor: 'pointer',
                        transition: 'background-color 0.2s'
                      }}
                      onClick={() => handleDoctorFilterChange(doctor.id)}
                      >
                        {doctor.full_name}: {doctor.patient_count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            <div style={{
              backgroundColor: 'white',
              borderRadius: '0.5rem',
              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
              overflow: 'auto',
              width: '100%'
            }}>
              <table style={{ 
                width: '100%', 
                borderCollapse: 'collapse',
                minWidth: '800px' // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Å–∂–∞—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
              }}>
                <thead>
                  <tr style={{ backgroundColor: '#f9fafb' }}>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '40px'
                    }}>ID</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '120px'
                    }}>–ò–º—è</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '120px'
                    }}>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '100px'
                    }}>–ò–ò–ù</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '100px'
                    }}>–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '120px'
                    }}>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '120px'
                    }}>–°—Ç–∞—Ç—É—Å</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '120px'
                    }}>–ö–ª–∏–Ω–∏–∫–∞</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '150px'
                    }}>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {clinicPatients.length === 0 ? (
                    <tr>
                      <td colSpan={9} style={{ 
                        padding: '2rem', 
                        textAlign: 'center', 
                        color: '#6b7280',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)'
                      }}>
                        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                      </td>
                    </tr>
                  ) : (
                    clinicPatients.map(clinicPatient => (
                    <tr key={clinicPatient.id}>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)'
                      }}>{clinicPatient.patient_id}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        fontWeight: '500'
                      }}>{clinicPatient.patient_name}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        whiteSpace: 'nowrap'
                      }}>{clinicPatient.patient_phone}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        whiteSpace: 'nowrap'
                      }}>{clinicPatient.patient_iin}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        whiteSpace: 'nowrap'
                      }}>{clinicPatient.first_visit_date ? new Date(clinicPatient.first_visit_date).toLocaleDateString() : '-'}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        maxWidth: '120px', 
                        wordWrap: 'break-word',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis'
                      }}>
                        {clinicPatient.last_visit_date ? new Date(clinicPatient.last_visit_date).toLocaleDateString() : '-'}
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        maxWidth: '120px', 
                        wordWrap: 'break-word',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis'
                      }}>
                        {clinicPatient.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        maxWidth: '120px', 
                        wordWrap: 'break-word',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis'
                      }}>
                        {clinicPatient.clinic_name || '-'}
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        maxWidth: '120px', 
                        wordWrap: 'break-word',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis'
                      }}>
                        {clinicPatient.clinic_name || '-'}
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <div style={{ 
                          display: 'flex', 
                          gap: 'clamp(0.25rem, 1vw, 0.5rem)', 
                          flexWrap: 'wrap',
                          justifyContent: 'flex-start'
                        }}>
                          <button
                            onClick={() => navigate(`/patient/${clinicPatient.patient_id}`)}
                            style={{
                              backgroundColor: '#059669',
                              color: 'white',
                              border: 'none',
                              padding: 'clamp(0.2rem, 1vw, 0.25rem) clamp(0.4rem, 2vw, 0.5rem)',
                              borderRadius: '0.25rem',
                              cursor: 'pointer',
                              fontSize: 'clamp(0.7rem, 2vw, 0.8rem)',
                              whiteSpace: 'nowrap'
                            }}
                          >
                            –õ–ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
                          </button>
                          <button
                            onClick={() => handleRemovePatientFromClinic(clinicPatient.id)}
                            style={{
                              backgroundColor: '#dc2626',
                              color: 'white',
                              border: 'none',
                              padding: 'clamp(0.2rem, 1vw, 0.25rem) clamp(0.4rem, 2vw, 0.5rem)',
                              borderRadius: '0.25rem',
                              cursor: 'pointer',
                              fontSize: 'clamp(0.7rem, 2vw, 0.8rem)',
                              whiteSpace: 'nowrap'
                            }}
                          >
                            –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–ª–∏–Ω–∏–∫–∏
                          </button>
                        </div>
                      </td>
                    </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>
        )}



                {/* –ü–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è */}
        {activeTab === 'treatment-plans' && (
          <div style={{ width: '100%', maxWidth: '100%' }}>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center', 
              marginBottom: 'clamp(0.5rem, 2vw, 1rem)',
              flexWrap: 'wrap',
              gap: 'clamp(0.5rem, 2vw, 1rem)'
            }}>
              <h2 style={{ 
                fontSize: 'clamp(1.2rem, 3vw, 1.5rem)',
                margin: 0
              }}>–ü–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è</h2>
              <button
                onClick={handleCreateTreatmentPlan}
                style={{
                  backgroundColor: '#059669',
                  color: 'white',
                  border: 'none',
                  padding: 'clamp(0.4rem, 2vw, 0.5rem) clamp(0.8rem, 3vw, 1rem)',
                  borderRadius: '0.375rem',
                  cursor: 'pointer',
                  fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                  whiteSpace: 'nowrap',
                  minWidth: 'fit-content'
                }}
              >
                + –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
              </button>
            </div>
            <div style={{
              backgroundColor: 'white',
              borderRadius: '0.5rem',
              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
              overflow: 'auto',
              width: '100%'
            }}>
              <table style={{ 
                width: '100%', 
                borderCollapse: 'collapse',
                minWidth: '900px' // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Å–∂–∞—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
              }}>
                <thead>
                  <tr style={{ backgroundColor: '#f9fafb' }}>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '40px'
                    }}>ID</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '120px'
                    }}>–ü–∞—Ü–∏–µ–Ω—Ç</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '150px'
                    }}>–î–∏–∞–≥–Ω–æ–∑</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '100px'
                    }}>–ó—É–±—ã</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '150px'
                    }}>–£—Å–ª—É–≥–∏</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '100px'
                    }}>–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '80px'
                    }}>–°—Ç–∞—Ç—É—Å</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '100px'
                    }}>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '120px'
                    }}>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {treatmentPlans.map(plan => (
                    <tr key={plan.id}>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)'
                      }}>{plan.id}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        fontWeight: '500'
                      }}>{plan.patient_name}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        maxWidth: '150px',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap'
                      }}>{plan.diagnosis}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <div style={{ fontSize: 'clamp(0.7rem, 2vw, 0.8rem)' }}>
                          {getPlanSelectedTeeth(plan).length > 0 ? (
                            getPlanSelectedTeeth(plan).map(toothId => (
                              <span key={toothId} style={{
                                display: 'inline-block',
                                backgroundColor: '#3b82f6',
                                color: 'white',
                                padding: 'clamp(0.15rem, 1vw, 0.25rem) clamp(0.3rem, 2vw, 0.5rem)',
                                borderRadius: '0.25rem',
                                margin: '0.125rem',
                                fontSize: 'clamp(0.6rem, 1.8vw, 0.75rem)',
                                fontWeight: '500'
                              }}>
                                {toothId}
                              </span>
                            ))
                          ) : (
                            <span style={{ 
                              color: '#9ca3af', 
                              fontStyle: 'italic',
                              fontSize: 'clamp(0.7rem, 2vw, 0.8rem)'
                            }}>–ó—É–±—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</span>
                          )}
                        </div>
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        maxWidth: '150px'
                      }}>
                        <div style={{ 
                          fontSize: 'clamp(0.7rem, 2vw, 0.8rem)',
                          maxHeight: '60px',
                          overflow: 'hidden'
                        }}>
                          {getPlanServices(plan).length > 0 ? (
                            getPlanServices(plan).slice(0, 2).map(serviceId => {
                              const service = services.find(s => s.id === serviceId);
                              return service ? (
                                <div key={serviceId} style={{ marginBottom: '0.25rem' }}>
                                  <span style={{ 
                                    fontWeight: '500',
                                    fontSize: 'clamp(0.7rem, 2vw, 0.8rem)'
                                  }}>{service.name}</span>
                                  <span style={{ 
                                    color: '#6b7280', 
                                    marginLeft: '0.5rem',
                                    fontSize: 'clamp(0.6rem, 1.8vw, 0.7rem)'
                                  }}>
                                    ({service.price.toLocaleString()} ‚Ç∏)
                                  </span>
                                </div>
                              ) : null;
                            })
                          ) : (
                            <span style={{ 
                              color: '#9ca3af', 
                              fontStyle: 'italic',
                              fontSize: 'clamp(0.7rem, 2vw, 0.8rem)'
                            }}>–£—Å–ª—É–≥–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</span>
                          )}
                          {getPlanServices(plan).length > 2 && (
                            <div style={{ 
                              color: '#6b7280',
                              fontSize: 'clamp(0.6rem, 1.8vw, 0.7rem)'
                            }}>
                              +{getPlanServices(plan).length - 2} –µ—â—ë
                            </div>
                          )}
                        </div>
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <span style={{ 
                          fontWeight: '500', 
                          color: '#059669',
                          fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                          whiteSpace: 'nowrap'
                        }}>
                          {getPlanTotalCost(plan).toLocaleString()} ‚Ç∏
                        </span>
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <span style={{
                          backgroundColor: plan.status === 'active' ? '#dcfce7' : 
                                         plan.status === 'completed' ? '#dbeafe' : '#fef2f2',
                          color: plan.status === 'active' ? '#166534' : 
                                 plan.status === 'completed' ? '#1e40af' : '#dc2626',
                          padding: 'clamp(0.2rem, 1vw, 0.25rem) clamp(0.4rem, 2vw, 0.5rem)',
                          borderRadius: '0.25rem',
                          fontSize: 'clamp(0.7rem, 2vw, 0.8rem)',
                          whiteSpace: 'nowrap'
                        }}>
                          {plan.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                           plan.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω'}
                        </span>
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        whiteSpace: 'nowrap'
                      }}>{plan.created_at}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <button
                          onClick={() => handleEditTreatmentPlan(plan)}
                          style={{
                            backgroundColor: '#2563eb',
                            color: 'white',
                            border: 'none',
                            padding: 'clamp(0.2rem, 1vw, 0.25rem) clamp(0.4rem, 2vw, 0.5rem)',
                            borderRadius: '0.25rem',
                            cursor: 'pointer',
                            fontSize: 'clamp(0.7rem, 2vw, 0.8rem)',
                            whiteSpace: 'nowrap'
                          }}
                        >
                          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* –£—Å–ª—É–≥–∏ */}
        {activeTab === 'services' && (
          <div style={{ width: '100%', maxWidth: '100%' }}>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center', 
              marginBottom: 'clamp(0.5rem, 2vw, 1rem)',
              flexWrap: 'wrap',
              gap: 'clamp(0.5rem, 2vw, 1rem)'
            }}>
              <h2 style={{ 
                fontSize: 'clamp(1.2rem, 3vw, 1.5rem)',
                margin: 0
              }}>–£—Å–ª—É–≥–∏</h2>
            </div>
            <div style={{
              backgroundColor: 'white',
              borderRadius: '0.5rem',
              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
              overflow: 'auto',
              width: '100%'
            }}>
              <table style={{ 
                width: '100%', 
                borderCollapse: 'collapse',
                minWidth: '600px' // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Å–∂–∞—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
              }}>
                <thead>
                  <tr style={{ backgroundColor: '#f9fafb' }}>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '40px'
                    }}>ID</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '150px'
                    }}>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '100px'
                    }}>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '80px'
                    }}>–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '80px'
                    }}>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '80px'
                    }}>–°—Ç–∞—Ç—É—Å</th>
                    <th style={{ 
                      padding: 'clamp(0.5rem, 2vw, 1rem)', 
                      textAlign: 'left', 
                      borderBottom: '1px solid #e5e7eb',
                      fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                      minWidth: '100px'
                    }}>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {services.map(service => (
                    <tr key={service.id}>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)'
                      }}>{service.id}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <div>
                          <div style={{ 
                            fontWeight: '500', 
                            marginBottom: '0.25rem',
                            fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)'
                          }}>{service.name}</div>
                          <div style={{ 
                            fontSize: 'clamp(0.7rem, 2vw, 0.8rem)', 
                            color: '#6b7280',
                            lineHeight: '1.3'
                          }}>{service.description}</div>
                        </div>
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <span style={{
                          backgroundColor: service.category === 'therapy' ? '#dcfce7' : 
                                         service.category === 'surgery' ? '#fef2f2' : '#dbeafe',
                          color: service.category === 'therapy' ? '#166534' : 
                                 service.category === 'surgery' ? '#dc2626' : '#1e40af',
                          padding: 'clamp(0.2rem, 1vw, 0.25rem) clamp(0.4rem, 2vw, 0.5rem)',
                          borderRadius: '0.25rem',
                          fontSize: 'clamp(0.7rem, 2vw, 0.8rem)',
                          whiteSpace: 'nowrap'
                        }}>
                          {service.category === 'therapy' ? '–¢–µ—Ä–∞–ø–∏—è' : 
                           service.category === 'surgery' ? '–•–∏—Ä—É—Ä–≥–∏—è' : 
                           service.category === 'prosthetics' ? '–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ' : service.category}
                        </span>
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <span style={{ 
                          fontWeight: '500', 
                          color: '#059669',
                          fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                          whiteSpace: 'nowrap'
                        }}>
                          {service.price.toLocaleString()} ‚Ç∏
                        </span>
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb',
                        fontSize: 'clamp(0.8rem, 2.5vw, 0.9rem)',
                        whiteSpace: 'nowrap'
                      }}>{service.duration}</td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <span style={{
                          backgroundColor: service.is_active ? '#dcfce7' : '#fef2f2',
                          color: service.is_active ? '#166534' : '#dc2626',
                          padding: 'clamp(0.2rem, 1vw, 0.25rem) clamp(0.4rem, 2vw, 0.5rem)',
                          borderRadius: '0.25rem',
                          fontSize: 'clamp(0.7rem, 2vw, 0.8rem)',
                          whiteSpace: 'nowrap'
                        }}>
                          {service.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                        </span>
                      </td>
                      <td style={{ 
                        padding: 'clamp(0.5rem, 2vw, 1rem)', 
                        borderBottom: '1px solid #e5e7eb'
                      }}>
                        <span style={{ fontSize: 'clamp(0.7rem, 2vw, 0.8rem)' }}>
                          –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ */}
      {showPatientModal && editingPatient && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '2rem',
            borderRadius: '0.5rem',
            width: '600px',
            maxWidth: '90vw',
            maxHeight: '90vh',
            overflow: 'auto'
          }}>
            <h3>{isCreatingPatient ? '–°–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞'}</h3>
            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem' }}>–ò–º—è:</label>
              <input
                type="text"
                value={editingPatient.full_name}
                onChange={(e) => setEditingPatient({...editingPatient, full_name: e.target.value})}
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.25rem'
                }}
              />
            </div>
            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem' }}>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
              <input
                type="text"
                value={editingPatient.phone}
                onChange={handlePhoneChange}
                placeholder="+7 (___) ___-__-__"
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.25rem',
                  fontFamily: 'monospace',
                  fontSize: '1rem'
                }}
              />
              <small style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.25rem', display: 'block' }}>
                üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞, +7 –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
              </small>
            </div>
            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem' }}>–ò–ò–ù:</label>
              <input
                type="text"
                value={editingPatient.iin}
                onChange={handleIINChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù (12 —Ü–∏—Ñ—Ä)"
                maxLength={12}
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.25rem'
                }}
              />
              <small style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.25rem', display: 'block' }}>
                üí° –ü–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä –ò–ò–ù –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
              </small>
            </div>
            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem' }}>
                –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:
                {editingPatient.iin.length >= 6 && extractBirthDateFromIIN(editingPatient.iin) && (
                  <span style={{ marginLeft: '0.5rem', fontSize: '0.75rem', color: '#059669', fontWeight: 'normal' }}>
                    ‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ò–ò–ù
                  </span>
                )}
              </label>
              <input
                type="date"
                value={editingPatient.birth_date}
                onChange={(e) => setEditingPatient({...editingPatient, birth_date: e.target.value})}
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.25rem',
                  backgroundColor: editingPatient.iin.length >= 6 && extractBirthDateFromIIN(editingPatient.iin) ? '#f0fdf4' : 'white'
                }}
              />
            </div>

            {/* –ê–Ω–∞–º–Ω–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞ */}
            <div style={{ 
              marginBottom: '1.5rem', 
              padding: '1rem', 
              backgroundColor: '#f8fafc', 
              borderRadius: '0.5rem',
              border: '1px solid #e2e8f0'
            }}>
              <h4 style={{ 
                margin: '0 0 1rem 0', 
                fontSize: '1.125rem', 
                fontWeight: '600', 
                color: '#374151' 
              }}>
                üìã –ê–Ω–∞–º–Ω–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞
              </h4>
              
              <div style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>–ê–ª–ª–µ—Ä–≥–∏–∏:</label>
                <textarea
                  value={editingPatient.allergies}
                  onChange={(e) => setEditingPatient({...editingPatient, allergies: e.target.value})}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    minHeight: '60px',
                    resize: 'vertical'
                  }}
                />
              </div>

              <div style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:</label>
                <textarea
                  value={editingPatient.chronic_diseases}
                  onChange={(e) => setEditingPatient({...editingPatient, chronic_diseases: e.target.value})}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    minHeight: '60px',
                    resize: 'vertical'
                  }}
                />
              </div>

              <div style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:</label>
                <textarea
                  value={editingPatient.contraindications}
                  onChange={(e) => setEditingPatient({...editingPatient, contraindications: e.target.value})}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    minHeight: '60px',
                    resize: 'vertical'
                  }}
                />
              </div>

              <div style={{ marginBottom: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500' }}>–û—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:</label>
                <textarea
                  value={editingPatient.special_notes}
                  onChange={(e) => setEditingPatient({...editingPatient, special_notes: e.target.value})}
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    minHeight: '60px',
                    resize: 'vertical'
                  }}
                />
              </div>
            </div>
            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end' }}>
              <button
                onClick={() => {
                  setShowPatientModal(false);
                  setEditingPatient(null);
                  setIsCreatingPatient(false);
                }}
                style={{
                  backgroundColor: '#6b7280',
                  color: 'white',
                  border: 'none',
                  padding: '0.5rem 1rem',
                  borderRadius: '0.25rem',
                  cursor: 'pointer'
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={savePatient}
                style={{
                  backgroundColor: '#059669',
                  color: 'white',
                  border: 'none',
                  padding: '0.5rem 1rem',
                  borderRadius: '0.25rem',
                  cursor: 'pointer'
                }}
              >
                {isCreatingPatient ? '–°–æ–∑–¥–∞—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}

    {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è */}
    {showTreatmentPlanModal && editingTreatmentPlan && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.6)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          backdropFilter: 'blur(4px)'
        }}>
          <div style={{
            background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
            padding: '1.5rem',
            borderRadius: '1rem',
            width: '90vw',
            maxWidth: '1200px',
            maxHeight: '90vh',
            overflow: 'auto',
            boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            margin: '1rem'
          }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
            <div style={{
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              padding: '1rem',
              borderRadius: '0.75rem',
              marginBottom: '1.5rem',
              textAlign: 'center',
              position: 'relative',
              overflow: 'hidden'
            }}>
              <div style={{
                position: 'absolute',
                top: '-50%',
                right: '-50%',
                width: '200%',
                height: '200%',
                background: 'radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%)',
                animation: 'float 6s ease-in-out infinite'
              }} />
              <h3 style={{ 
                margin: 0, 
                fontSize: 'clamp(1.5rem, 4vw, 2rem)', 
                fontWeight: '700',
                textShadow: '0 2px 4px rgba(0,0,0,0.3)',
                position: 'relative',
                zIndex: 1
              }}>
                {isCreatingTreatmentPlan ? 
                  (editingTreatmentPlan.patient_id > 0 ? 
                    `–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –¥–ª—è ${editingTreatmentPlan.patient_name}` : 
                    '–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è') : 
                  `–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –¥–ª—è ${editingTreatmentPlan.patient_name}`}
              </h3>
            </div>
            


            {/* –°—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ */}
            <div style={{ 
              marginBottom: '1.5rem',
              background: 'linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%)',
              borderRadius: '1rem',
              border: '1px solid #bae6fd',
              padding: '1rem',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
            }}>
              <h4 style={{ 
                margin: '0 0 1rem 0', 
                fontSize: 'clamp(1.125rem, 3.5vw, 1.25rem)', 
                fontWeight: '600',
                color: '#0c4a6e',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                <span>üë§</span>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
              </h4>
              
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1.5rem' }}>
                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '0.5rem', 
                    fontWeight: '600', 
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    color: '#0c4a6e'
                  }}>–§–ò–û:</label>
                  <div style={{
                    padding: '0.75rem',
                    backgroundColor: 'white',
                    border: '2px solid #bae6fd',
                    borderRadius: '0.5rem',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    color: '#0c4a6e',
                    fontWeight: '500'
                  }}>
                    {editingTreatmentPlan.patient_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </div>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '0.5rem', 
                    fontWeight: '600', 
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    color: '#0c4a6e'
                  }}>–ò–ò–ù:</label>
                  <div style={{
                    padding: '0.75rem',
                    backgroundColor: 'white',
                    border: '2px solid #bae6fd',
                    borderRadius: '0.5rem',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    color: '#0c4a6e',
                    fontWeight: '500'
                  }}>
                    {editingTreatmentPlan.patient_iin || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </div>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '0.5rem', 
                    fontWeight: '600', 
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    color: '#0c4a6e'
                  }}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                  <div style={{
                    padding: '0.75rem',
                    backgroundColor: 'white',
                    border: '2px solid #bae6fd',
                    borderRadius: '0.5rem',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    color: '#0c4a6e',
                    fontWeight: '500'
                  }}>
                    {editingTreatmentPlan.patient_birth_date || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </div>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '0.5rem', 
                    fontWeight: '600', 
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    color: '#0c4a6e'
                  }}>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                  <div style={{
                    padding: '0.75rem',
                    backgroundColor: 'white',
                    border: '2px solid #bae6fd',
                    borderRadius: '0.5rem',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    color: '#0c4a6e',
                    fontWeight: '500'
                  }}>
                    {editingTreatmentPlan.patient_phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </div>
                </div>
              </div>
            </div>

            {/* –ê–Ω–∞–º–Ω–µ–∑ —Å —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º */}
            <div style={{ 
              marginBottom: '2rem',
              background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
              borderRadius: '1rem',
              border: '1px solid #cbd5e1',
              overflow: 'hidden',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
            }}>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è */}
              <div style={{
                background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                color: 'white',
                padding: '1rem 1.5rem',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                transition: 'all 0.3s ease'
              }} onClick={() => setIsAnamnesisCollapsed(!isAnamnesisCollapsed)}>
                <h4 style={{ 
                  margin: 0, 
                  fontSize: 'clamp(1.125rem, 3.5vw, 1.25rem)', 
                  fontWeight: '600',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <span>üè•</span>
                  –ê–Ω–∞–º–Ω–µ–∑ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </h4>
                <div style={{
                  transform: isAnamnesisCollapsed ? 'rotate(0deg)' : 'rotate(180deg)',
                  transition: 'transform 0.3s ease',
                  fontSize: '1.25rem'
                }}>
                  ‚ñº
                </div>
              </div>

              {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ */}
              <div style={{
                padding: isAnamnesisCollapsed ? '0 1.5rem' : '1.5rem',
                maxHeight: isAnamnesisCollapsed ? '0' : '1000px',
                overflow: 'hidden',
                transition: 'all 0.3s ease'
              }}>
                {/* –ê–Ω–∞–º–Ω–µ–∑ */}
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '1.5rem' }}>
                  <div>
                    <label style={{ 
                      display: 'block', 
                      marginBottom: '0.75rem', 
                      fontWeight: '600', 
                      fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                      color: '#374151'
                    }}>–ê–ª–ª–µ—Ä–≥–∏–∏:</label>
                    <textarea
                      value={editingTreatmentPlan.patient_allergies || ''}
                      onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_allergies: e.target.value})}
                      placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
                      style={{
                        width: '100%',
                        padding: '0.75rem',
                        border: '2px solid #e2e8f0',
                        borderRadius: '0.5rem',
                        minHeight: '80px',
                        resize: 'vertical',
                        fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                        transition: 'border-color 0.2s ease',
                        background: 'white'
                      }}
                      onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
                      onBlur={(e) => e.target.style.borderColor = '#e2e8f0'}
                    />
                  </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>
                    –ò–ò–ù:
                    {editingTreatmentPlan.patient_id === 0 && (
                      <span style={{ 
                        fontSize: 'clamp(0.75rem, 2.5vw, 0.875rem)', 
                        fontWeight: '400', 
                        color: '#6b7280',
                        marginLeft: '0.25rem'
                      }}>
                        (–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)
                      </span>
                    )}
                  </label>
                  <input
                    type="text"
                    value={editingTreatmentPlan.patient_iin || ''}
                    onChange={(e) => {
                      setEditingTreatmentPlan({...editingTreatmentPlan, patient_iin: e.target.value});
                      handlePatientIINChange(e.target.value);
                    }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù –ø–∞—Ü–∏–µ–Ω—Ç–∞"
                    style={{
                      width: '100%',
                      padding: '0.5rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.25rem',
                      fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                    }}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>
                    –¢–µ–ª–µ—Ñ–æ–Ω:
                    {editingTreatmentPlan.patient_id === 0 && (
                      <span style={{ 
                        fontSize: 'clamp(0.75rem, 2.5vw, 0.875rem)', 
                        fontWeight: '400', 
                        color: '#6b7280',
                        marginLeft: '0.25rem'
                      }}>
                        (–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)
                      </span>
                    )}
                  </label>
                  <input
                    type="text"
                    value={editingTreatmentPlan.patient_phone || ''}
                    onChange={(e) => {
                      setEditingTreatmentPlan({...editingTreatmentPlan, patient_phone: e.target.value});
                      handlePatientPhoneChange(e.target.value);
                    }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                    style={{
                      width: '100%',
                      padding: '0.5rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.25rem',
                      fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                    }}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                  <input
                    type="date"
                    value={editingTreatmentPlan.patient_birth_date || ''}
                    onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_birth_date: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '0.5rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.25rem',
                      fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                    }}
                  />
                </div>
              </div>

              <div style={{ marginTop: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>–ê–ª–ª–µ—Ä–≥–∏–∏:</label>
                <textarea
                  value={editingTreatmentPlan.patient_allergies || ''}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_allergies: e.target.value})}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    minHeight: '60px',
                    resize: 'vertical',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                  }}
                />
              </div>

              <div style={{ marginTop: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:</label>
                <textarea
                  value={editingTreatmentPlan.patient_chronic_diseases || ''}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_chronic_diseases: e.target.value})}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    minHeight: '60px',
                    resize: 'vertical',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                  }}
                />
              </div>

              <div style={{ marginTop: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:</label>
                <textarea
                  value={editingTreatmentPlan.patient_contraindications || ''}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_contraindications: e.target.value})}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    minHeight: '60px',
                    resize: 'vertical',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                  }}
                />
              </div>

              <div style={{ marginTop: '1rem' }}>
                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>–û—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:</label>
                <textarea
                  value={editingTreatmentPlan.patient_special_notes || ''}
                  onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, patient_special_notes: e.target.value})}
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    minHeight: '60px',
                    resize: 'vertical',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                  }}
                />
                  </div>
                </div>
              </div>

            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>–î–∏–∞–≥–Ω–æ–∑:</label>
              <textarea
                value={editingTreatmentPlan.diagnosis}
                onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, diagnosis: e.target.value})}
                placeholder="–û–ø–∏—à–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.25rem',
                  minHeight: '80px',
                  resize: 'vertical',
                  fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                }}
              />
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>–û–ø–∏—Å–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è:</label>
              <textarea
                value={editingTreatmentPlan.treatment_description}
                onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, treatment_description: e.target.value})}
                placeholder="–û–ø–∏—à–∏—Ç–µ –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è, —ç—Ç–∞–ø—ã, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã..."
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.25rem',
                  minHeight: '120px',
                  resize: 'vertical',
                  fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                }}
              />
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>–°—Ç–∞—Ç—É—Å:</label>
              <select
                value={editingTreatmentPlan.status}
                onChange={(e) => setEditingTreatmentPlan({...editingTreatmentPlan, status: e.target.value})}
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.25rem',
                  fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                }}
              >
                <option value="active">–ê–∫—Ç–∏–≤–µ–Ω</option>
                <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
                <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
              </select>
            </div>

            {/* –ö–∞—Ä—Ç–∞ –∑—É–±–æ–≤ –∏ –≤—ã–±–æ—Ä —É—Å–ª—É–≥ */}
            <div style={{ marginBottom: '1rem' }}>
              <TeethMap
                services={services}
                selectedTeeth={editingTreatmentPlan?.selected_teeth || []}
                teethServices={editingTreatmentPlan?.teethServices || {}}
                onToothServicesChange={(newToothServices) => {
                  console.log('ü¶∑ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑—É–±–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', newToothServices);
                  
                  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å—Ç–∞—Ä—ã–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                  const newTeethServices: Record<number, number[]> = {};
                  newToothServices.forEach(ts => {
                    newTeethServices[ts.toothId] = ts.services.map(s => s.id);
                  });
                  setTeethServices(newTeethServices);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã
                  const newSelectedTeeth = newToothServices.map(ts => ts.toothId);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                  setEditingTreatmentPlan(prev => prev ? {
                    ...prev,
                    selected_teeth: newSelectedTeeth,
                    teethServices: newTeethServices,
                    toothServicesData: newToothServices
                  } : null);
                  
                  console.log('‚úÖ –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –∑—É–±–∞—Ö');
                }}
                onToothSelect={(toothId) => {
                  console.log('ü¶∑ –í—ã–±—Ä–∞–Ω –∑—É–±:', toothId);
                  // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∑—É–±–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ TeethMap
                }}
                onAddServiceToTooth={(toothId, serviceId) => {
                  console.log('ü¶∑ –î–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞ –∫ –∑—É–±—É:', toothId, serviceId);
                  // –û–±–Ω–æ–≤–ª—è–µ–º –∑—É–±—ã –∏ —É—Å–ª—É–≥–∏
                  setTeethServices(prev => ({
                    ...prev,
                    [toothId]: [...(prev[toothId] || []), serviceId]
                  }));
                }}
                onRemoveServiceFromTooth={(toothId, serviceId) => {
                  console.log('ü¶∑ –£–¥–∞–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞ —Å –∑—É–±–∞:', toothId, serviceId);
                  // –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É —Å –∑—É–±–∞
                  setTeethServices(prev => ({
                    ...prev,
                    [toothId]: (prev[toothId] || []).filter(id => id !== serviceId)
                  }));
                }}
                onClearSelection={() => {
                  console.log('ü¶∑ –û—á–∏—â–µ–Ω –≤—ã–±–æ—Ä –∑—É–±–æ–≤');
                  setTeethServices({});
                  setEditingTreatmentPlan(prev => prev ? {
                    ...prev,
                    selected_teeth: [],
                    teethServices: {}
                  } : null);
                }}
              />
            </div>

            {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã —Å —É—Å–ª—É–≥–∞–º–∏ */}
            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '500', fontSize: 'clamp(0.875rem, 3vw, 1rem)' }}>
                ü¶∑ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—É–±—ã —Å —É—Å–ª—É–≥–∞–º–∏:
              </label>
              <div style={{ 
                border: '1px solid #d1d5db', 
                borderRadius: '0.25rem', 
                padding: '0.5rem',
                backgroundColor: '#f8fafc',
                maxHeight: '300px',
                overflow: 'auto'
              }}>
                {Object.entries(teethServices).map(([toothId, serviceIds]) => {
                  const toothServices = services.filter(s => serviceIds.includes(s.id));
                  const toothTotalCost = toothServices.reduce((sum, s) => sum + Number(s.price), 0);
                  
                  return (
                    <div key={toothId} style={{
                      border: '1px solid #e5e7eb',
                      borderRadius: '0.25rem',
                      padding: '0.75rem',
                      marginBottom: '0.5rem',
                      backgroundColor: 'white'
                    }}>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        alignItems: 'center',
                        marginBottom: '0.5rem'
                      }}>
                        <h5 style={{ 
                          margin: 0, 
                          fontSize: '1rem', 
                          fontWeight: '600', 
                          color: '#374151' 
                        }}>
                          ü¶∑ –ó—É–± {toothId}
                        </h5>
                        <button
                          type="button"
                          onClick={() => {
                            const newSelectedTeeth = editingTreatmentPlan.selected_teeth.filter(id => id !== parseInt(toothId));
                            setEditingTreatmentPlan(prev => prev ? {
                              ...prev,
                              selected_teeth: newSelectedTeeth
                            } : null);
                            const newTeethServices = { ...teethServices };
                            delete newTeethServices[parseInt(toothId)];
                            setTeethServices(newTeethServices);
                          }}
                          style={{
                            padding: '0.25rem 0.5rem',
                            backgroundColor: '#ef4444',
                            color: 'white',
                            border: 'none',
                            borderRadius: '0.25rem',
                            cursor: 'pointer',
                            fontSize: '0.75rem'
                          }}
                        >
                          ‚ùå –£–±—Ä–∞—Ç—å –∑—É–±
                        </button>
                      </div>
                      
                      {/* –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è –∑—É–±–∞ */}
                      <div style={{ marginBottom: '0.5rem' }}>
                        {toothServices.length > 0 ? (
                          <ul style={{
                            listStyle: 'none',
                            margin: 0,
                            padding: 0,
                            display: 'grid',
                            gap: '4px'
                          }}>
                            {toothServices.map((service) => (
                              <li key={service.id} style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between',
                                border: '1px solid #e5e7eb',
                                borderRadius: '0.25rem',
                                padding: '0.4rem 0.5rem',
                                backgroundColor: '#fafafa'
                              }}>
                                <span style={{ color: '#374151' }}>{service.name}</span>
                                <span style={{ color: '#059669', fontWeight: 600 }}>{Number(service.price).toLocaleString()} ‚Ç∏</span>
                              </li>
                            ))}
                          </ul>
                        ) : (
                          <div style={{ color: '#6b7280', fontSize: '0.875rem' }}>–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</div>
                        )}
                      </div>
                      {/* –ò—Ç–æ–≥ –ø–æ –∑—É–±—É */}
                      <div style={{
                        textAlign: 'right',
                        fontWeight: '600',
                        color: '#059669',
                        fontSize: '0.9rem'
                      }}>
                        –ò—Ç–æ–≥–æ –¥–ª—è –∑—É–±–∞: {toothTotalCost.toLocaleString()} ‚Ç∏
                      </div>
                    </div>
                  );
                })}
                
                {Object.keys(teethServices).length === 0 && (
                  <div style={{ 
                    textAlign: 'center', 
                    color: '#6b7280', 
                    fontSize: '0.875rem',
                    padding: '1rem'
                  }}>
                    –í—ã–±–µ—Ä–∏—Ç–µ –∑—É–± –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–µ–º—É —É—Å–ª—É–≥–∏
                  </div>
                )}
              </div>
            </div>

            <div style={{ 
              backgroundColor: '#f9fafb', 
              padding: '0.5rem', 
              borderRadius: '0.25rem', 
              marginBottom: '1rem',
              border: '1px solid #e5e7eb'
            }}>
              <h4 style={{ margin: '0 0 0.25rem 0', fontSize: 'clamp(0.875rem, 3vw, 1rem)', color: '#374151' }}>
                üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é:
              </h4>
              <ul style={{ margin: 0, paddingLeft: '1rem', fontSize: 'clamp(0.75rem, 2.5vw, 0.875rem)', color: '#6b7280' }}>
                <li>–î–∏–∞–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º</li>
                <li>–í—ã–±–µ—Ä–∏—Ç–µ –∑—É–±—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ª–µ—á–µ–Ω–∏—è, –Ω–∞ –∫–∞—Ä—Ç–µ –∑—É–±–æ–≤</li>
                <li>–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑—É–±–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª—É–≥–∏</li>
                <li>–í –æ–ø–∏—Å–∞–Ω–∏–∏ –ª–µ—á–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</li>
                <li>–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º</li>
                <li>–°—Ç–∞—Ç—É—Å "–ê–∫—Ç–∏–≤–µ–Ω" –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤</li>
                <li>–°—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à–µ–Ω" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤</li>
              </ul>
            </div>

            <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'flex-end', flexWrap: 'wrap' }}>
              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è */}
              {Object.keys(teethServices).length > 0 && (
                <button
                  type="button"
                  onClick={() => {
                    console.log('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è:', editingTreatmentPlan);
                    console.log('ü¶∑ –£—Å–ª—É–≥–∏ –¥–ª—è –∑—É–±–æ–≤:', teethServices);
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
                    setShowTreatmentPlanModal(false);
                    setEditingTreatmentPlan(null);
                    setIsCreatingTreatmentPlan(false);
                    
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
                    setActiveTab('calendar');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    alert('üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è!');
                  }}
                  style={{
                    backgroundColor: '#2563eb',
                    color: 'white',
                    border: 'none',
                    padding: '0.5rem 1rem',
                    borderRadius: '0.25rem',
                    cursor: 'pointer',
                    fontSize: 'clamp(0.875rem, 3vw, 1rem)',
                    fontWeight: '500'
                  }}
                >
                  üìÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞
                </button>
              )}
              
              <button
                onClick={() => {
                  setShowTreatmentPlanModal(false);
                  setEditingTreatmentPlan(null);
                  setIsCreatingTreatmentPlan(false);
                }}
                style={{
                  backgroundColor: '#6b7280',
                  color: 'white',
                  border: 'none',
                  padding: '0.5rem 1rem',
                  borderRadius: '0.25rem',
                  cursor: 'pointer',
                  fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={saveTreatmentPlan}
                style={{
                  backgroundColor: '#059669',
                  color: 'white',
                  border: 'none',
                  padding: '0.5rem 1rem',
                  borderRadius: '0.25rem',
                  cursor: 'pointer',
                  fontSize: 'clamp(0.875rem, 3vw, 1rem)'
                }}
              >
                {isCreatingTreatmentPlan ? '–°–æ–∑–¥–∞—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
        )}

        {activeTab === 'calendar' && (
          <CalendarSwitcher
            doctorId={1}
            onNavigateToTreatmentPlan={handleNavigateToTreatmentPlan}
            onCreateTreatmentPlan={handleCreateTreatmentPlanFromModal}
          />
        )}
    </div>
    </>
  );
};

export default Doctor;
