import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, useNavigate, Navigate } from 'react-router-dom';
import { authService } from './services/auth';
import { ClinicProvider, useClinic } from './contexts/ClinicContext';
import Layout from './components/Layout';
import HomePage from './pages/HomePage';
import Admin from './pages/Admin';
import Doctor from './pages/Doctor';
import Patients from './pages/Patients';
import PatientDashboard from './pages/PatientDashboard';
import TreatmentOrders from './pages/TreatmentOrders';
import TreatmentOrderDetail from './pages/TreatmentOrderDetail';
import CreateTreatmentOrder from './pages/CreateTreatmentOrder';
import ClinicEdit from './pages/ClinicEdit';
import DebugPage from './pages/DebugPage';
import MobileAuth from './components/MobileAuth';

const ProtectedRoute: React.FC<{ children: React.ReactNode; allowedRoles?: string[] }> = ({ 
  children, 
  allowedRoles 
}) => {
  const user = authService.getUser();
  const token = authService.getToken();
  
  console.log('üõ°Ô∏è ProtectedRoute –ø—Ä–æ–≤–µ—Ä–∫–∞:');
  console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
  console.log('üîë –¢–æ–∫–µ–Ω:', token ? '–ï–°–¢–¨' : '–ù–ï–¢');
  console.log('üé≠ –†–æ–ª—å:', user?.role);
  console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:', allowedRoles);
  
  if (!user || !token) {
    console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω');
    return <Navigate to="/login" replace />;
  }

  if (allowedRoles && user && !allowedRoles.includes(user.role)) {
    console.log('‚ùå –†–æ–ª—å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
    return <Navigate to="/" replace />;
  }

  console.log('‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω');
  return <>{children}</>;
};

const AppContent: React.FC = () => {
  const { clinic } = useClinic();
  const clinicName = clinic?.name || "DentalCare";

  return (
    <Routes>
      <Route path="/home" element={
        <Layout clinicName={clinicName}>
          <HomePage 
            clinicName={clinic?.name}
            clinicDescription={clinic?.description}
            clinicAddress={clinic?.address}
            clinicContacts={clinic?.contacts}
          />
        </Layout>
      } />
      <Route path="/login" element={<Login />} />
      <Route path="/admin" element={
        <ProtectedRoute allowedRoles={['admin']}>
          <Layout>
            <Admin />
          </Layout>
        </ProtectedRoute>
      } />
      <Route path="/clinic/:clinicId/edit" element={
        <ProtectedRoute allowedRoles={['admin']}>
          <Layout clinicName={clinicName}>
            <ClinicEdit />
          </Layout>
        </ProtectedRoute>
      } />
      <Route path="/doctor" element={
        <ProtectedRoute allowedRoles={['doctor', 'nurse']}>
          <Layout clinicName={clinicName}>
            <Doctor />
          </Layout>
        </ProtectedRoute>
      } />
      <Route path="/patients" element={
        <ProtectedRoute allowedRoles={['registrar', 'patient']}>
          <Layout clinicName={clinicName}>
            <Patients />
          </Layout>
        </ProtectedRoute>
      } />
      <Route path="/patient/:patientId" element={
        <ProtectedRoute allowedRoles={['doctor', 'nurse', 'admin', 'patient']}>
          <Layout clinicName={clinicName}>
            <PatientDashboard />
          </Layout>
        </ProtectedRoute>
      } />
      <Route path="/treatment-orders" element={
        <ProtectedRoute allowedRoles={['doctor', 'nurse', 'admin']}>
          <Layout clinicName={clinicName}>
            <TreatmentOrders />
          </Layout>
        </ProtectedRoute>
      } />
      <Route path="/treatment-orders/:id" element={
        <ProtectedRoute allowedRoles={['doctor', 'nurse', 'admin']}>
          <Layout clinicName={clinicName}>
            <TreatmentOrderDetail />
          </Layout>
        </ProtectedRoute>
      } />
      <Route path="/treatment-orders/create" element={
        <ProtectedRoute allowedRoles={['doctor', 'nurse', 'admin']}>
          <Layout clinicName={clinicName}>
            <CreateTreatmentOrder />
          </Layout>
        </ProtectedRoute>
      } />
      <Route path="/debug" element={<DebugPage />} />
      <Route path="/" element={<RoleBasedHome />} />
    </Routes>
  );
};

const RoleBasedHome: React.FC = () => {
  const user = authService.getUser();
  const token = authService.getToken();
  const { clinic } = useClinic();
  const clinicName = clinic?.name || "DentalCare";
  
  if (!user || !token) {
    return (
      <Layout clinicName={clinicName}>
        <HomePage 
          clinicName={clinic?.name}
          clinicDescription={clinic?.description}
          clinicAddress={clinic?.address}
          clinicContacts={clinic?.contacts}
        />
      </Layout>
    );
  }
  
  // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (user.role === 'admin') {
    return <Navigate to="/admin" replace />;
  }
  
  // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤—Ä–∞—á, –º–µ–¥—Å–µ—Å—Ç—Ä–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–∞—Ü–∏–µ–Ω—Ç) –ø–æ–ø–∞–¥–∞—é—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  return (
    <Layout clinicName={clinicName}>
      <HomePage 
        clinicName={clinic?.name}
        clinicDescription={clinic?.description}
        clinicAddress={clinic?.address}
        clinicContacts={clinic?.contacts}
      />
    </Layout>
  );
};

const Login: React.FC = () => {
  const navigate = useNavigate();
  const [credentials, setCredentials] = useState({
    phone: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await authService.login(credentials);
      
      console.log('üîê –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
      
      try {
        localStorage.setItem('access_token', response.access_token);
        localStorage.setItem('user', JSON.stringify(response.user));
        
        console.log('üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', response.access_token);
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', response.user);
        console.log('üì± User Agent:', navigator.userAgent);
        console.log('üåê URL:', window.location.href);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        const savedToken = localStorage.getItem('access_token');
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', savedToken ? '–£–°–ü–ï–®–ù–û' : '–û–®–ò–ë–ö–ê');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
        setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }
      
      navigate('/');
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
      if (err.response?.data?.detail) {
        setError(err.response.data.detail);
      } else if (err.response?.data?.msg) {
        setError(err.response.data.msg);
      } else if (err.message) {
        setError(err.message);
      } else {
        setError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    } finally {
      setLoading(false);
    }
  };

  // –ï—Å–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (isMobile) {
    return (
      <div style={{ minHeight: '100vh', backgroundColor: '#f5f5f5', padding: '20px' }}>
        <MobileAuth onSuccess={() => navigate('/')} />
      </div>
    );
  }

  return (
    <div className="container">
      <div className="card">
        <div style={{
          width: '48px',
          height: '48px',
          backgroundColor: '#2563eb',
          borderRadius: '8px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          margin: '0 auto 1rem'
        }}>
          <svg style={{ width: '24px', height: '24px', color: 'white' }} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <h2 className="title">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
        <p className="subtitle">–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞</p>
        
        <form onSubmit={handleSubmit}>
          <div style={{ marginBottom: '1rem' }}>
            <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '500', color: '#374151', marginBottom: '0.25rem' }}>
              –¢–µ–ª–µ—Ñ–æ–Ω
            </label>
            <input
              type="tel"
              required
              style={{
                width: '100%',
                padding: '0.5rem 0.75rem',
                border: '1px solid #d1d5db',
                borderRadius: '0.375rem',
                fontSize: '0.875rem',
                boxSizing: 'border-box'
              }}
              placeholder="+77771234567"
              value={credentials.phone}
              onChange={(e) => setCredentials({...credentials, phone: e.target.value})}
            />
          </div>
          <div style={{ marginBottom: '1rem' }}>
            <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '500', color: '#374151', marginBottom: '0.25rem' }}>
              –ü–∞—Ä–æ–ª—å
            </label>
            <input
              type="password"
              required
              style={{
                width: '100%',
                padding: '0.5rem 0.75rem',
                border: '1px solid #d1d5db',
                borderRadius: '0.375rem',
                fontSize: '0.875rem',
                boxSizing: 'border-box'
              }}
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={credentials.password}
              onChange={(e) => setCredentials({...credentials, password: e.target.value})}
            />
          </div>

          {error && (
            <div style={{
              backgroundColor: '#fef2f2',
              border: '1px solid #fecaca',
              color: '#dc2626',
              padding: '0.75rem',
              borderRadius: '0.375rem',
              fontSize: '0.875rem',
              marginBottom: '1rem'
            }}>
              {error}
            </div>
          )}

          <button 
            type="submit" 
            className="button" 
            style={{ marginTop: '1rem' }}
            disabled={loading}
          >
            {loading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
          </button>

          <div style={{ marginTop: '1.5rem', textAlign: 'center' }}>
            <p style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.5rem' }}>
              üì± <strong>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</strong>
            </p>
            <div style={{ 
              fontSize: '0.8rem', 
              color: '#374151',
              backgroundColor: '#f3f4f6',
              padding: '1rem',
              borderRadius: '0.5rem',
              marginBottom: '1rem'
            }}>
              <p style={{ margin: '0.25rem 0', fontWeight: '600' }}>üìû –¢–µ–ª–µ—Ñ–æ–Ω: <span style={{ color: '#059669' }}>+77771234567</span></p>
              <p style={{ margin: '0.25rem 0', fontWeight: '600' }}>üîë –ü–∞—Ä–æ–ª—å: <span style={{ color: '#059669' }}>1234</span></p>
              <button
                type="button"
                onClick={() => setCredentials({ phone: '+77771234567', password: '1234' })}
                style={{
                  marginTop: '0.5rem',
                  padding: '0.5rem 1rem',
                  backgroundColor: '#059669',
                  color: 'white',
                  border: 'none',
                  borderRadius: '0.25rem',
                  fontSize: '0.75rem',
                  cursor: 'pointer'
                }}
              >
                üì± –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </button>
            </div>
          <div style={{ marginTop: '1rem' }}>
            <p style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.5rem', textAlign: 'center' }}>
              <strong>üöÄ –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥:</strong>
            </p>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>
              <button
                type="button"
                onClick={() => setCredentials({ phone: '+77771234568', password: '1234' })}
                style={{
                  padding: '0.5rem',
                  backgroundColor: '#2563eb',
                  color: 'white',
                  border: 'none',
                  borderRadius: '0.25rem',
                  fontSize: '0.75rem',
                  cursor: 'pointer'
                }}
              >
                üë®‚Äç‚öïÔ∏è –í–æ–π—Ç–∏ –∫–∞–∫ –í—Ä–∞—á
              </button>
              <button
                type="button"
                onClick={() => setCredentials({ phone: '+77771234569', password: '1234' })}
                style={{
                  padding: '0.5rem',
                  backgroundColor: '#059669',
                  color: 'white',
                  border: 'none',
                  borderRadius: '0.25rem',
                  fontSize: '0.75rem',
                  cursor: 'pointer'
                }}
              >
                üë©‚Äç‚öïÔ∏è –í–æ–π—Ç–∏ –∫–∞–∫ –ú–µ–¥—Å–µ—Å—Ç—Ä–∞
              </button>
              <button
                type="button"
                onClick={() => setCredentials({ phone: '+77771234570', password: '1234' })}
                style={{
                  padding: '0.5rem',
                  backgroundColor: '#dc2626',
                  color: 'white',
                  border: 'none',
                  borderRadius: '0.25rem',
                  fontSize: '0.75rem',
                  cursor: 'pointer'
                }}
              >
                üìã –í–æ–π—Ç–∏ –∫–∞–∫ –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        </button>
            </div>
          </div>
          
          <div style={{ marginTop: '1rem', padding: '0.5rem', backgroundColor: '#f3f4f6', borderRadius: '0.25rem' }}>
            <p style={{ fontSize: '0.7rem', color: '#6b7280', margin: '0.25rem 0' }}>
              <strong>üì± –û—Ç–ª–∞–¥–∫–∞:</strong>
            </p>
            <p style={{ fontSize: '0.6rem', color: '#9ca3af', margin: '0.1rem 0' }}>
              User Agent: {navigator.userAgent.substring(0, 50)}...
            </p>
            <p style={{ fontSize: '0.6rem', color: '#9ca3af', margin: '0.1rem 0' }}>
              URL: {window.location.href}
            </p>
            <p style={{ fontSize: '0.6rem', color: '#9ca3af', margin: '0.1rem 0' }}>
              –¢–æ–∫–µ–Ω –≤ localStorage: {localStorage.getItem('access_token') ? '–ï–°–¢–¨' : '–ù–ï–¢'}
            </p>
            <p style={{ fontSize: '0.6rem', color: '#9ca3af', margin: '0.1rem 0' }}>
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ localStorage: {localStorage.getItem('user') ? '–ï–°–¢–¨' : '–ù–ï–¢'}
            </p>
          </div>
          </div>
        </form>
      </div>
    </div>
  );
};



const App: React.FC = () => {
  return (
    <ClinicProvider>
      <Router>
        <AppContent />
      </Router>
    </ClinicProvider>
  );
};

export default App;
