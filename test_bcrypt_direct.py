#!/usr/bin/env python3
"""
–¢–µ—Å—Ç bcrypt –Ω–∞–ø—Ä—è–º—É—é
"""

def test_bcrypt_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç bcrypt –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("üîß –¢–ï–°–¢ BCRYPT –ù–ê–ü–†–Ø–ú–£–Æ")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bcrypt –Ω–∞–ø—Ä—è–º—É—é
        import bcrypt
        print("‚úÖ bcrypt –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        password = "admin123"
        password_bytes = password.encode('utf-8')
        print(f"üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å: {password}")
        print(f"üîê –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: {len(password)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîê –î–ª–∏–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö: {len(password_bytes)} –±–∞–π—Ç")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–ª—å
        salt = bcrypt.gensalt()
        print(f"üîê –°–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {salt.decode('utf-8')[:20]}...")
        
        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        hashed = bcrypt.hashpw(password_bytes, salt)
        print(f"üîê –•–µ—à —Å–æ–∑–¥–∞–Ω: {hashed.decode('utf-8')[:50]}...")
        print(f"üîê –î–ª–∏–Ω–∞ —Ö–µ—à–∞: {len(hashed)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        is_valid = bcrypt.checkpw(password_bytes, hashed)
        print(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: {is_valid}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ö–µ—à–µ–º –∏–∑ –ë–î
        existing_hash = "$2b$12$AFL7x0fCdvyB3xVs9j466uC8zqWj1cFVgrNPa97LK.a"
        existing_hash_bytes = existing_hash.encode('utf-8')
        print(f"üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ö–µ—à–µ–º: {existing_hash[:50]}...")
        
        is_valid_existing = bcrypt.checkpw(password_bytes, existing_hash_bytes)
        print(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ö–µ—à–∞: {is_valid_existing}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_bcrypt_direct()
